/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(AcceptPlayInfoProperty)
AUTOGENERATE_NAME(AcceptVoice)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(AllowClassRemoval)
AUTOGENERATE_NAME(AllowDetourTo)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(AnnouncementPlayed)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(AutoLoadMenus)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(ChatRoomMessage)
AUTOGENERATE_NAME(ClientCloseMenu)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(ClientNameChange)
AUTOGENERATE_NAME(ClientNetworkMessage)
AUTOGENERATE_NAME(ClientOpenMenu)
AUTOGENERATE_NAME(ClientReplaceMenu)
AUTOGENERATE_NAME(ClientReset)
AUTOGENERATE_NAME(ClientSetViewTarget)
AUTOGENERATE_NAME(ClientStartFire)
AUTOGENERATE_NAME(ClientStopFire)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ClientTrigger)
AUTOGENERATE_NAME(ClientValidate)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(CollisionSound)
AUTOGENERATE_NAME(ConnectFailure)
AUTOGENERATE_NAME(ConvertToFileExtension)
AUTOGENERATE_NAME(ConvertToFileType)
AUTOGENERATE_NAME(DelayedWarning)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(Desireability)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(DetourWeight)
AUTOGENERATE_NAME(DrawVignette)
AUTOGENERATE_NAME(DrivingStatusChanged)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(FillPrecacheMaterialsArray)
AUTOGENERATE_NAME(FillPrecacheStaticMeshesArray)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(GetChannelCount)
AUTOGENERATE_NAME(GetChannelIndex)
AUTOGENERATE_NAME(GetDescriptionText)
AUTOGENERATE_NAME(GetNameCallSign)
AUTOGENERATE_NAME(GetPathRoot)
AUTOGENERATE_NAME(GetSecurityLevel)
AUTOGENERATE_NAME(HasExtension)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(IsMember)
AUTOGENERATE_NAME(KApplyForce)
AUTOGENERATE_NAME(KDriverLeave)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(KForceExceed)
AUTOGENERATE_NAME(KickIdler)
AUTOGENERATE_NAME(KickWarning)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(KImpact)
AUTOGENERATE_NAME(KSkelConvulse)
AUTOGENERATE_NAME(KUpdateState)
AUTOGENERATE_NAME(KVehicleUpdateParams)
AUTOGENERATE_NAME(KVelDropBelow)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(MayDodgeToMoveTarget)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(MissedDodge)
AUTOGENERATE_NAME(ModeDoFire)
AUTOGENERATE_NAME(ModeHoldFire)
AUTOGENERATE_NAME(ModeTick)
AUTOGENERATE_NAME(ModifyVelocity)
AUTOGENERATE_NAME(MonitoredPawnAlert)
AUTOGENERATE_NAME(NativeConsoleOpen)
AUTOGENERATE_NAME(NeedsFlip)
AUTOGENERATE_NAME(NeedsMenuResolution)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyEnemyLockedOn)
AUTOGENERATE_NAME(NotifyEnemyLostLock)
AUTOGENERATE_NAME(NotifyFallingHitWall)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(NotifyJumpApex)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyLevelChange)
AUTOGENERATE_NAME(NotifyMissedJump)
AUTOGENERATE_NAME(NotifyMusicChange)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(NoTranslocatorKeyPressed)
AUTOGENERATE_NAME(NotReachableBy)
AUTOGENERATE_NAME(OnAdjustVolume)
AUTOGENERATE_NAME(OnAdminReply)
AUTOGENERATE_NAME(OnRefresh)
AUTOGENERATE_NAME(OnStreamChanged)
AUTOGENERATE_NAME(OnStreamingStopped)
AUTOGENERATE_NAME(OpenMenu)
AUTOGENERATE_NAME(OverrideDownload)
AUTOGENERATE_NAME(ParseDirectories)
AUTOGENERATE_NAME(ParseExtension)
AUTOGENERATE_NAME(ParsePath)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostRender2D)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(PreSpawned)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(ProgressCommand)
AUTOGENERATE_NAME(RanInto)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(ReceiveWarning)
AUTOGENERATE_NAME(RecoverFromBadStateCode)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplaceMenu)
AUTOGENERATE_NAME(SceneAbort)
AUTOGENERATE_NAME(SceneEnded)
AUTOGENERATE_NAME(SceneStarted)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(SendClientAdjustment)
AUTOGENERATE_NAME(ServerCallback)
AUTOGENERATE_NAME(ServerStartFire)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(ServerValidationResponse)
AUTOGENERATE_NAME(SetAmbientShake)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(SetGrammar)
AUTOGENERATE_NAME(SetHandle)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(SetRequiredGameResolution)
AUTOGENERATE_NAME(SetupSpecialPathAbilities)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(SetWheelsScale)
AUTOGENERATE_NAME(ShakeViewEvent)
AUTOGENERATE_NAME(SoakStop)
AUTOGENERATE_NAME(SpawnParticle)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(Stalled)
AUTOGENERATE_NAME(StartClientDemoRec)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(StartDriving)
AUTOGENERATE_NAME(StopDriving)
AUTOGENERATE_NAME(StopFire)
AUTOGENERATE_NAME(StopPlayFiring)
AUTOGENERATE_NAME(StreamFinished)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(SuperDesireability)
AUTOGENERATE_NAME(SVehicleUpdateParams)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(TeamChanged)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(ThirdPersonEffects)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(UnPressButtons)
AUTOGENERATE_NAME(UnStalled)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(UpdateCharacter)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(UpdateVehicle)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(VehicleDestroyed)
AUTOGENERATE_NAME(VehicleLocked)
AUTOGENERATE_NAME(VehiclePossessed)
AUTOGENERATE_NAME(VehicleStateReceived)
AUTOGENERATE_NAME(VehicleUnPossessed)
AUTOGENERATE_NAME(ViewportInitialized)
AUTOGENERATE_NAME(VoiceCommand)
AUTOGENERATE_NAME(WeaponTick)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)

#ifndef NAMES_ONLY

enum EStreamPlaylistType
{
    SPT_None                =0,
    SPT_M3U                 =1,
    SPT_PLS                 =2,
    SPT_B4S                 =3,
    SPT_MAX                 =4,
};
enum EFileType
{
    FILE_None               =0,
    FILE_Directory          =1,
    FILE_Log                =2,
    FILE_Ini                =3,
    FILE_Stream             =4,
    FILE_Playlist           =5,
    FILE_Music              =6,
    FILE_Map                =7,
    FILE_Texture            =8,
    FILE_Animation          =9,
    FILE_Static             =10,
    FILE_XML                =11,
    FILE_HTML               =12,
    FILE_Sound              =13,
    FILE_Demo               =14,
    FILE_DivX               =15,
    FILE_MAX                =16,
};

struct UStreamBase_eventConvertToFileType_Parms
{
    FString Extension;
    BYTE ReturnValue;
};
struct UStreamBase_eventConvertToFileExtension_Parms
{
    BYTE Type;
    FString ReturnValue;
};
struct UStreamBase_eventParseDirectories_Parms
{
    FString InPath;
    TArray<FString> ReturnValue;
};
struct UStreamBase_eventParseExtension_Parms
{
    FString FileNameWithExtension;
    FString ReturnValue;
};
struct UStreamBase_eventParsePath_Parms
{
    FString InPath;
    FFilePath ParsedPath;
    BITFIELD ReturnValue;
};
struct UStreamBase_eventHasExtension_Parms
{
    FString Test;
    BITFIELD ReturnValue;
};
struct UStreamBase_eventGetPathRoot_Parms
{
    FString InPath;
    FString ReturnValue;
};
class ENGINE_API UStreamBase : public UObject
{
public:
    DECLARE_FUNCTION(execIsCaseSensitive);
    DECLARE_FUNCTION(execGetPathSeparator);
    DECLARE_FUNCTION(execMultiplyEqual_StrStr);
    DECLARE_FUNCTION(execMultiply_StrStr);
    BYTE eventConvertToFileType(const FString& Extension)
    {
        UStreamBase_eventConvertToFileType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Extension=Extension;
        ProcessEvent(FindFunctionChecked(ENGINE_ConvertToFileType),&Parms);
        return Parms.ReturnValue;
    }
    FString eventConvertToFileExtension(BYTE Type)
    {
        UStreamBase_eventConvertToFileExtension_Parms Parms;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ConvertToFileExtension),&Parms);
        return Parms.ReturnValue;
    }
    TArray<FString> eventParseDirectories(FString& InPath)
    {
        UStreamBase_eventParseDirectories_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InPath=InPath;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseDirectories),&Parms);
        InPath=Parms.InPath;
        return Parms.ReturnValue;
    }
    FString eventParseExtension(FString& FileNameWithExtension)
    {
        UStreamBase_eventParseExtension_Parms Parms;
        Parms.FileNameWithExtension=FileNameWithExtension;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseExtension),&Parms);
        FileNameWithExtension=Parms.FileNameWithExtension;
        return Parms.ReturnValue;
    }
    BITFIELD eventParsePath(const FString& InPath, FFilePath& ParsedPath)
    {
        UStreamBase_eventParsePath_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InPath=InPath;
        Parms.ParsedPath=ParsedPath;
        ProcessEvent(FindFunctionChecked(ENGINE_ParsePath),&Parms);
        ParsedPath=Parms.ParsedPath;
        return Parms.ReturnValue;
    }
    BITFIELD eventHasExtension(const FString& Test)
    {
        UStreamBase_eventHasExtension_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Test=Test;
        ProcessEvent(FindFunctionChecked(ENGINE_HasExtension),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetPathRoot(FString& InPath)
    {
        UStreamBase_eventGetPathRoot_Parms Parms;
        Parms.InPath=InPath;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPathRoot),&Parms);
        InPath=Parms.InPath;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UStreamBase,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UStreamBase)
};


struct UStreamTag_eventOnRefresh_Parms
{
};
class ENGINE_API UStreamTag : public UStreamBase
{
public:
    FID3Field TagID GCC_PACK(4);
    FID3Field TrackNumber;
    FID3Field Title;
    FID3Field Artist;
    FID3Field Album;
    FID3Field Year;
    FID3Field Genre;
    FID3Field Duration;
    TArrayNoInit<FID3Field> Fields;
    PTRINT NativeID3Tag[2];
    FScriptDelegate __OnRefresh__Delegate;
    DECLARE_FUNCTION(execDumpTag);
    void delegateOnRefresh()
    {
        ProcessDelegate(ENGINE_OnRefresh,&__OnRefresh__Delegate,NULL);
    }
    DECLARE_CLASS(UStreamTag,UStreamBase,0,Engine)
	friend class UStream;

protected:
	UBOOL HasV2Tag( FArchive* InReader ) const;
	UBOOL HasV1Tag( FArchive* InReader ) const;
	UBOOL SaveTag();
	UBOOL LinkTag( /*const TCHAR* FileName*/ );
	void  RefreshShortcuts();
};


struct UStream_eventSetHandle_Parms
{
    INT NewHandle;
    BITFIELD ReturnValue;
};
class ENGINE_API UStream : public UStreamBase
{
public:
    INT Handle GCC_PACK(4);
    FStringNoInit DefaultExtension;
    class UStreamTag* IDTag;
    FFilePath PathName;
    BYTE Type;
    BITFIELD bReadOnly:1 GCC_PACK(4);
    DECLARE_FUNCTION(execLoadID3Tag);
    DECLARE_FUNCTION(execSaveID3Tag);
    BITFIELD eventSetHandle(INT NewHandle)
    {
        UStream_eventSetHandle_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewHandle=NewHandle;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHandle),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UStream,UStreamBase,0,Engine)
	UBOOL   LoadID3Tag();
	UBOOL   SaveID3Tag();
};


class ENGINE_API UStreamInterface : public UStreamBase
{
public:
    FStringNoInit CurrentDirectory GCC_PACK(4);
    DECLARE_FUNCTION(execLoadPlaylist);
    DECLARE_FUNCTION(execValidFile);
    DECLARE_FUNCTION(execCreateStream);
    DECLARE_FUNCTION(execValidDirectory);
    DECLARE_FUNCTION(execRemoveDirectory);
    DECLARE_FUNCTION(execCreateDirectory);
    DECLARE_FUNCTION(execGetDirectoryContents);
    DECLARE_FUNCTION(execGetDriveLetters);
    DECLARE_FUNCTION(execGetBaseDirectory);
    DECLARE_CLASS(UStreamInterface,UStreamBase,0|CLASS_Config,Engine)
private:
	        UStream*  CreateStream( FString& FileName, UBOOL bStrict=0 );
public:
	virtual void      LoadPlaylist( FString& FileName, TArray<FString>& Lines, UBOOL bStrict=0 ) const;
};

enum EStreamFinishReason
{
    STREAMFINISH_EOF        =0,
    STREAMFINISH_Error      =1,
    STREAMFINISH_MAX        =2,
};
enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_Unicode              =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_Mouse4               =193,
    IK_Mouse5               =194,
    IK_Mouse6               =195,
    IK_Mouse7               =196,
    IK_Mouse8               =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_UnknownE0            =224,
    IK_UnknownE1            =225,
    IK_UnknownE2            =226,
    IK_UnknownE3            =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_JoySlider1           =234,
    IK_JoySlider2           =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyX                 =240,
    IK_JoyY                 =241,
    IK_JoyZ                 =242,
    IK_JoyR                 =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};

class ENGINE_API UInteractions : public UObject
{
public:
    DECLARE_CLASS(UInteractions,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractions)
};


struct UInteraction_eventNotifyMusicChange_Parms
{
};
struct UInteraction_eventNotifyLevelChange_Parms
{
};
struct UInteraction_eventInitialized_Parms
{
};
class ENGINE_API UInteraction : public UInteractions
{
public:
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    BITFIELD bNativeEvents:1;
    class UPlayer* ViewportOwner GCC_PACK(4);
    class UInteractionMaster* Master;
    DECLARE_FUNCTION(execScreenToWorld);
    DECLARE_FUNCTION(execWorldToScreen);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execInitialize);
    void eventNotifyMusicChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyMusicChange),NULL);
    }
    void eventNotifyLevelChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLevelChange),NULL);
    }
    void eventInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
    }
    DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
    #include "UInteraction.h"
};

#define UCONST_INVALIDSONGHANDLE 0

struct UStreamInteraction_eventOnAdjustVolume_Parms
{
    FLOAT NewVolume;
};
struct UStreamInteraction_eventOnStreamingStopped_Parms
{
};
struct UStreamInteraction_eventOnStreamChanged_Parms
{
    FString NewStreamFileName;
};
class ENGINE_API UStreamInteraction : public UInteraction
{
public:
    FLOAT FadeInSeconds GCC_PACK(4);
    FLOAT FadeOutSeconds;
    FStringNoInit PlaylistManagerType;
    class UStreamPlaylistManager* PlaylistManager;
    class UStreamInterface* FileManager;
    INT CurrentSongHandle;
    FLOAT CurrentSongPosition;
    FLOAT LastPlayTime;
    FLOAT CurrentSongDuration;
    FStringNoInit CurrentSong;
    class UStream* CurrentStreamAttachment;
    BITFIELD bAutoStart:1 GCC_PACK(4);
    BITFIELD bDisplayTrackChanges:1;
    BITFIELD bRestartTrack:1;
    BITFIELD bTrackWaiting:1;
    FScriptDelegate __OnStreamChanged__Delegate GCC_PACK(4);
    FScriptDelegate __OnStreamingStopped__Delegate;
    FScriptDelegate __OnAdjustVolume__Delegate;
    DECLARE_FUNCTION(execIsPaused);
    void delegateOnAdjustVolume(FLOAT NewVolume)
    {
        UStreamInteraction_eventOnAdjustVolume_Parms Parms;
        Parms.NewVolume=NewVolume;
        ProcessDelegate(ENGINE_OnAdjustVolume,&__OnAdjustVolume__Delegate,&Parms);
    }
    void delegateOnStreamingStopped()
    {
        ProcessDelegate(ENGINE_OnStreamingStopped,&__OnStreamingStopped__Delegate,NULL);
    }
    void delegateOnStreamChanged(const FString& NewStreamFileName)
    {
        UStreamInteraction_eventOnStreamChanged_Parms Parms;
        Parms.NewStreamFileName=NewStreamFileName;
        ProcessDelegate(ENGINE_OnStreamChanged,&__OnStreamChanged__Delegate,&Parms);
    }
    DECLARE_CLASS(UStreamInteraction,UInteraction,0|CLASS_Config,Engine)
	void Destroy();
	static struct FrameTypeList* GetFrameTypes();
};


struct UBaseGUIController_eventSetRequiredGameResolution_Parms
{
    FString GameRes;
};
struct UBaseGUIController_eventNeedsMenuResolution_Parms
{
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventInitializeController_Parms
{
};
struct UBaseGUIController_eventCloseAll_Parms
{
    BITFIELD bCancel;
    BITFIELD bForced;
};
struct UBaseGUIController_eventCloseMenu_Parms
{
    BITFIELD bCanceled;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventReplaceMenu_Parms
{
    FString NewMenuName;
    FString Param1;
    FString Param2;
    BITFIELD bCancelled;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventAutoLoadMenus_Parms
{
};
struct UBaseGUIController_eventOpenMenu_Parms
{
    FString NewMenuName;
    FString Param1;
    FString Param2;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventOnAdminReply_Parms
{
    FString Reply;
};
class ENGINE_API UBaseGUIController : public UInteraction
{
public:
    class UMaterial* DefaultPens[3] GCC_PACK(4);
    FStringNoInit NetworkMsgMenu;
    FStringNoInit QuestionMenuClass;
    FScriptDelegate __OnAdminReply__Delegate;
    void eventSetRequiredGameResolution(const FString& GameRes)
    {
        UBaseGUIController_eventSetRequiredGameResolution_Parms Parms;
        Parms.GameRes=GameRes;
        ProcessEvent(FindFunctionChecked(ENGINE_SetRequiredGameResolution),&Parms);
    }
    BITFIELD eventNeedsMenuResolution()
    {
        UBaseGUIController_eventNeedsMenuResolution_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_NeedsMenuResolution),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitializeController()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitializeController),NULL);
    }
    void eventCloseAll(BITFIELD bCancel, BITFIELD bForced)
    {
        UBaseGUIController_eventCloseAll_Parms Parms;
        Parms.bCancel=((bCancel) ? FIRST_BITFIELD : 0);
        Parms.bForced=((bForced) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_CloseAll),&Parms);
    }
    BITFIELD eventCloseMenu(BITFIELD bCanceled)
    {
        UBaseGUIController_eventCloseMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bCanceled=((bCanceled) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_CloseMenu),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventReplaceMenu(const FString& NewMenuName, const FString& Param1, const FString& Param2, BITFIELD bCancelled)
    {
        UBaseGUIController_eventReplaceMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMenuName=NewMenuName;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ReplaceMenu),&Parms);
        return Parms.ReturnValue;
    }
    void eventAutoLoadMenus()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AutoLoadMenus),NULL);
    }
    BITFIELD eventOpenMenu(const FString& NewMenuName, const FString& Param1, const FString& Param2)
    {
        UBaseGUIController_eventOpenMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMenuName=NewMenuName;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(ENGINE_OpenMenu),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnAdminReply(const FString& Reply)
    {
        UBaseGUIController_eventOnAdminReply_Parms Parms;
        Parms.Reply=Reply;
        ProcessDelegate(ENGINE_OnAdminReply,&__OnAdminReply__Delegate,&Parms);
    }
    DECLARE_CLASS(UBaseGUIController,UInteraction,0|CLASS_Config,Engine)
	virtual void ResolutionChanged(int ResX, int ResY) {}
	virtual void ResetInput() {}
};


struct UConsole_eventConnectFailure_Parms
{
    FString FailCode;
    FString URL;
};
struct UConsole_eventNativeConsoleOpen_Parms
{
};
struct UConsole_eventViewportInitialized_Parms
{
};
class ENGINE_API UConsole : public UInteraction
{
public:
    BYTE ConsoleHotKey GCC_PACK(4);
    INT HistoryTop GCC_PACK(4);
    INT HistoryBot;
    INT HistoryCur;
    FStringNoInit TypedStr;
    FStringNoInit History[16];
    INT TypedStrPos;
    BITFIELD bTyping:1 GCC_PACK(4);
    BITFIELD bIgnoreKeys:1;
    BITFIELD bRunningDemo:1;
    BITFIELD bHoldingStart:1;
    BITFIELD bHoldingBack:1;
    FLOAT TimeIdle GCC_PACK(4);
    FLOAT TimeHoldingReboot;
    FLOAT TimePerTitle;
    FLOAT TimePerDemo;
    FLOAT TimeTooIdle;
    FLOAT TimeBeforeReboot;
    FLOAT TimePerSoak;
    FStringNoInit DemoLevels[64];
    TArrayNoInit<FString> BufferedConsoleCommands;
    void eventConnectFailure(const FString& FailCode, const FString& URL)
    {
        UConsole_eventConnectFailure_Parms Parms;
        Parms.FailCode=FailCode;
        Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectFailure),&Parms);
    }
    void eventNativeConsoleOpen()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NativeConsoleOpen),NULL);
    }
    void eventViewportInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ViewportInitialized),NULL);
    }
    DECLARE_CLASS(UConsole,UInteraction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConsole)
};


struct UInteractionMaster_eventNotifyLevelChange_Parms
{
    TArray<class UInteraction*> InteractionArray;
};
struct UInteractionMaster_eventProcess_Message_Parms
{
    FString Msg;
    FLOAT MsgLife;
    TArray<class UInteraction*> InteractionArray;
};
struct UInteractionMaster_eventProcess_Tick_Parms
{
    TArray<class UInteraction*> InteractionArray;
    FLOAT DeltaTime;
};
struct UInteractionMaster_eventProcess_PostRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_PreRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventProcess_KeyType_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    FString Unicode;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventSetFocusTo_Parms
{
    class UInteraction* Inter;
    class UPlayer* ViewportOwner;
};
struct UInteractionMaster_eventRemoveInteraction_Parms
{
    class UInteraction* RemoveMe;
};
struct UInteractionMaster_eventAddInteraction_Parms
{
    FString InteractionName;
    class UPlayer* AttachTo;
    class UInteraction* ReturnValue;
};
class ENGINE_API UInteractionMaster : public UInteractions
{
public:
    class UClient* Client GCC_PACK(4);
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    BITFIELD bRequireRawJoystick:1 GCC_PACK(4);
    DECLARE_FUNCTION(execTravel);
    void eventNotifyLevelChange(TArray<class UInteraction*> InteractionArray)
    {
        UInteractionMaster_eventNotifyLevelChange_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLevelChange),&Parms);
    }
    void eventProcess_Message(const FString& Msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
    {
        UInteractionMaster_eventProcess_Message_Parms Parms;
        Parms.Msg=Msg;
        Parms.MsgLife=MsgLife;
        Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
    }
    void eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
    {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
    }
    void eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
    }
    void eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
    }
    BITFIELD eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
    {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
        Key=Parms.Key;
        Action=Parms.Action;
        return Parms.ReturnValue;
    }
    BITFIELD eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key, const FString& Unicode)
    {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Unicode=Unicode;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
    {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
        Parms.Inter=Inter;
        Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
    }
    void eventRemoveInteraction(class UInteraction* RemoveMe)
    {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
        Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
    }
    class UInteraction* eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
    {
        UInteractionMaster_eventAddInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionName=InteractionName;
        Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
    #include "UInteractionMaster.h"
};

#define UCONST_mMaxTimes 5

class ENGINE_API USpline : public UObject
{
public:
    FVector SplineA GCC_PACK(4);
    FVector SplineB;
    FVector SplineC;
    FVector SplineD;
    FRotator SplineE;
    FRotator SplineF;
    FRotator SplineG;
    FRotator SplineH;
    FLOAT mStartT;
    FLOAT mEndT;
    BITFIELD mbInit:1 GCC_PACK(4);
    FLOAT mTime GCC_PACK(4);
    FLOAT maDeltaTimes[5];
    INT mIndex;
    FLOAT mTotalTime;
    BITFIELD mbRotatorSpline:1 GCC_PACK(4);
    INT mCnt GCC_PACK(4);
    DECLARE_FUNCTION(execNextSplineRot);
    DECLARE_FUNCTION(execNextSplinePos);
    DECLARE_FUNCTION(execInitSplineRot);
    DECLARE_FUNCTION(execInitSplinePath);
    DECLARE_CLASS(USpline,UObject,0,Engine)
    #include "USpline.h"
};

enum EFlagState
{
    FLAG_Home               =0,
    FLAG_HeldFriendly       =1,
    FLAG_HeldEnemy          =2,
    FLAG_Down               =3,
    FLAG_MAX                =4,
};
enum eKillZType
{
    KILLZ_None              =0,
    KILLZ_Lava              =1,
    KILLZ_Suicide           =2,
    KILLZ_MAX               =3,
};
enum EDoubleClickDir
{
    DCLICK_None             =0,
    DCLICK_Left             =1,
    DCLICK_Right            =2,
    DCLICK_Forward          =3,
    DCLICK_Back             =4,
    DCLICK_Active           =5,
    DCLICK_Done             =6,
    DCLICK_MAX              =7,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EForceType
{
    FT_None                 =0,
    FT_DragAlong            =1,
    FT_Constant             =2,
    FT_MAX                  =3,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ESoundOcclusion
{
    OCCLUSION_Default       =0,
    OCCLUSION_None          =1,
    OCCLUSION_BSP           =2,
    OCCLUSION_StaticMeshes  =3,
    OCCLUSION_MAX           =4,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_Additive            =6,
    STY_Subtractive         =7,
    STY_Particle            =8,
    STY_AlphaZ              =9,
    STY_MAX                 =10,
};
enum ESurfaceTypes
{
    EST_Default             =0,
    EST_Rock                =1,
    EST_Dirt                =2,
    EST_Metal               =3,
    EST_Wood                =4,
    EST_Plant               =5,
    EST_Flesh               =6,
    EST_Ice                 =7,
    EST_Snow                =8,
    EST_Water               =9,
    EST_Glass               =10,
    EST_Custom00            =11,
    EST_Custom01            =12,
    EST_Custom02            =13,
    EST_Custom03            =14,
    EST_Custom04            =15,
    EST_Custom05            =16,
    EST_Custom06            =17,
    EST_Custom07            =18,
    EST_Custom08            =19,
    EST_Custom09            =20,
    EST_Custom10            =21,
    EST_Custom11            =22,
    EST_Custom12            =23,
    EST_Custom13            =24,
    EST_Custom14            =25,
    EST_Custom15            =26,
    EST_Custom16            =27,
    EST_Custom17            =28,
    EST_Custom18            =29,
    EST_Custom19            =30,
    EST_Custom20            =31,
    EST_Custom21            =32,
    EST_Custom22            =33,
    EST_Custom23            =34,
    EST_Custom24            =35,
    EST_Custom25            =36,
    EST_Custom26            =37,
    EST_Custom27            =38,
    EST_Custom28            =39,
    EST_Custom29            =40,
    EST_Custom30            =41,
    EST_Custom31            =42,
    EST_MAX                 =43,
};
enum EUV2Mode
{
    UVM_MacroTexture        =0,
    UVM_LightMap            =1,
    UVM_Skin                =2,
    UVM_MAX                 =3,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Interpolating      =7,
    PHYS_MovingBrush        =8,
    PHYS_Spider             =9,
    PHYS_Trailer            =10,
    PHYS_Ladder             =11,
    PHYS_RootMotion         =12,
    PHYS_Karma              =13,
    PHYS_KarmaRagDoll       =14,
    PHYS_Hovering           =15,
    PHYS_CinMotion          =16,
    PHYS_MAX                =17,
};
enum EFilterState
{
    FS_Maybe                =0,
    FS_Yes                  =1,
    FS_No                   =2,
    FS_MAX                  =3,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DrawType             =9,
    DT_Particle             =10,
    DT_AntiPortal           =11,
    DT_FluidSurface         =12,
    DT_MAX                  =13,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Negative             =19,
    LE_Sunlight             =20,
    LE_QuadraticNonIncidence=21,
    LE_MAX                  =22,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_FadeOut              =10,
    LT_MAX                  =11,
};
#define UCONST_MINFLOORZ 0.7
#define UCONST_MAXSTEPHEIGHT 35.0

struct AActor_eventTriggerEvent_Parms
{
    FName EventName;
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* MessageClass;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventRecoverFromBadStateCode_Parms
{
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
    BITFIELD Attenuate;
};
struct AActor_eventTornOff_Parms
{
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
    BYTE KillType;
};
struct AActor_eventUsedBy_Parms
{
    class APawn* User;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventFinishedInterpolation_Parms
{
};
struct AActor_eventRanInto_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventClientTrigger_Parms
{
};
struct AActor_eventPostNetReceive_Parms
{
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventKUpdateState_Parms
{
    FKRigidBodyState NewState;
    BITFIELD ReturnValue;
};
struct AActor_eventKApplyForce_Parms
{
    FVector Force;
    FVector Torque;
};
struct AActor_eventKSkelConvulse_Parms
{
};
struct AActor_eventKVelDropBelow_Parms
{
};
struct AActor_eventKImpact_Parms
{
    class AActor* Other;
    FVector pos;
    FVector impactVel;
    FVector impactNorm;
};
struct AActor_eventAnimEnd_Parms
{
    INT Channel;
};
class ENGINE_API AActor : public UObject
{
public:
    BYTE LightType GCC_PACK(4);
    BYTE LightEffect;
    BYTE LightHue;
    BYTE LightSaturation;
    FLOAT LightBrightness GCC_PACK(4);
    FLOAT LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE DrawType;
    BYTE StaticFilterState;
    class UStaticMesh* StaticMesh GCC_PACK(4);
    class AActor* Owner;
    class AActor* Base;
    FActorRenderDataPtr ActorRenderData;
    FLightRenderDataPtr LightRenderData;
    INT RenderRevision;
    TArrayNoInit<FBatchReference> StaticSectionBatches;
    FName ForcedVisibilityZoneTag;
    FLOAT CullDistance;
    BITFIELD bSpecialLit:1 GCC_PACK(4);
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bDirectionalCorona:1;
    BITFIELD bAttenByLife:1;
    BITFIELD bLightingVisibility:1;
    BITFIELD bUseDynamicLights:1;
    BITFIELD bLightChanged:1;
    BITFIELD bDramaticLighting:1;
    BITFIELD bStatic:1;
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bTicked:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bHighDetail:1;
    BITFIELD bSuperHighDetail:1;
    BITFIELD bOnlyDrawIfAttached:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerAllowRotation:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bOnlyAffectPawns:1;
    BITFIELD bDisableSorting:1;
    BITFIELD bIgnoreEncroachers:1;
    BITFIELD bShowOctreeNodes:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bShouldStopKarma:1;
    BITFIELD bDetailAttachment:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bOnlyRelevantToOwner:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bCompressedPosition:1;
    BITFIELD bAlwaysZeroBoneOffset:1;
    BITFIELD bIgnoreVehicles:1;
    BITFIELD bDeferRendering:1;
    BITFIELD bBadStateCode:1;
    BYTE Physics GCC_PACK(4);
    BYTE RemoteRole;
    BYTE Role;
    INT NetTag GCC_PACK(4);
    FLOAT NetUpdateTime;
    FLOAT NetUpdateFrequency;
    FLOAT NetPriority;
    class APawn* Instigator;
    class USound* AmbientSound;
    FName AttachmentBone;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FLOAT LifeSpan;
    FPointRegion Region;
    FLOAT TimerRate;
    class UMaterial* OverlayMaterial;
    class UMesh* Mesh;
    FLOAT LastRenderTime;
    FName Tag;
    TArrayNoInit<INT> Leaves;
    FName Event;
    class AInventory* Inventory;
    FLOAT TimerCounter;
    class UMeshInstance* MeshInstance;
    FLOAT LODBias;
    FName InitialState;
    FName Group;
    TArrayNoInit<class AActor*> Touching;
    TArrayNoInit<PTRINT> OctreeNodes;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    class AActor* Deleted;
    FLOAT LatentFloat;
    INT CollisionTag;
    INT JoinedTag;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FVector CachedLocation;
    FRotator CachedRotation;
    FMatrix CachedLocalToWorld;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    FMatrix HardRelMatrix;
    TArrayNoInit<FProjectorRenderInfoPtr> Projectors;
    TArrayNoInit<FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;
    class UMaterial* Texture;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    class UMaterial* RepSkin;
    BYTE AmbientGlow;
    BYTE MaxLights;
    BYTE UV2Mode;
    class UConvexVolume* AntiPortal GCC_PACK(4);
    class UMaterial* UV2Texture;
    FLOAT ScaleGlow;
    BYTE SurfaceType;
    BYTE Style;
    BITFIELD bUnlit:1 GCC_PACK(4);
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bUseLightingFromBase:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bCanBeDamaged:1;
    BITFIELD bShouldBaseAtStartup:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bClientAnim:1;
    BITFIELD bDisturbFluidSurface:1;
    FLOAT FluidSurfaceShootStrengthMod GCC_PACK(4);
    BITFIELD bAlwaysTick:1 GCC_PACK(4);
    BITFIELD bFullVolume:1;
    BITFIELD bNotifyLocalPlayerTeamReceived:1;
    BITFIELD bHardAttach:1;
    BITFIELD bForceSkelUpdate:1;
    BITFIELD bClientAuthoritative:1;
    BYTE SoundVolume GCC_PACK(4);
    BYTE SoundPitch;
    BYTE SoundOcclusion;
    FLOAT SoundRadius GCC_PACK(4);
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bBlockZeroExtentTraces:1;
    BITFIELD bBlockNonZeroExtentTraces:1;
    BITFIELD bAutoAlignToTerrain:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bBlockKarma:1;
    BITFIELD bBlocksTeleport:1;
    BITFIELD bAlwaysFaceCamera:1;
    BITFIELD bNetNotify:1;
    BITFIELD bClientTrigger:1;
    BITFIELD bUseCollisionStaticMesh:1;
    BITFIELD bIgnoreOutOfWorld:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    FLOAT Mass GCC_PACK(4);
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    FName ExcludeTag[8];
    class UKarmaParamsCollision* KParams;
    INT KStepTag;
    FAnimRep SimAnim;
    BYTE ForceType;
    FLOAT ForceRadius GCC_PACK(4);
    FLOAT ForceScale;
    FLOAT ForceNoise;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bRepClientDemo:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bDemoOwner:1;
    BITFIELD bNoRepMesh:1;
    BITFIELD bNotOnDedServer:1;
    BITFIELD bAlreadyPrecachedMaterials:1;
    BITFIELD bAlreadyPrecachedMeshes:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bLockLocation:1;
    class UClass* MessageClass GCC_PACK(4);
    FLOAT OverlayTimer;
    FLOAT ClientOverlayTimer;
    FLOAT ClientOverlayCounter;
    class UMaterial* HighDetailOverlay;
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execCollidingActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execDynamicActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetAllIntDesc);
    DECLARE_FUNCTION(execGetAllInt);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execResetStaticFilterState);
    DECLARE_FUNCTION(execSuggestFallVelocity);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execForceFeedbackSupported);
    DECLARE_FUNCTION(execChangeBaseParamsFeedbackEffect);
    DECLARE_FUNCTION(execChangeSpringFeedbackEffect);
    DECLARE_FUNCTION(execStopFeedbackEffect);
    DECLARE_FUNCTION(execPlayFeedbackEffect);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execTraceThisActor);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execStopAllMusic);
    DECLARE_FUNCTION(execStopMusic);
    DECLARE_FUNCTION(execPlayMusic);
    DECLARE_FUNCTION(execPauseStream);
    DECLARE_FUNCTION(execAdjustVolume);
    DECLARE_FUNCTION(execSeekStream);
    DECLARE_FUNCTION(execStopStream);
    DECLARE_FUNCTION(execPlayStream);
    DECLARE_FUNCTION(execAllowMusicPlayback);
    DECLARE_FUNCTION(execUnClock);
    DECLARE_FUNCTION(execClock);
    DECLARE_FUNCTION(execKIsRagdollAvailable);
    DECLARE_FUNCTION(execKMakeRagdollAvailable);
    DECLARE_FUNCTION(execKRemoveAllBoneLifters);
    DECLARE_FUNCTION(execKRemoveLifterFromBone);
    DECLARE_FUNCTION(execKAddBoneLifter);
    DECLARE_FUNCTION(execKScaleJointLimits);
    DECLARE_FUNCTION(execKFreezeRagdoll);
    DECLARE_FUNCTION(execKGetSkelMass);
    DECLARE_FUNCTION(execKSetSkelVel);
    DECLARE_FUNCTION(execKEnableCollision);
    DECLARE_FUNCTION(execKDisableCollision);
    DECLARE_FUNCTION(execKGetActorGravScale);
    DECLARE_FUNCTION(execKSetActorGravScale);
    DECLARE_FUNCTION(execKSetBlockKarma);
    DECLARE_FUNCTION(execKSetStayUprightParams);
    DECLARE_FUNCTION(execKSetStayUpright);
    DECLARE_FUNCTION(execKAddAngularImpulse);
    DECLARE_FUNCTION(execKAddImpulse);
    DECLARE_FUNCTION(execKIsAwake);
    DECLARE_FUNCTION(execKWake);
    DECLARE_FUNCTION(execKGetImpactThreshold);
    DECLARE_FUNCTION(execKSetImpactThreshold);
    DECLARE_FUNCTION(execKGetCOMPosition);
    DECLARE_FUNCTION(execKGetCOMOffset);
    DECLARE_FUNCTION(execKSetCOMOffset);
    DECLARE_FUNCTION(execKGetRestitution);
    DECLARE_FUNCTION(execKSetRestitution);
    DECLARE_FUNCTION(execKGetFriction);
    DECLARE_FUNCTION(execKSetFriction);
    DECLARE_FUNCTION(execKGetDampingProps);
    DECLARE_FUNCTION(execKSetDampingProps);
    DECLARE_FUNCTION(execKGetInertiaTensor);
    DECLARE_FUNCTION(execKSetInertiaTensor);
    DECLARE_FUNCTION(execKGetMass);
    DECLARE_FUNCTION(execKSetMass);
    DECLARE_FUNCTION(execKRBVecFromVector);
    DECLARE_FUNCTION(execKRBVecToVector);
    DECLARE_FUNCTION(execKDrawRigidBodyState);
    DECLARE_FUNCTION(execKGetRigidBodyState);
    DECLARE_FUNCTION(execKGetRBQuaternion);
    DECLARE_FUNCTION(execKSetSimParams);
    DECLARE_FUNCTION(execKGetSimParams);
    DECLARE_FUNCTION(execOnlyAffectPawns);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execDebugUnclock);
    DECLARE_FUNCTION(execDebugClock);
    DECLARE_FUNCTION(execClearStayingDebugLines);
    DECLARE_FUNCTION(execDrawDebugSphere);
    DECLARE_FUNCTION(execDrawDebugCircle);
    DECLARE_FUNCTION(execDrawStayingDebugLine);
    DECLARE_FUNCTION(execDrawDebugLine);
    DECLARE_FUNCTION(execGetRenderBoundingSphere);
    DECLARE_FUNCTION(execGetUrlOption);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execGetClosestBone);
    DECLARE_FUNCTION(execAnimIsInGroup);
    DECLARE_FUNCTION(execGetAnimParams);
    DECLARE_FUNCTION(execSetBoneRotation);
    DECLARE_FUNCTION(execSetBoneLocation);
    DECLARE_FUNCTION(execSetBoneDirection);
    DECLARE_FUNCTION(execSetBoneScale);
    DECLARE_FUNCTION(execLockRootMotion);
    DECLARE_FUNCTION(execDetachFromBone);
    DECLARE_FUNCTION(execAttachToBone);
    DECLARE_FUNCTION(execGetRootRotationDelta);
    DECLARE_FUNCTION(execGetRootLocationDelta);
    DECLARE_FUNCTION(execGetRootRotation);
    DECLARE_FUNCTION(execGetRootLocation);
    DECLARE_FUNCTION(execGetBoneRotation);
    DECLARE_FUNCTION(execGetBoneCoords);
    DECLARE_FUNCTION(execAnimBlendToAlpha);
    DECLARE_FUNCTION(execAnimBlendParams);
    DECLARE_FUNCTION(execBoneRefresh);
    DECLARE_FUNCTION(execLinkMesh);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execGetNotifyChannel);
    DECLARE_FUNCTION(execEnableChannelNotify);
    DECLARE_FUNCTION(execAnimStopLooping);
    DECLARE_FUNCTION(execIsTweening);
    DECLARE_FUNCTION(execSetAnimFrame);
    DECLARE_FUNCTION(execFreezeAnimAt);
    DECLARE_FUNCTION(execStopAnimating);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execGetMeshName);
    DECLARE_FUNCTION(execIsJoinedTo);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRelativeLocation);
    DECLARE_FUNCTION(execSetRelativeRotation);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetDrawType);
    DECLARE_FUNCTION(execSetStaticMesh);
    DECLARE_FUNCTION(execSetDrawScale3D);
    DECLARE_FUNCTION(execSetDrawScale);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execShouldBeHidden);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execTextToSpeech);
    DECLARE_FUNCTION(execCopyObjectToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTriggerEvent_Parms Parms;
        Parms.EventName=EventName;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        if(IsProbing(NAME_PostBeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
        }
    }
    void eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.MessageClass=MessageClass;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        if(IsProbing(NAME_PreBeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
        }
    }
    void eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    void eventRecoverFromBadStateCode()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RecoverFromBadStateCode),NULL);
    }
    void eventBeginPlay()
    {
        if(IsProbing(NAME_BeginPlay)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
        }
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch, BITFIELD Attenuate)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=((bNoOverride) ? FIRST_BITFIELD : 0);
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.Attenuate=((Attenuate) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTornOff()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TornOff),NULL);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld(BYTE KillType)
    {
        AActor_eventFellOutOfWorld_Parms Parms;
        Parms.KillType=KillType;
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),&Parms);
    }
    void eventUsedBy(class APawn* User)
    {
        AActor_eventUsedBy_Parms Parms;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
    }
    void eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    void eventFinishedInterpolation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),NULL);
    }
    void eventRanInto(class AActor* Other)
    {
        AActor_eventRanInto_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_RanInto),&Parms);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    void eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        if(IsProbing(NAME_PostTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
        }
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        if(IsProbing(NAME_PhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
        }
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        if(IsProbing(NAME_ZoneChange)) {
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
        }
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    void eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    void eventClientTrigger()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTrigger),NULL);
    }
    void eventPostNetReceive()
    {
        if(IsProbing(NAME_PostNetReceive)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
        }
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    void eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    BITFIELD eventKUpdateState(FKRigidBodyState& NewState)
    {
        AActor_eventKUpdateState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_KUpdateState),&Parms);
        NewState=Parms.NewState;
        return Parms.ReturnValue;
    }
    void eventKApplyForce(FVector& Force, FVector& Torque)
    {
        AActor_eventKApplyForce_Parms Parms;
        Parms.Force=Force;
        Parms.Torque=Torque;
        ProcessEvent(FindFunctionChecked(ENGINE_KApplyForce),&Parms);
        Force=Parms.Force;
        Torque=Parms.Torque;
    }
    void eventKSkelConvulse()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KSkelConvulse),NULL);
    }
    void eventKVelDropBelow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVelDropBelow),NULL);
    }
    void eventKImpact(class AActor* Other, FVector pos, FVector impactVel, FVector impactNorm)
    {
        AActor_eventKImpact_Parms Parms;
        Parms.Other=Other;
        Parms.pos=pos;
        Parms.impactVel=impactVel;
        Parms.impactNorm=impactNorm;
        ProcessEvent(FindFunctionChecked(ENGINE_KImpact),&Parms);
    }
    void eventAnimEnd(INT Channel)
    {
        AActor_eventAnimEnd_Parms Parms;
        if(IsProbing(NAME_AnimEnd)) {
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
        }
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    #include "AActor.h"
};


class ENGINE_API ADecoVolumeObject : public AActor
{
public:
    DECLARE_CLASS(ADecoVolumeObject,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoVolumeObject)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API ADecorationList : public AKeypoint
{
public:
    TArrayNoInit<FDecorationType> Decorations GCC_PACK(4);
    DECLARE_CLASS(ADecorationList,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecorationList)
};


class ENGINE_API ALookTarget : public AKeypoint
{
public:
    DECLARE_CLASS(ALookTarget,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALookTarget)
};


class ENGINE_API AAIScript : public AKeypoint
{
public:
    class UClass* ControllerClass GCC_PACK(4);
    BITFIELD bNavigate:1 GCC_PACK(4);
    BITFIELD bLoggingEnabled:1;
    class AAIMarker* myMarker GCC_PACK(4);
    DECLARE_CLASS(AAIScript,AKeypoint,0,Engine)
	virtual INT AddMyMarker(AActor *S);
	virtual void ClearMarker();
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    #include "AInterpolationPoint.h"
};

struct ENGINE_API FSoundEmitter
{
    FLOAT EmitInterval GCC_PACK(4);
    FLOAT EmitVariance;
    FLOAT EmitTime;
    class USound* EmitSound;
};


class ENGINE_API AAmbientSound : public AKeypoint
{
public:
    TArrayNoInit<FSoundEmitter> SoundEmitters GCC_PACK(4);
    FLOAT AmbientVolume;
    DECLARE_CLASS(AAmbientSound,AKeypoint,0|CLASS_Config,Engine)
    virtual void PostBeginPlay();
	virtual UBOOL Tick( FLOAT DeltaTime, enum ELevelTick TickType );
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


struct AInfo_eventGetDescriptionText_Parms
{
    FString PropName;
    FString ReturnValue;
};
struct AInfo_eventGetSecurityLevel_Parms
{
    FString PropName;
    BYTE ReturnValue;
};
struct AInfo_eventAllowClassRemoval_Parms
{
    BITFIELD ReturnValue;
};
struct AInfo_eventAcceptPlayInfoProperty_Parms
{
    FString PropertyName;
    BITFIELD ReturnValue;
};
class ENGINE_API AInfo : public AActor
{
public:
    FStringNoInit RulesGroup GCC_PACK(4);
    FStringNoInit GameGroup;
    FStringNoInit ServerGroup;
    FStringNoInit ChatGroup;
    FStringNoInit BotsGroup;
    FStringNoInit MapVoteGroup;
    FStringNoInit KickVoteGroup;
    FString eventGetDescriptionText(const FString& PropName)
    {
        AInfo_eventGetDescriptionText_Parms Parms;
        Parms.PropName=PropName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetDescriptionText),&Parms);
        return Parms.ReturnValue;
    }
    BYTE eventGetSecurityLevel(const FString& PropName)
    {
        AInfo_eventGetSecurityLevel_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PropName=PropName;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSecurityLevel),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAllowClassRemoval()
    {
        AInfo_eventAllowClassRemoval_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_AllowClassRemoval),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAcceptPlayInfoProperty(const FString& PropertyName)
    {
        AInfo_eventAcceptPlayInfoProperty_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PropertyName=PropertyName;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptPlayInfoProperty),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


struct APlayerChatManager_eventAcceptVoice_Parms
{
    class APlayerReplicationInfo* Sender;
    BITFIELD ReturnValue;
};
class ENGINE_API APlayerChatManager : public AInfo
{
public:
    class APlayerController* PlayerOwner GCC_PACK(4);
    BITFIELD eventAcceptVoice(class APlayerReplicationInfo* Sender)
    {
        APlayerChatManager_eventAcceptVoice_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptVoice),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(APlayerChatManager,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerChatManager)
};

enum EJoinChatResult
{
    JCR_Invalid             =0,
    JCR_Member              =1,
    JCR_NeedPassword        =2,
    JCR_WrongPassword       =3,
    JCR_Banned              =4,
    JCR_Full                =5,
    JCR_NotAllowed          =6,
    JCR_Success             =7,
    JCR_MAX                 =8,
};

struct AVoiceChatRoom_eventIsMember_Parms
{
    class APlayerReplicationInfo* PRI;
    BITFIELD bNoCascade;
    BITFIELD ReturnValue;
};
class ENGINE_API AVoiceChatRoom : public AInfo
{
public:
    class AGameReplicationInfo* GRI GCC_PACK(4);
    class AVoiceChatReplicationInfo* VoiceChatManager;
    class AVoiceChatRoom* Parent;
    TArrayNoInit<class AVoiceChatRoom*> Children;
    FStringNoInit Password;
    INT ChannelIndex;
    BITFIELD bLocal:1 GCC_PACK(4);
    INT TeamIndex GCC_PACK(4);
    BITFIELD eventIsMember(class APlayerReplicationInfo* PRI, BITFIELD bNoCascade)
    {
        AVoiceChatRoom_eventIsMember_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PRI=PRI;
        Parms.bNoCascade=((bNoCascade) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_IsMember),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AVoiceChatRoom,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVoiceChatRoom)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

struct ENGINE_API FVoiceChatCodec
{
    FStringNoInit Codec GCC_PACK(4);
    FStringNoInit CodecName;
    FStringNoInit CodecDescription;
};

#define UCONST_NUMPROPS 6

struct AVoiceChatReplicationInfo_eventGetChannelIndex_Parms
{
    FString ChannelTitle;
    INT TeamIndex;
    INT ReturnValue;
};
struct AVoiceChatReplicationInfo_eventGetChannelCount_Parms
{
    INT ReturnValue;
};
class ENGINE_API AVoiceChatReplicationInfo : public AReplicationInfo
{
public:
    INT PublicMask GCC_PACK(4);
    INT LocalMask;
    TArrayNoInit<class AVoiceChatRoom*> Channels;
    TArrayNoInit<FString> PublicChannelNames;
    FStringNoInit VCDisplayText[6];
    FStringNoInit VCDescText[6];
    class AGameReplicationInfo* GRI;
    class UClass* ChatRoomClass;
    TArrayNoInit<FVoiceChatCodec> InstalledCodec;
    TArrayNoInit<FString> VoIPInternetCodecs;
    TArrayNoInit<FString> VoIPLANCodecs;
    BITFIELD bEnableVoiceChat:1 GCC_PACK(4);
    BITFIELD bAllowLocalBroadcast:1;
    INT MaxChatters GCC_PACK(4);
    INT DefaultChannel;
    FLOAT LocalBroadcastRange;
    FLOAT DefaultBroadcastRadius;
    FLOAT BroadcastRadius;
    BITFIELD bPrivateChat:1 GCC_PACK(4);
    BITFIELD bRefresh:1;
    INT eventGetChannelIndex(const FString& ChannelTitle, INT TeamIndex)
    {
        AVoiceChatReplicationInfo_eventGetChannelIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ChannelTitle=ChannelTitle;
        Parms.TeamIndex=TeamIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_GetChannelIndex),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetChannelCount()
    {
        AVoiceChatReplicationInfo_eventGetChannelCount_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetChannelCount),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AVoiceChatReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)

	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};


class ENGINE_API ATeamInfo : public AReplicationInfo
{
public:
    FStringNoInit TeamName GCC_PACK(4);
    INT Size;
    FLOAT Score;
    INT TeamIndex;
    FColor TeamColor;
    FColor AltTeamColor;
    class AActor* HomeBase;
    class UClass* DefaultPlayerClass;
    FStringNoInit ColorNames[4];
    DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    #include "ATeamInfo.h"
};

#define UCONST_PROPNUM 4

class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName GCC_PACK(4);
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bStopCountDown:1;
    BITFIELD bMatchHasBegun:1;
    BITFIELD bTeamSymbolsUpdated:1;
    BITFIELD bNoTeamSkins:1;
    BITFIELD bForceTeamSkins:1;
    BITFIELD bForceNoPlayerLights:1;
    BITFIELD bAllowPlayerLights:1;
    BITFIELD bFastWeaponSwitching:1;
    BITFIELD bNoTeamChanges:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT GoalScore;
    INT TimeLimit;
    INT MaxLives;
    INT MinNetPlayers;
    FLOAT WeaponBerserk;
    class ATeamInfo* Teams[2];
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT ServerRegion;
    FStringNoInit MessageOfTheDay;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    class AActor* Winner;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    class UTexture* TeamSymbols[2];
    TArrayNoInit<class APlayerReplicationInfo*> PRIArray;
    FStringNoInit GRIPropsDisplayText[4];
    FStringNoInit GRIPropDescText[4];
    FVector FlagPos;
    BYTE FlagState[2];
    class APlayerReplicationInfo* FlagHolder[2] GCC_PACK(4);
    class APlayerReplicationInfo* FlagTarget;
    INT MatchID;
    INT BotDifficulty;
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AGameReplicationInfo.h"
};


class ENGINE_API ALinkedReplicationInfo : public AReplicationInfo
{
public:
    class ALinkedReplicationInfo* NextReplicationInfo GCC_PACK(4);
    DECLARE_CLASS(ALinkedReplicationInfo,AReplicationInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALinkedReplicationInfo)
};


struct APlayerReplicationInfo_eventGetNameCallSign_Parms
{
    FString ReturnValue;
};
struct APlayerReplicationInfo_eventClientNameChange_Parms
{
};
struct APlayerReplicationInfo_eventUpdateCharacter_Parms
{
};
class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FLOAT Score GCC_PACK(4);
    FLOAT Deaths;
    class ADecoration* HasFlag;
    BYTE Ping;
    class AVolume* PlayerVolume GCC_PACK(4);
    class AZoneInfo* PlayerZone;
    INT NumLives;
    FStringNoInit PlayerName;
    FStringNoInit CharacterName;
    FStringNoInit OldCharacterName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    INT PlayerID;
    class ATeamInfo* Team;
    INT TeamID;
    class UClass* VoiceType;
    FStringNoInit VoiceTypeName;
    BITFIELD bAdmin:1 GCC_PACK(4);
    BITFIELD bIsFemale:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    BITFIELD bWelcomed:1;
    BITFIELD bReceivedPing:1;
    BITFIELD bNoTeam:1;
    BITFIELD bTeamNotified:1;
    BYTE PacketLoss GCC_PACK(4);
    INT StartTime GCC_PACK(4);
    FStringNoInit StringDead;
    FStringNoInit StringSpectating;
    FStringNoInit StringUnknown;
    INT GoalsScored;
    INT Kills;
    class AVehicle* CurrentVehicle;
    class ALinkedReplicationInfo* CustomReplicationInfo;
    class AVoiceChatReplicationInfo* VoiceInfo;
    BITFIELD bRegisteredChatRoom:1 GCC_PACK(4);
    class AVoiceChatRoom* PrivateChatRoom GCC_PACK(4);
    INT ActiveChannel;
    INT VoiceMemberMask;
    BYTE VoiceID;
    FString eventGetNameCallSign()
    {
        APlayerReplicationInfo_eventGetNameCallSign_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNameCallSign),&Parms);
        return Parms.ReturnValue;
    }
    void eventClientNameChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientNameChange),NULL);
    }
    void eventUpdateCharacter()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateCharacter),NULL);
    }
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    #include "APlayerReplicationInfo.h"
};


struct ASecurity_eventServerCallback_Parms
{
    INT SecType;
    FString Data;
};
class ENGINE_API ASecurity : public AInfo
{
public:
    INT LastType GCC_PACK(4);
    FStringNoInit LastParams[2];
    DECLARE_FUNCTION(execLocalPerform);
    DECLARE_FUNCTION(execNativePerform);
    void eventServerCallback(INT SecType, const FString& Data)
    {
        ASecurity_eventServerCallback_Parms Parms;
        Parms.SecType=SecType;
        Parms.Data=Data;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerCallback),&Parms);
    }
    DECLARE_CLASS(ASecurity,AInfo,0,Engine)
    #include "ASecurity.h"
};

enum EAffect
{
    AFFECT_ViewportCamera   =0,
    AFFECT_Actor            =1,
    AFFECT_MAX              =2,
};

struct ASceneManager_eventSceneEnded_Parms
{
};
struct ASceneManager_eventSceneStarted_Parms
{
};
class ENGINE_API ASceneManager : public AInfo
{
public:
    TArrayNoInit<class UMatAction*> Actions GCC_PACK(4);
    BYTE Affect;
    class AActor* AffectedActor GCC_PACK(4);
    BITFIELD bLooping:1 GCC_PACK(4);
    BITFIELD bCinematicView:1;
    FName PlayerScriptTag GCC_PACK(4);
    FName NextSceneTag;
    FName EventStart;
    FName EventEnd;
    BITFIELD bHideHUD:1 GCC_PACK(4);
    FLOAT PctSceneComplete GCC_PACK(4);
    class UMatAction* CurrentAction;
    FLOAT SceneSpeed;
    FLOAT TotalSceneTime;
    class AActor* Viewer;
    class APawn* OldPawn;
    BITFIELD bIsRunning:1 GCC_PACK(4);
    BITFIELD bIsSceneStarted:1;
    FLOAT CurrentTime GCC_PACK(4);
    TArrayNoInit<FVector> SampleLocations;
    TArrayNoInit<class UMatSubAction*> SubActions;
    FOrientation CamOrientation;
    FOrientation PrevOrientation;
    FInterpolator RotInterpolator;
    FVector CameraShake;
    FVector DollyOffset;
    BITFIELD bAbortCinematic:1 GCC_PACK(4);
    DECLARE_FUNCTION(execAbortScene);
    DECLARE_FUNCTION(execGetTotalSceneTime);
    void eventSceneEnded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneEnded),NULL);
    }
    void eventSceneStarted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneStarted),NULL);
    }
    DECLARE_CLASS(ASceneManager,AInfo,0|CLASS_Config,Engine)
    #include "ASceneManager.h"
};


class ENGINE_API AMaplistManagerBase : public AInfo
{
public:
    DECLARE_CLASS(AMaplistManagerBase,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMaplistManagerBase)
};


class ENGINE_API AAnnouncerVoice : public AInfo
{
public:
    FStringNoInit SoundPackage GCC_PACK(4);
    FStringNoInit FallbackSoundPackage;
    FStringNoInit AlternateFallbackSoundPackage;
    FStringNoInit AnnouncerName;
    TArrayNoInit<FCachedSound> CachedSounds;
    BITFIELD bPrecachedBaseSounds:1 GCC_PACK(4);
    BITFIELD bPrecachedGameSounds:1;
    BITFIELD bEnglishOnly:1;
    DECLARE_CLASS(AAnnouncerVoice,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAnnouncerVoice)
};


struct AMutator_eventOverrideDownload_Parms
{
    FString PlayerIP;
    FString PlayerID;
    FString PlayerURL;
    FString RedirectURL;
    BITFIELD ReturnValue;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator GCC_PACK(4);
    class UClass* DefaultWeapon;
    FStringNoInit DefaultWeaponName;
    BITFIELD bUserAdded:1 GCC_PACK(4);
    BITFIELD bAddToServerPackages:1;
    FStringNoInit IconMaterialName GCC_PACK(4);
    FStringNoInit ConfigMenuClassName;
    FStringNoInit GroupName;
    FStringNoInit FriendlyName;
    FStringNoInit Description;
    BITFIELD eventOverrideDownload(const FString& PlayerIP, const FString& PlayerID, const FString& PlayerURL, FString& RedirectURL)
    {
        AMutator_eventOverrideDownload_Parms Parms;
        Parms.ReturnValue=0;
        Parms.PlayerIP=PlayerIP;
        Parms.PlayerID=PlayerID;
        Parms.PlayerURL=PlayerURL;
        Parms.RedirectURL=RedirectURL;
        ProcessEvent(FindFunctionChecked(ENGINE_OverrideDownload),&Parms);
        RedirectURL=Parms.RedirectURL;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API APotentialClimbWatcher : public AInfo
{
public:
    DECLARE_CLASS(APotentialClimbWatcher,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APotentialClimbWatcher)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove GCC_PACK(4);
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BYTE DoubleClickMove GCC_PACK(4);
    BYTE SavedPhysics;
    FVector StartLocation GCC_PACK(4);
    FVector StartRelativeLocation;
    FVector StartVelocity;
    FVector StartFloor;
    FVector SavedLocation;
    FVector SavedVelocity;
    FVector SavedRelativeLocation;
    class AActor* StartBase;
    class AActor* EndBase;
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    class ASkyZoneInfo* SkyZone GCC_PACK(4);
    FName ZoneTag;
    FStringNoInit LocationName;
    FLOAT KillZ;
    BYTE KillZType;
    BITFIELD bSoftKillZ:1 GCC_PACK(4);
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bClearToFogColor:1;
    TArrayNoInit<class ATerrainInfo*> Terrains GCC_PACK(4);
    FVector AmbientVector;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor DistanceFogColor GCC_PACK(4);
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT RealDistanceFogEnd;
    FLOAT DistanceFogEndMin;
    FLOAT DistanceFogBlendTime;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FLOAT DramaticLightingScale;
    class UI3DL2Listener* ZoneEffect;
    BITFIELD bLonelyZone:1 GCC_PACK(4);
    TArrayNoInit<class AZoneInfo*> ManualExcludes GCC_PACK(4);
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL GCC_PACK(4);
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    #include "AWarpZoneInfo.h"
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};
enum EMeshLODDetailLevel
{
    MDL_Low                 =0,
    MDL_Medium              =1,
    MDL_High                =2,
    MDL_Ultra               =3,
    MDL_MAX                 =4,
};
enum EPhysicsDetailLevel
{
    PDL_Low                 =0,
    PDL_Medium              =1,
    PDL_High                =2,
    PDL_MAX                 =3,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
struct ALevelInfo_eventFillPrecacheStaticMeshesArray_Parms
{
    BITFIELD FullPrecache;
};
struct ALevelInfo_eventFillPrecacheMaterialsArray_Parms
{
    BITFIELD FullPrecache;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation GCC_PACK(4);
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FLOAT PauseDelay;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit Description;
    class UMaterial* Screenshot;
    FStringNoInit DecoTextName;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
    FStringNoInit ExtraInfo;
    INT SinglePlayerTeamSize;
    BITFIELD bShowRadarMap:1 GCC_PACK(4);
    BITFIELD bUseTerrainForRadarRange:1;
    class UMaterial* RadarMapImage GCC_PACK(4);
    FLOAT CustomRadarRange;
    BYTE PhysicsDetailLevel;
    BYTE MeshLODDetailLevel;
    FLOAT KarmaTimeScale GCC_PACK(4);
    FLOAT RagdollTimeScale;
    INT MaxRagdolls;
    FLOAT KarmaGravScale;
    BITFIELD bKStaticFriction:1 GCC_PACK(4);
    BITFIELD bKNoInit:1;
    INT LastTaunt[2] GCC_PACK(4);
    FLOAT DecalStayScale;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerReplicationInfo* Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD HideFromMenus:1 GCC_PACK(4);
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bFreezeKarma:1;
    BYTE DetailMode GCC_PACK(4);
    BITFIELD bDropDetail:1 GCC_PACK(4);
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bLowSoundDetail:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD bHasPathNodes:1;
    BITFIELD bLevelChange:1;
    BITFIELD bShouldPreload:1;
    BITFIELD bDesireSkinPreload:1;
    BITFIELD bSkinsPreloaded:1;
    BITFIELD bClassicView:1;
    FLOAT AnimMeshGlobalLOD GCC_PACK(4);
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    INT LevelTextureLODBias GCC_PACK(4);
    FVector CameraLocationDynamic;
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FStringNoInit Song;
    FLOAT PlayerDoppler;
    FLOAT MusicVolumeOverride;
    FLOAT Brightness;
    class UTexture* DefaultTexture;
    class UTexture* WireframeTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    INT HubStackLevel;
    BYTE LevelAction;
    class AGameReplicationInfo* GRI GCC_PACK(4);
    BYTE NetMode;
    FStringNoInit ComputerName GCC_PACK(4);
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit DefaultGameType;
    FStringNoInit PreCacheGame;
    class AGameInfo* Game;
    FLOAT DefaultGravity;
    FLOAT LastVehicleCheck;
    FLOAT StallZ;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APlayerController* LocalPlayerController;
    BITFIELD bUseHeadlights:1 GCC_PACK(4);
    FLOAT HeadlightScaling GCC_PACK(4);
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    class UObjectPool* ObjectPool;
    TArrayNoInit<class UMaterial*> PrecacheMaterials;
    TArrayNoInit<class UStaticMesh*> PrecacheStaticMeshes;
    class UStaticMesh* IndoorCamouflageMesh;
    FLOAT IndoorMeshDrawscale;
    class UStaticMesh* OutdoorCamouflageMesh;
    FLOAT OutdoorMeshDrawscale;
    FColor DustColor;
    FLOAT MoveRepSize;
    class APlayerController* ReplicationViewer;
    class AActor* ReplicationViewTarget;
    DECLARE_FUNCTION(execIsPendingConnection);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execIsSoftwareRendering);
    DECLARE_FUNCTION(execIsDemoBuild);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execForceLoadTexture);
    DECLARE_FUNCTION(execUpdateDistanceFogLOD);
    DECLARE_FUNCTION(execIsEntry);
    DECLARE_FUNCTION(execDetailChange);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=((bItems) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    void eventFillPrecacheStaticMeshesArray(BITFIELD FullPrecache)
    {
        ALevelInfo_eventFillPrecacheStaticMeshesArray_Parms Parms;
        Parms.FullPrecache=((FullPrecache) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_FillPrecacheStaticMeshesArray),&Parms);
    }
    void eventFillPrecacheMaterialsArray(BITFIELD FullPrecache)
    {
        ALevelInfo_eventFillPrecacheMaterialsArray_Parms Parms;
        Parms.FullPrecache=((FullPrecache) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_FillPrecacheMaterialsArray),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "ALevelInfo.h"
};

struct ENGINE_API FKeyValuePair
{
    FString Key GCC_PACK(4);
    FString Value;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FKeyValuePair& MyKeyValuePair)
    {
        return Ar << MyKeyValuePair.Key << MyKeyValuePair.Value;
    }
};

struct ENGINE_API FPlayerResponseLine
{
    INT PlayerNum GCC_PACK(4);
    FString PlayerName;
    INT Ping;
    INT Score;
    INT StatsID;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FPlayerResponseLine& MyPlayerResponseLine)
    {
        return Ar << MyPlayerResponseLine.PlayerNum << MyPlayerResponseLine.PlayerName << MyPlayerResponseLine.Ping << MyPlayerResponseLine.Score << MyPlayerResponseLine.StatsID;
    }
};

struct ENGINE_API FServerResponseLine
{
    INT ServerID GCC_PACK(4);
    FString IP;
    INT Port;
    INT QueryPort;
    FString ServerName;
    FString MapName;
    FString GameType;
    INT CurrentPlayers;
    INT MaxPlayers;
    INT Ping;
    INT Flags;
    FString SkillLevel;
    TArray<FKeyValuePair> ServerInfo;
    TArray<FPlayerResponseLine> PlayerInfo;
    friend ENGINE_API FArchive& operator<<(FArchive& Ar,FServerResponseLine& MyServerResponseLine)
    {
        return Ar << MyServerResponseLine.ServerID << MyServerResponseLine.IP << MyServerResponseLine.Port << MyServerResponseLine.QueryPort << MyServerResponseLine.ServerName << MyServerResponseLine.MapName << MyServerResponseLine.GameType << MyServerResponseLine.CurrentPlayers << MyServerResponseLine.MaxPlayers << MyServerResponseLine.Ping << MyServerResponseLine.Flags << MyServerResponseLine.SkillLevel << MyServerResponseLine.ServerInfo << MyServerResponseLine.PlayerInfo;
    }
};

#define UCONST_GIPROPNUM 15

struct AGameInfo_eventNoTranslocatorKeyPressed_Parms
{
    class APlayerController* PC;
};
struct AGameInfo_eventSceneAbort_Parms
{
};
struct AGameInfo_eventSceneEnded_Parms
{
    class ASceneManager* SM;
    class AActor* Other;
};
struct AGameInfo_eventSceneStarted_Parms
{
    class ASceneManager* SM;
    class AActor* Other;
};
struct AGameInfo_eventSetGrammar_Parms
{
};
struct AGameInfo_eventBroadcastLocalized_Parms
{
    class AActor* Sender;
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AGameInfo_eventBroadcast_Parms
{
    class AActor* Sender;
    FString Msg;
    FName Type;
};
struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerController* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString PlayerID;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventKickIdler_Parms
{
    class APlayerController* PC;
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    BITFIELD bRestartLevel:1 GCC_PACK(4);
    BITFIELD bPauseable:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD bAlreadyChanged:1;
    BITFIELD bLoggingGame:1;
    BITFIELD bEnableStatLogging:1;
    BITFIELD bAllowWeaponThrowing:1;
    BITFIELD bAllowBehindView:1;
    BITFIELD bAdminCanPause:1;
    BITFIELD bGameRestarted:1;
    BITFIELD bWeaponShouldViewShake:1;
    BITFIELD bModViewShake:1;
    BITFIELD bForceClassicView:1;
    BITFIELD bLowGore:1;
    BITFIELD bWelcomePending:1;
    BITFIELD bAttractCam:1;
    BITFIELD bMustJoinBeforeStart:1;
    BITFIELD bTestMode:1;
    BITFIELD bAllowVehicles:1;
    BITFIELD bAllowMPGameSpeed:1;
    INT GoreLevel GCC_PACK(4);
    FLOAT GameDifficulty;
    FLOAT AutoAim;
    FLOAT GameSpeed;
    FLOAT StartTime;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit ScoreBoardType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit HUDSettingsMenu;
    FStringNoInit HUDType;
    FStringNoInit MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit GoreLevelText[3];
    INT ResetCountDown;
    INT ResetTimeDelay;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    FStringNoInit DefaultPlayerName;
    FLOAT FearCostFallOff;
    INT GoalScore;
    INT MaxLives;
    INT TimeLimit;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    FName OtherMesgGroup;
    FStringNoInit MutatorClass;
    class AMutator* BaseMutator;
    FStringNoInit AccessControlClass;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    FStringNoInit BroadcastHandlerClass;
    class UClass* BroadcastClass;
    class ABroadcastHandler* BroadcastHandler;
    class UClass* PlayerControllerClass;
    FStringNoInit PlayerControllerClassName;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    class UClass* VoiceReplicationInfoClass;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    FStringNoInit MaplistHandlerType;
    class UClass* MaplistHandlerClass;
    class AMaplistManagerBase* MaplistHandler;
    class AGameStats* GameStats;
    FStringNoInit GameStatsClass;
    FStringNoInit DemoCommand;
    FStringNoInit SecurityClass;
    FStringNoInit GameName;
    FStringNoInit Description;
    FStringNoInit ScreenShotName;
    FStringNoInit DecoTextName;
    FStringNoInit Acronym;
    FStringNoInit VotingHandlerType;
    class UClass* VotingHandlerClass;
    class AVotingHandler* VotingHandler;
    class UGameProfile* CurrentGameProfile;
    class UManifest* SaveGameManifest;
    FStringNoInit GIPropsDisplayText[15];
    FStringNoInit GIPropDescText[15];
    FStringNoInit GIPropsExtras[2];
    class AVehicle* VehicleList;
    FStringNoInit CallSigns[15];
    FStringNoInit ServerSkillLevel;
    FLOAT MaxIdleTime;
    FStringNoInit NoBindString;
    FColor BindColor;
    DECLARE_FUNCTION(execLoadSRGrammar);
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    DECLARE_FUNCTION(execLoadMapList);
    DECLARE_FUNCTION(execDeletePackage);
    DECLARE_FUNCTION(execSavePackage);
    DECLARE_FUNCTION(execAllDataObjects);
    DECLARE_FUNCTION(execLoadDataObject);
    DECLARE_FUNCTION(execDeleteDataObject);
    DECLARE_FUNCTION(execCreateDataObject);
    DECLARE_FUNCTION(execGetSavedGames);
    void eventNoTranslocatorKeyPressed(class APlayerController* PC)
    {
        AGameInfo_eventNoTranslocatorKeyPressed_Parms Parms;
        Parms.PC=PC;
        ProcessEvent(FindFunctionChecked(ENGINE_NoTranslocatorKeyPressed),&Parms);
    }
    void eventSceneAbort()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneAbort),NULL);
    }
    void eventSceneEnded(class ASceneManager* SM, class AActor* Other)
    {
        AGameInfo_eventSceneEnded_Parms Parms;
        Parms.SM=SM;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SceneEnded),&Parms);
    }
    void eventSceneStarted(class ASceneManager* SM, class AActor* Other)
    {
        AGameInfo_eventSceneStarted_Parms Parms;
        Parms.SM=SM;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SceneStarted),&Parms);
    }
    void eventSetGrammar()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetGrammar),NULL);
    }
    void eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
        Parms.Sender=Sender;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
    }
    void eventBroadcast(class AActor* Sender, const FString& Msg, FName Type)
    {
        AGameInfo_eventBroadcast_Parms Parms;
        Parms.Sender=Sender;
        Parms.Msg=Msg;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
    }
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerController* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerController* eventLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, const FString& PlayerID, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.PlayerID=PlayerID;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventKickIdler(class APlayerController* PC)
    {
        AGameInfo_eventKickIdler_Parms Parms;
        Parms.PC=PC;
        ProcessEvent(FindFunctionChecked(ENGINE_KickIdler),&Parms);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};

enum ESST_Mode
{
    ESST_SkipToNextLine     =0,
    ESST_MAX                =1,
};

class ENGINE_API ASceneSubtitles : public AInfo
{
public:
    TArrayNoInit<FString> SubTitles GCC_PACK(4);
    INT CurrentIndex;
    DECLARE_FUNCTION(execProcessEvent);
    DECLARE_CLASS(ASceneSubtitles,AInfo,0,Engine)
	void ProcessEvent( ESST_Mode Mode );
};


class ENGINE_API AGameStats : public AInfo
{
public:
    class AFileLog* TempLog GCC_PACK(4);
    class AGameReplicationInfo* GRI;
    BITFIELD bShowBots:1 GCC_PACK(4);
    FStringNoInit Tab GCC_PACK(4);
    BITFIELD bLocalLog:1 GCC_PACK(4);
    FStringNoInit LogFileName GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetStatsIdentifier);
    DECLARE_CLASS(AGameStats,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameStats)
};


class ENGINE_API AFileLog : public AInfo
{
public:
    PTRINT LogAr GCC_PACK(4);
    FStringNoInit LogFileName;
    FStringNoInit TempFileName;
    DECLARE_FUNCTION(execLogf);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AFileLog,AInfo,0,Engine)
	void FinishLog();
	void AFileLog::Destroy();
};

struct ENGINE_API FHitFXData
{
    FName Bone GCC_PACK(4);
    class UClass* damtype;
    BITFIELD bSever:1 GCC_PACK(4);
    FRotator rotDir GCC_PACK(4);
};


struct APawn_eventPlayLandingAnimation_Parms
{
    FLOAT impactVel;
};
struct APawn_eventPlayFalling_Parms
{
};
struct APawn_eventPlayJump_Parms
{
};
struct APawn_eventChangeAnimation_Parms
{
};
struct APawn_eventStopPlayFiring_Parms
{
};
struct APawn_eventPlayDying_Parms
{
    class UClass* DamageType;
    FVector HitLoc;
};
struct APawn_eventSetAnimAction_Parms
{
    FName NewAction;
};
struct APawn_eventBreathTimer_Parms
{
};
struct APawn_eventHeadVolumeChange_Parms
{
    class APhysicsVolume* newHeadVolume;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventStartCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventEndCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventModifyVelocity_Parms
{
    FLOAT DeltaTime;
    FVector OldVelocity;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APawn_eventStopDriving_Parms
{
    class AVehicle* V;
};
struct APawn_eventStartDriving_Parms
{
    class AVehicle* V;
};
struct APawn_eventSetWalking_Parms
{
    BITFIELD bNewIsWalking;
};
struct APawn_eventPostRender2D_Parms
{
    class UCanvas* C;
    FLOAT ScreenLocX;
    FLOAT ScreenLocY;
};
struct APawn_eventSetHeadScale_Parms
{
    FLOAT NewScale;
};
class ENGINE_API APawn : public AActor
{
public:
    class AController* Controller GCC_PACK(4);
    FLOAT NetRelevancyTime;
    class APlayerController* LastRealViewer;
    class AActor* LastViewer;
    FLOAT LastLocTime;
    BITFIELD bJustLanded:1 GCC_PACK(4);
    BITFIELD bLandRecovery:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bJumpCapable:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bCanWallDodge:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bCountJumps:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bIgnoreForces:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bSteadyFiring:1;
    BITFIELD bCanBeBaseForPawns:1;
    BITFIELD bClientCollision:1;
    BITFIELD bSimGravityDisabled:1;
    BITFIELD bDirectHitWall:1;
    BITFIELD bServerMoveSetPawnRot:1;
    BITFIELD bDrawCorona:1;
    BITFIELD bNoCoronas:1;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bIsFemale:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bCanPickupInventory:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bAutoFire:1;
    BITFIELD bRollToDesired:1;
    BITFIELD bIgnorePlayFiring:1;
    BITFIELD bStationary:1;
    BITFIELD bCachedRelevant:1;
    BITFIELD bUseCompressedPosition:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bHideRegularHUD:1;
    BITFIELD bSpecialHUD:1;
    BITFIELD bSpecialCrosshair:1;
    BITFIELD bSpecialCalcView:1;
    BITFIELD bNoTeamBeacon:1;
    BITFIELD bNoWeaponFiring:1;
    BITFIELD bIsTyping:1;
    BITFIELD bScriptPostRender:1;
    BITFIELD bCanUse:1;
    BYTE FlashCount GCC_PACK(4);
    BYTE Visibility;
    FLOAT DesiredSpeed GCC_PACK(4);
    FLOAT MaxDesiredSpeed;
    FName AIScriptTag;
    FLOAT HearingThreshold;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT SkillModifier;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    class ANavigationPoint* Anchor;
    class ANavigationPoint* LastAnchor;
    FLOAT FindAnchorFailedTime;
    FLOAT LastValidAnchorTime;
    FLOAT DestinationOffset;
    FLOAT NextPathRadius;
    FVector SerpentineDir;
    FLOAT SerpentineDist;
    FLOAT SerpentineTime;
    FLOAT UncrouchTime;
    FLOAT SpawnTime;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT CrouchedPct;
    FLOAT MaxFallSpeed;
    FVector ConstantAcceleration;
    class AVehicle* DrivenVehicle;
    FVector ImpactVelocity;
    INT PitchUpLimit;
    INT PitchDownLimit;
    FStringNoInit OwnerName;
    class AWeapon* Weapon;
    class AWeapon* PendingWeapon;
    class APowerups* SelectedItem;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT DrivingHeight;
    FLOAT DrivingRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    FLOAT HealthMax;
    FLOAT SuperHealthMax;
    INT Health;
    FLOAT BreathTime;
    FLOAT UnderWaterTime;
    FLOAT LastPainTime;
    class UClass* ReducedDamageType;
    FLOAT HeadRadius;
    FLOAT HeadHeight;
    FLOAT HeadScale;
    BITFIELD bSetPCRotOnPossess:1 GCC_PACK(4);
    FVector noise1spot GCC_PACK(4);
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FLOAT AmbientSoundScaling;
    FStringNoInit MenuName;
    class AProjector* Shadow;
    class UClass* BloodEffect;
    class UClass* LowGoreBlood;
    class UClass* ControllerClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ALadderVolume* OnLadder;
    FName LandMovementState;
    FName WaterMovementState;
    class APlayerStart* LastStartSpot;
    FLOAT LastStartTime;
    FName AnimAction;
    FVector TakeHitLocation;
    class UClass* HitDamageType;
    FVector TearOffMomentum;
    BYTE OldPhysics;
    BITFIELD bPhysicsAnimUpdate:1 GCC_PACK(4);
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BITFIELD bIsIdle:1;
    BITFIELD bWaitForAnim:1;
    BITFIELD bReverseRun:1;
    BITFIELD bDoTorsoTwist:1;
    BITFIELD FootTurning:1;
    BITFIELD FootStill:1;
    BYTE ViewPitch GCC_PACK(4);
    INT SmoothViewPitch GCC_PACK(4);
    INT SmoothViewYaw;
    FLOAT OldRotYaw;
    FVector OldAcceleration;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    FLOAT ForwardStrafeBias;
    FLOAT BackwardStrafeBias;
    FLOAT DodgeSpeedFactor;
    FLOAT DodgeSpeedZ;
    INT OldAnimDir;
    FVector OldVelocity;
    FLOAT IdleTime;
    FName SwimAnims[4];
    FName CrouchAnims[4];
    FName WalkAnims[4];
    FName AirAnims[4];
    FName TakeoffAnims[4];
    FName LandAnims[4];
    FName DoubleJumpAnims[4];
    FName DodgeAnims[4];
    FName AirStillAnim;
    FName TakeoffStillAnim;
    FName CrouchTurnRightAnim;
    FName CrouchTurnLeftAnim;
    FName IdleCrouchAnim;
    FName IdleSwimAnim;
    FName IdleWeaponAnim;
    FName IdleRestAnim;
    FName IdleChatAnim;
    TArrayNoInit<FName> TauntAnims;
    FStringNoInit TauntAnimNames[16];
    INT FootRot;
    INT TurnDir;
    FName RootBone;
    FName HeadBone;
    FName SpineBone1;
    FName SpineBone2;
    FLOAT ShieldStrength;
    FHitFXData HitFx[8];
    INT HitFxTicker;
    FCompressedPosition PawnPosition;
    class AController* DelayedDamageInstigatorController;
    class AController* LastHitBy;
    FLOAT MinFlySpeed;
    FLOAT MaxRotation;
    DECLARE_FUNCTION(execForceCrouch);
    DECLARE_FUNCTION(execReachedDestination);
    DECLARE_FUNCTION(execGet4WayDirection);
    DECLARE_FUNCTION(execSetTwistLook);
    DECLARE_FUNCTION(execSetViewPitch);
    void eventPlayLandingAnimation(FLOAT impactVel)
    {
        APawn_eventPlayLandingAnimation_Parms Parms;
        Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
    }
    void eventPlayFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
    }
    void eventPlayJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
    }
    void eventChangeAnimation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
    }
    void eventStopPlayFiring()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StopPlayFiring),NULL);
    }
    void eventPlayDying(class UClass* DamageType, FVector HitLoc)
    {
        APawn_eventPlayDying_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
    }
    void eventSetAnimAction(FName NewAction)
    {
        APawn_eventSetAnimAction_Parms Parms;
        Parms.NewAction=NewAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
    }
    void eventBreathTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BreathTimer),NULL);
    }
    void eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
    {
        APawn_eventHeadVolumeChange_Parms Parms;
        if(IsProbing(NAME_HeadVolumeChange)) {
        Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
        }
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
        }
    }
    void eventStartCrouch(FLOAT HeightAdjust)
    {
        APawn_eventStartCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
    }
    void eventEndCrouch(FLOAT HeightAdjust)
    {
        APawn_eventEndCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
    }
    void eventModifyVelocity(FLOAT DeltaTime, FVector OldVelocity)
    {
        APawn_eventModifyVelocity_Parms Parms;
        if(IsProbing(NAME_ModifyVelocity)) {
        Parms.DeltaTime=DeltaTime;
        Parms.OldVelocity=OldVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyVelocity),&Parms);
        }
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventStopDriving(class AVehicle* V)
    {
        APawn_eventStopDriving_Parms Parms;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_StopDriving),&Parms);
    }
    void eventStartDriving(class AVehicle* V)
    {
        APawn_eventStartDriving_Parms Parms;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_StartDriving),&Parms);
    }
    void eventSetWalking(BITFIELD bNewIsWalking)
    {
        APawn_eventSetWalking_Parms Parms;
        Parms.bNewIsWalking=((bNewIsWalking) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_SetWalking),&Parms);
    }
    void eventPostRender2D(class UCanvas* C, FLOAT ScreenLocX, FLOAT ScreenLocY)
    {
        APawn_eventPostRender2D_Parms Parms;
        Parms.C=C;
        Parms.ScreenLocX=ScreenLocX;
        Parms.ScreenLocY=ScreenLocY;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender2D),&Parms);
    }
    void eventSetHeadScale(FLOAT NewScale)
    {
        APawn_eventSetHeadScale_Parms Parms;
        Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHeadScale),&Parms);
    }
    DECLARE_CLASS(APawn,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APawn.h"
};

struct ENGINE_API FSVehicleIcon
{
    class UMaterial* Material GCC_PACK(4);
    FLOAT X;
    FLOAT Y;
    FLOAT SizeX;
    FLOAT SizeY;
    BITFIELD bIsGreyScale:1 GCC_PACK(4);
};


struct AVehicle_eventNeedsFlip_Parms
{
    BITFIELD ReturnValue;
};
struct AVehicle_eventUnStalled_Parms
{
};
struct AVehicle_eventStalled_Parms
{
};
struct AVehicle_eventTeamChanged_Parms
{
};
struct AVehicle_eventNotifyEnemyLostLock_Parms
{
};
struct AVehicle_eventNotifyEnemyLockedOn_Parms
{
};
struct AVehicle_eventDrivingStatusChanged_Parms
{
};
struct AVehicle_eventKDriverLeave_Parms
{
    BITFIELD bForceLeave;
    BITFIELD ReturnValue;
};
struct AVehicle_eventSetWheelsScale_Parms
{
    FLOAT NewScale;
};
struct AVehicle_eventVehicleLocked_Parms
{
    class APawn* P;
};
class ENGINE_API AVehicle : public APawn
{
public:
    BITFIELD bVehicleShadows:1 GCC_PACK(4);
    BITFIELD bDriving:1;
    BITFIELD bOldDriving:1;
    BITFIELD bDrawVehicleShadow:1;
    BITFIELD bDrawDriverInTP:1;
    BITFIELD bDriverCollideActors:1;
    BITFIELD bRelativeExitPos:1;
    BITFIELD bDefensive:1;
    BITFIELD bAutoTurret:1;
    BITFIELD bRemoteControlled:1;
    BITFIELD bEjectDriver:1;
    BITFIELD bTurnInPlace:1;
    BITFIELD bFollowLookDir:1;
    BITFIELD bNonHumanControl:1;
    BITFIELD bStalled:1;
    BITFIELD bVehicleDestroyed:1;
    BITFIELD bShowDamageOverlay:1;
    BITFIELD bDropDetail:1;
    BITFIELD bNoFriendlyFire:1;
    BITFIELD bDrawMeshInFP:1;
    BITFIELD bZeroPCRotOnEntry:1;
    BITFIELD bPCRelativeFPRotation:1;
    BITFIELD bWeaponisFiring:1;
    BITFIELD bWeaponisAltFiring:1;
    BITFIELD bTeamLocked:1;
    BITFIELD bEnterringUnlocks:1;
    BITFIELD bCanFlip:1;
    BITFIELD bAllowViewChange:1;
    BITFIELD bAllowWeaponToss:1;
    BITFIELD bHUDTrackVehicle:1;
    BITFIELD bHasRadar:1;
    BITFIELD bHasHandbrake:1;
    BITFIELD bScriptedRise:1;
    BITFIELD bKeyVehicle:1;
    BITFIELD bSeparateTurretFocus:1;
    BITFIELD bHighScoreKill:1;
    BITFIELD bAdjustDriversHead:1;
    BITFIELD bEnemyLockedOn:1;
    BITFIELD bDesiredBehindView:1;
    BITFIELD bHideRemoteDriver:1;
    BITFIELD bShowChargingBar:1;
    BITFIELD bDriverHoldsFlag:1;
    BITFIELD bCanCarryFlag:1;
    BITFIELD bSpawnProtected:1;
    BITFIELD bFPNoZFromCameraPitch:1;
    BYTE StuckCount GCC_PACK(4);
    BYTE Team;
    BYTE OldTeam;
    BYTE PrevTeam;
    FRotator PlayerEnterredRotation GCC_PACK(4);
    FLOAT EjectMomentum;
    class UClass* AutoTurretControllerClass;
    FLOAT Steering;
    FLOAT Throttle;
    FLOAT Rise;
    INT DriverViewPitch;
    INT DriverViewYaw;
    FLOAT ThrottleTime;
    FLOAT StuckTime;
    FLOAT VehicleMovingTime;
    FVector DrivePos;
    FRotator DriveRot;
    FName DriveAnim;
    TArrayNoInit<FVector> ExitPositions;
    FVector EntryPosition;
    FLOAT EntryRadius;
    FVector FPCamPos;
    FVector FPCamViewOffset;
    FLOAT TPCamDistance;
    FStringNoInit CenterSpringForce;
    INT CenterSpringRangePitch;
    INT CenterSpringRangeRoll;
    FVector TPCamLookat;
    FVector TPCamWorldOffset;
    FLOAT DesiredTPCamDistance;
    FLOAT LastCameraCalcTime;
    FLOAT CameraSpeed;
    FRange TPCamDistRange;
    INT MaxViewYaw;
    INT MaxViewPitch;
    class APawn* Driver;
    class ASVehicleFactory* ParentFactory;
    FStringNoInit TransEffects[2];
    class AShadowProjector* VehicleShadow;
    FLOAT ShadowMaxTraceDist;
    FLOAT ShadowCullDistance;
    FLOAT MomentumMult;
    FLOAT DriverDamageMult;
    FStringNoInit LockOnClassString;
    FLOAT LastLockWarningTime;
    class AVehicle* NextVehicle;
    FStringNoInit VehiclePositionString;
    FStringNoInit VehicleNameString;
    FStringNoInit VehicleDescription;
    class UTexture* TeamBeaconTexture;
    class UTexture* NoEntryTexture;
    class UMaterial* TeamBeaconBorderMaterial;
    class AAIMarker* myMarker;
    FLOAT MinRunOverSpeed;
    class UClass* RanOverDamageType;
    class UClass* CrushedDamageType;
    class USound* RanOverSound;
    FName StolenAnnouncement;
    class USound* StolenSound;
    FLOAT LinkHealMult;
    FLOAT OldSteering;
    FLOAT VehicleLostTime;
    FLOAT TeamUseTime;
    FLOAT PlayerStartTime;
    FLOAT MaxDesireability;
    FLOAT AIMoveCheckTime;
    FLOAT ObjectiveGetOutDist;
    FName FlagBone;
    FVector FlagOffset;
    FRotator FlagRotation;
    FLOAT WheelsScale;
    TArrayNoInit<class USound*> HornSounds;
    FLOAT LastHornTime;
    TArrayNoInit<class USound*> BulletSounds;
    class UClass* HUDOverlayClass;
    class AActor* HudOverlay;
    FVector HUDOverlayOffset;
    FLOAT HUDOverlayFOV;
    class UMaterial* SpawnOverlay[2];
    FSVehicleIcon VehicleIcon;
    BITFIELD eventNeedsFlip()
    {
        AVehicle_eventNeedsFlip_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_NeedsFlip),&Parms);
        return Parms.ReturnValue;
    }
    void eventUnStalled()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnStalled),NULL);
    }
    void eventStalled()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Stalled),NULL);
    }
    void eventTeamChanged()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TeamChanged),NULL);
    }
    void eventNotifyEnemyLostLock()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyEnemyLostLock),NULL);
    }
    void eventNotifyEnemyLockedOn()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyEnemyLockedOn),NULL);
    }
    void eventDrivingStatusChanged()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DrivingStatusChanged),NULL);
    }
    BITFIELD eventKDriverLeave(BITFIELD bForceLeave)
    {
        AVehicle_eventKDriverLeave_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bForceLeave=((bForceLeave) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_KDriverLeave),&Parms);
        return Parms.ReturnValue;
    }
    void eventSetWheelsScale(FLOAT NewScale)
    {
        AVehicle_eventSetWheelsScale_Parms Parms;
        Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(ENGINE_SetWheelsScale),&Parms);
    }
    void eventVehicleLocked(class APawn* P)
    {
        AVehicle_eventVehicleLocked_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleLocked),&Parms);
    }
    DECLARE_CLASS(AVehicle,APawn,0|CLASS_Config|CLASS_NativeReplication,Engine)
	virtual void PreNetReceive();
	virtual void PostNetReceive();
	void performPhysics(FLOAT DeltaSeconds);
	virtual UBOOL moveToward(const FVector &Dest, AActor *GoalActor);
	virtual void rotateToward(AActor *Focus, FVector FocalPoint);
	virtual void PostRender(FLevelSceneNode* SceneNode, FRenderInterface* RI);
	virtual UBOOL IsStuck();
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
	INT AddMyMarker(AActor *S);
	void SteerVehicle(FVector Direction);
	UBOOL IsNetRelevantFor( APlayerController* RealViewer, AActor* Viewer, FVector SrcLocation );
	virtual FVector GetDestination(AController *C);
	virtual void setMoveTimer(FVector MoveDir);
};


struct ASVehicle_eventSVehicleUpdateParams_Parms
{
};
struct ASVehicle_eventUpdateVehicle_Parms
{
    FLOAT DeltaTime;
};
struct ASVehicle_eventVehicleStateReceived_Parms
{
};
class ENGINE_API ASVehicle : public AVehicle
{
public:
    TArrayNoInit<class USVehicleWheel*> Wheels GCC_PACK(4);
    BITFIELD bVehicleOnGround:1 GCC_PACK(4);
    FLOAT VehicleMass GCC_PACK(4);
    FLOAT FlipTorque;
    FLOAT FlipTime;
    FLOAT FlipScale;
    FLOAT FlipTimeLeft;
    FVector FlipAxis;
    class UClass* DestroyEffectClass;
    DECLARE_FUNCTION(execUpdateVehicle);
    DECLARE_FUNCTION(execGraphData);
    void eventSVehicleUpdateParams()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SVehicleUpdateParams),NULL);
    }
    void eventUpdateVehicle(FLOAT DeltaTime)
    {
        ASVehicle_eventUpdateVehicle_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateVehicle),&Parms);
    }
    void eventVehicleStateReceived()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleStateReceived),NULL);
    }
    DECLARE_CLASS(ASVehicle,AVehicle,0|CLASS_Config,Engine)
#ifdef WITH_KARMA
	// Actor interface.
	virtual void PostBeginPlay();
	virtual void Destroy();
	virtual void PostNetReceive();
	virtual void PostNetReceiveLocation();
    virtual void PostEditChange();
	virtual void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );
	virtual void physKarma(FLOAT DeltaTime);
	virtual void preContactUpdate();
	virtual void preKarmaStep(FLOAT DeltaTime);

	// SVehicle interface.
	virtual void UpdateVehicle(FLOAT DeltaTime);
#endif

};

#define UCONST_FilterFrames 5

struct AKVehicle_eventKVehicleUpdateParams_Parms
{
};
struct AKVehicle_eventVehicleStateReceived_Parms
{
};
class ENGINE_API AKVehicle : public AVehicle
{
public:
    class UClass* DestroyEffectClass GCC_PACK(4);
    BITFIELD bAutoDrive:1 GCC_PACK(4);
    BITFIELD bVehicleIsFiring:1;
    BITFIELD bVehicleIsAltFiring:1;
    FVector CameraHistory[5] GCC_PACK(4);
    INT NextHistorySlot;
    BITFIELD bHistoryWarmup:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGraphData);
    void eventKVehicleUpdateParams()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KVehicleUpdateParams),NULL);
    }
    void eventVehicleStateReceived()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleStateReceived),NULL);
    }
    DECLARE_CLASS(AKVehicle,AVehicle,0|CLASS_Config,Engine)
#ifdef WITH_KARMA
	virtual void PostNetReceive();
    virtual void PostEditChange();
	virtual void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );
#endif

};


class ENGINE_API AScout : public APawn
{
public:
    FLOAT MaxLandingVelocity GCC_PACK(4);
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    #include "AScout.h"
};


class ENGINE_API AStaticMeshActor : public AActor
{
public:
    BITFIELD bExactProjectileCollision:1 GCC_PACK(4);
    DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};


class ENGINE_API AMatDemoActor : public AActor
{
public:
    DECLARE_CLASS(AMatDemoActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMatDemoActor)
};

enum EProjectorBlending
{
    PB_None                 =0,
    PB_Modulate             =1,
    PB_AlphaBlend           =2,
    PB_Add                  =3,
    PB_MAX                  =4,
};

class ENGINE_API AProjector : public AActor
{
public:
    BYTE MaterialBlendingOp GCC_PACK(4);
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture GCC_PACK(4);
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    FName ProjectTag GCC_PACK(4);
    BITFIELD bDynamicAttach:1 GCC_PACK(4);
    BITFIELD bNoProjectOnOwner:1;
    FLOAT FadeInTime GCC_PACK(4);
    FPlane FrustumPlanes[6];
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    class UTexture* GradientTexture;
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
    DECLARE_FUNCTION(execDetachActor);
    DECLARE_FUNCTION(execAttachActor);
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    DECLARE_CLASS(AProjector,AActor,0,Engine)
    #include "AProjector.h"
};


struct AEmitter_eventSpawnParticle_Parms
{
    INT Amount;
};
class ENGINE_API AEmitter : public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters GCC_PACK(4);
    FRangeVector GlobalOffsetRange;
    FRange TimeTillResetRange;
    BITFIELD AutoDestroy:1 GCC_PACK(4);
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    FVector OldLocation GCC_PACK(4);
    FVector GlobalOffset;
    FVector AbsoluteVelocity;
    INT Initialized;
    FBox BoundingBox;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    FLOAT TimeTillReset;
    BITFIELD UseParticleProjectors:1 GCC_PACK(4);
    BITFIELD DeleteParticleEmitters:1;
    BITFIELD ActorForcesEnabled:1;
    class UParticleMaterial* ParticleMaterial GCC_PACK(4);
    DECLARE_FUNCTION(execKill);
    void eventSpawnParticle(INT Amount)
    {
        AEmitter_eventSpawnParticle_Parms Parms;
        Parms.Amount=Amount;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnParticle),&Parms);
    }
    DECLARE_CLASS(AEmitter,AActor,0,Engine)
    #include "AEmitter.h"
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

struct AMover_eventKeyFrameReached_Parms
{
};
class ENGINE_API AMover : public AActor
{
public:
    BYTE MoverEncroachType GCC_PACK(4);
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    BYTE StartKeyNum;
    FLOAT MoveTime GCC_PACK(4);
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bToggleDirection:1 GCC_PACK(4);
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bUseShortestRotation:1;
    BITFIELD bIsLeader:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    class USound* LoopSound;
    FName OpeningEvent;
    FName OpenedEvent;
    FName ClosingEvent;
    FName ClosedEvent;
    FName LoopEvent;
    FVector KeyPos[24];
    FRotator KeyRot[24];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bAutoDoor:1;
    BITFIELD bNoAIRelevance:1;
    BITFIELD bJumpLift:1;
    BITFIELD bOscillatingLoop:1;
    BYTE ClientStop GCC_PACK(4);
    FVector SimOldPos GCC_PACK(4);
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    BYTE StoppedPosition;
    INT StepDirection GCC_PACK(4);
    TArrayNoInit<class AAntiPortalActor*> AntiPortals;
    FName AntiPortalTag;
    BITFIELD bResetting:1 GCC_PACK(4);
    BITFIELD BACKUP_bHidden:1;
    FName Backup_InitialState GCC_PACK(4);
    void eventKeyFrameReached()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
    }
    DECLARE_CLASS(AMover,AActor,0|CLASS_NativeReplication,Engine)
    #include "AMover.h"
};


class ENGINE_API APrecacheHack : public AActor
{
public:
    TArrayNoInit<class UMaterial*> Materials GCC_PACK(4);
    DECLARE_CLASS(APrecacheHack,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APrecacheHack)
};


class ENGINE_API AFluidSurfaceOscillator : public AActor
{
public:
    class AFluidSurfaceInfo* FluidInfo GCC_PACK(4);
    FLOAT Frequency;
    BYTE Phase;
    FLOAT Strength GCC_PACK(4);
    FLOAT Radius;
    FLOAT OscTime;
    DECLARE_CLASS(AFluidSurfaceOscillator,AActor,0,Engine)
	void UpdateOscillation( FLOAT DeltaTime );
	virtual void PostEditChange();
	virtual void Destroy();
};


struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
    class APawn* Other;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventDetourWeight_Parms
{
    class APawn* Other;
    FLOAT PathWeight;
    FLOAT ReturnValue;
};
struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    class UReachSpec* Path;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    BITFIELD bEndPoint:1 GCC_PACK(4);
    BITFIELD bTransientEndPoint:1;
    BITFIELD bHideEditorPaths:1;
    BITFIELD bCanReach:1;
    BITFIELD taken:1;
    BITFIELD bBlocked:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAlwaysUseStrafing:1;
    BITFIELD bForceNoStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bDestinationOnly:1;
    BITFIELD bSourceOnly:1;
    BITFIELD bSpecialForced:1;
    BITFIELD bMustBeReachable:1;
    BITFIELD bBlockable:1;
    BITFIELD bFlyingPreferred:1;
    BITFIELD bMayCausePain:1;
    BITFIELD bReceivePlayerToucherDiedNotify:1;
    BITFIELD bAlreadyVisited:1;
    BITFIELD bVehicleDestination:1;
    BITFIELD bMakeSourceOnly:1;
    TArrayNoInit<class UReachSpec*> PathList GCC_PACK(4);
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    INT visitedWeight;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    INT TransientCost;
    INT FearCost;
    class APickup* InventoryCache;
    FLOAT InventoryDist;
    FLOAT LastDetourWeight;
    BYTE BaseVisible[2];
    FLOAT BaseDist[2] GCC_PACK(4);
    FVector MaxPathSize;
    DECLARE_FUNCTION(execSetBaseDistance);
    BITFIELD eventSuggestMovePreparation(class APawn* Other)
    {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventDetourWeight(class APawn* Other, FLOAT PathWeight)
    {
        ANavigationPoint_eventDetourWeight_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        Parms.PathWeight=PathWeight;
        ProcessEvent(FindFunctionChecked(ENGINE_DetourWeight),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker, class UReachSpec* Path)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Seeker=Seeker;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    #include "ANavigationPoint.h"
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
	virtual UBOOL ReviewPath(APawn* Scout);
	virtual void CheckSymmetry(ANavigationPoint* Other);
	virtual INT AddMyMarker(AActor *S);
};


class ENGINE_API ARoadPathNode : public APathNode
{
public:
    FLOAT MaxRoadDist GCC_PACK(4);
    DECLARE_CLASS(ARoadPathNode,APathNode,0,Engine)
	INT ProscribedPathTo(ANavigationPoint *Nav);
	UBOOL ReviewPath(APawn* Scout);
};


class ENGINE_API AFlyingPathNode : public APathNode
{
public:
    DECLARE_CLASS(AFlyingPathNode,APathNode,0,Engine)
	INT ProscribedPathTo(ANavigationPoint *Nav);
	virtual UBOOL ReachedBy( APawn * P, FVector Loc );
	virtual UBOOL NoReachDistance();
	virtual UBOOL BigAnchor(APawn * P, FVector Loc);
	virtual void addReachSpecs(APawn * Scout, UBOOL bOnlyChanged);
	virtual UBOOL ShouldBeBased();
	virtual void InitForPathFinding();
	UBOOL ReviewPath(APawn* Scout);
};


class ENGINE_API AJumpDest : public ANavigationPoint
{
public:
    BITFIELD bOptionalJumpDest:1 GCC_PACK(4);
    BITFIELD bForceDoubleJump:1;
    INT NumUpstreamPaths GCC_PACK(4);
    class UReachSpec* UpstreamPaths[8];
    FVector NeededJump[8];
    FLOAT CalculatedGravityZ[8];
    DECLARE_CLASS(AJumpDest,ANavigationPoint,0,Engine)
	virtual void SetupForcedPath(APawn* Scout, UReachSpec* Path);
	void ClearPaths();
	UBOOL ReviewPath(APawn* Scout);
};


class ENGINE_API AJumpPad : public ANavigationPoint
{
public:
    FVector JumpVelocity GCC_PACK(4);
    FVector BACKUP_JumpVelocity;
    class AActor* JumpTarget;
    FLOAT JumpZModifier;
    class USound* JumpSound;
    DECLARE_CLASS(AJumpPad,ANavigationPoint,0,Engine)
	void addReachSpecs(APawn * Scout, UBOOL bOnlyChanged);
	void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
};


class ENGINE_API ADoor : public ANavigationPoint
{
public:
    FName DoorTag GCC_PACK(4);
    class AMover* MyDoor;
    FName DoorTrigger;
    class AActor* RecommendedTrigger;
    BITFIELD bInitiallyClosed:1 GCC_PACK(4);
    BITFIELD bBlockedWhenClosed:1;
    BITFIELD bDoorOpen:1;
    BITFIELD bTempNoCollide:1;
    DECLARE_CLASS(ADoor,ANavigationPoint,0,Engine)
    #include "ADoor.h"
};


class ENGINE_API AAutoDoor : public ADoor
{
public:
    DECLARE_CLASS(AAutoDoor,ADoor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoDoor)
};


class ENGINE_API ASmallNavigationPoint : public ANavigationPoint
{
public:
    DECLARE_CLASS(ASmallNavigationPoint,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASmallNavigationPoint)
};


class ENGINE_API ALadder : public ASmallNavigationPoint
{
public:
    class ALadderVolume* MyLadder GCC_PACK(4);
    class ALadder* LadderList;
    DECLARE_CLASS(ALadder,ASmallNavigationPoint,0,Engine)
    #include "ALadder.h"
};


class ENGINE_API AAutoLadder : public ALadder
{
public:
    DECLARE_CLASS(AAutoLadder,ALadder,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
};


class ENGINE_API AWarpZoneMarker : public ASmallNavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ASmallNavigationPoint,0,Engine)
    #include "AWarpZoneMarker.h"
};


class ENGINE_API AAIMarker : public ASmallNavigationPoint
{
public:
    class AAIScript* markedScript GCC_PACK(4);
    DECLARE_CLASS(AAIMarker,ASmallNavigationPoint,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
};


class ENGINE_API AInventorySpot : public ASmallNavigationPoint
{
public:
    class APickup* markedItem GCC_PACK(4);
    class AxPickUpBase* myPickupBase;
    BITFIELD bSuperPickup:1 GCC_PACK(4);
    DECLARE_CLASS(AInventorySpot,ASmallNavigationPoint,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
    virtual AInventorySpot* GetAInventorySpot() { return this; } 
};


class ENGINE_API APlayerStart : public ASmallNavigationPoint
{
public:
    BYTE TeamNumber GCC_PACK(4);
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    BITFIELD bPrimaryStart:1;
    DECLARE_CLASS(APlayerStart,ASmallNavigationPoint,0,Engine)
    #include "APlayerStart.h"
};


class ENGINE_API ATeleporter : public ASmallNavigationPoint
{
public:
    FStringNoInit URL GCC_PACK(4);
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ASmallNavigationPoint,0,Engine)
    #include "ATeleporter.h"
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag GCC_PACK(4);
    class AMover* MyLift;
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
    BITFIELD bLiftJumpExit:1 GCC_PACK(4);
    BITFIELD bNoDoubleJump:1;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag GCC_PACK(4);
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    #include "ALiftCenter.h"
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
	virtual UBOOL ReachedBy(APawn * P, FVector Loc);
};


class ENGINE_API AAvoidMarker : public ATriggers
{
public:
    BYTE TeamNum GCC_PACK(4);
    DECLARE_CLASS(AAvoidMarker,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAvoidMarker)
};


struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
    class APlayerController* P;
};
class ENGINE_API ALineOfSightTrigger : public ATriggers
{
public:
    FLOAT MaxViewDist GCC_PACK(4);
    FLOAT OldTickTime;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bTriggered:1;
    FName SeenActorTag GCC_PACK(4);
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
    void eventPlayerSeesMe(class APlayerController* P)
    {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
    }
    DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
    #include "ALineOfSightTrigger.h"
};


class ENGINE_API ASVehicleTrigger : public ATriggers
{
public:
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD BACKUP_bEnabled:1;
    BITFIELD bMarkWithPath:1;
    class ANavigationPoint* myMarker GCC_PACK(4);
    DECLARE_CLASS(ASVehicleTrigger,ATriggers,0,Engine)
	virtual UBOOL ReachedBy(APawn * P, FVector Loc);
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_HumanPlayerProximity =5,
    TT_LivePlayerProximity  =6,
    TT_MAX                  =7,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType GCC_PACK(4);
    FStringNoInit Message GCC_PACK(4);
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1 GCC_PACK(4);
    BITFIELD bSavedInitialActive:1;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API AAntiPortalActor : public AActor
{
public:
    DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};


class ENGINE_API AInventoryAttachment : public AActor
{
public:
    BITFIELD bFastAttachmentReplication:1 GCC_PACK(4);
    INT inventoryattachment_dummy GCC_PACK(4);
    DECLARE_CLASS(AInventoryAttachment,AActor,0|CLASS_NativeReplication,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};


struct AWeaponAttachment_eventThirdPersonEffects_Parms
{
};
class ENGINE_API AWeaponAttachment : public AInventoryAttachment
{
public:
    BYTE FlashCount GCC_PACK(4);
    BYTE FiringMode;
    BYTE SpawnHitCount;
    BITFIELD bAutoFire:1 GCC_PACK(4);
    FLOAT FiringSpeed GCC_PACK(4);
    FVector mHitLocation;
    BITFIELD bMatchWeapons:1 GCC_PACK(4);
    FColor BeaconColor GCC_PACK(4);
    void eventThirdPersonEffects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ThirdPersonEffects),NULL);
    }
    DECLARE_CLASS(AWeaponAttachment,AInventoryAttachment,0|CLASS_NativeReplication,Engine)
    #include "AWeaponAttachment.h"
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper GCC_PACK(4);
    class UObject* UnusedLightMesh GCC_PACK(4);
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    #include "ABrush.h"
};


class ENGINE_API AVolume : public ABrush
{
public:
    class AActor* AssociatedActor GCC_PACK(4);
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    class ADecorationList* DecoList;
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    #include "AVolume.h"
};


class ENGINE_API ABlockingVolume : public AVolume
{
public:
    BITFIELD bClampFluid:1 GCC_PACK(4);
    BITFIELD bClassBlocker:1;
    TArrayNoInit<class UClass*> BlockedClasses GCC_PACK(4);
    DECLARE_CLASS(ABlockingVolume,AVolume,0,Engine)
    virtual UBOOL ShouldTrace(AActor *SourceActor, DWORD TraceFlags);
};


struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    FVector ZoneVelocity GCC_PACK(4);
    FVector Gravity;
    FVector BACKUP_Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UI3DL2Listener* VolumeEffect;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bPainCausing:1 GCC_PACK(4);
    BITFIELD BACKUP_bPainCausing:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    BITFIELD bNoDecals:1;
    BITFIELD bDistanceFog:1;
    FColor DistanceFogColor GCC_PACK(4);
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT KExtraLinearDamping;
    FLOAT KExtraAngularDamping;
    FLOAT KBuoyancy;
    class AInfo* PainTimer;
    class APhysicsVolume* NextPhysicsVolume;
    void eventPawnLeavingVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
        if(IsProbing(NAME_PawnLeavingVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
        }
    }
    void eventPawnEnteredVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
        if(IsProbing(NAME_PawnEnteredVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
        }
    }
    void eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        if(IsProbing(NAME_ActorLeavingVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
        }
    }
    void eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        if(IsProbing(NAME_ActorEnteredVolume)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
        }
    }
    void eventPhysicsChangedFor(class AActor* Other)
    {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
        if(IsProbing(NAME_PhysicsChangedFor)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
        }
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_NativeReplication,Engine)
    #include "APhysicsVolume.h"
};


class ENGINE_API ALadderVolume : public APhysicsVolume
{
public:
    FName ClimbingAnimation GCC_PACK(4);
    FName TopAnimation;
    FRotator WallDir;
    FVector LookDir;
    FVector ClimbDir;
    class ALadder* LadderList;
    BITFIELD bNoPhysicalLadder:1 GCC_PACK(4);
    BITFIELD bAutoPath:1;
    class APawn* PendingClimber GCC_PACK(4);
    DECLARE_CLASS(ALadderVolume,APhysicsVolume,0,Engine)
    #include "ALadderVolume.h"
};


class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};


class ENGINE_API ADamageType : public AActor
{
public:
    FStringNoInit DeathString GCC_PACK(4);
    FStringNoInit FemaleSuicide;
    FStringNoInit MaleSuicide;
    FLOAT ViewFlash;
    FVector ViewFog;
    class UClass* DamageEffect;
    FStringNoInit DamageWeaponName;
    BITFIELD bArmorStops:1 GCC_PACK(4);
    BITFIELD bInstantHit:1;
    BITFIELD bFastInstantHit:1;
    BITFIELD bAlwaysGibs:1;
    BITFIELD bLocationalHit:1;
    BITFIELD bAlwaysSevers:1;
    BITFIELD bSpecial:1;
    BITFIELD bDetonatesGoop:1;
    BITFIELD bSkeletize:1;
    BITFIELD bCauseConvulsions:1;
    BITFIELD bSuperWeapon:1;
    BITFIELD bCausesBlood:1;
    BITFIELD bKUseOwnDeathVel:1;
    BITFIELD bKUseTearOffMomentum:1;
    BITFIELD bDelayedDamage:1;
    BITFIELD bNeverSevers:1;
    BITFIELD bThrowRagdoll:1;
    BITFIELD bRagdollBullet:1;
    BITFIELD bLeaveBodyEffect:1;
    BITFIELD bExtraMomentumZ:1;
    BITFIELD bFlaming:1;
    BITFIELD bRubbery:1;
    BITFIELD bCausedByWorld:1;
    BITFIELD bDirectDamage:1;
    BITFIELD bBulletHit:1;
    BITFIELD bVehicleHit:1;
    FLOAT GibModifier GCC_PACK(4);
    class UClass* PawnDamageEffect;
    class UClass* PawnDamageEmitter;
    TArrayNoInit<class USound*> PawnDamageSounds;
    class UClass* LowGoreDamageEffect;
    class UClass* LowGoreDamageEmitter;
    TArrayNoInit<class USound*> LowGoreDamageSounds;
    class UClass* LowDetailEffect;
    class UClass* LowDetailEmitter;
    FLOAT FlashScale;
    FVector FlashFog;
    INT DamageDesc;
    INT DamageThreshold;
    FVector DamageKick;
    class UMaterial* DamageOverlayMaterial;
    class UMaterial* DeathOverlayMaterial;
    FLOAT DamageOverlayTime;
    FLOAT DeathOverlayTime;
    FLOAT GibPerterbation;
    FLOAT KDamageImpulse;
    FLOAT KDeathVel;
    FLOAT KDeathUpKick;
    FLOAT VehicleDamageScaling;
    FLOAT VehicleMomentumScaling;
    DECLARE_CLASS(ADamageType,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};


struct ASVehicleFactory_eventVehicleUnPossessed_Parms
{
    class AVehicle* V;
};
struct ASVehicleFactory_eventVehiclePossessed_Parms
{
    class AVehicle* V;
};
struct ASVehicleFactory_eventVehicleDestroyed_Parms
{
    class AVehicle* V;
};
class ENGINE_API ASVehicleFactory : public AActor
{
public:
    class UClass* VehicleClass GCC_PACK(4);
    INT MaxVehicleCount;
    INT VehicleCount;
    void eventVehicleUnPossessed(class AVehicle* V)
    {
        ASVehicleFactory_eventVehicleUnPossessed_Parms Parms;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleUnPossessed),&Parms);
    }
    void eventVehiclePossessed(class AVehicle* V)
    {
        ASVehicleFactory_eventVehiclePossessed_Parms Parms;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_VehiclePossessed),&Parms);
    }
    void eventVehicleDestroyed(class AVehicle* V)
    {
        ASVehicleFactory_eventVehicleDestroyed_Parms Parms;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_VehicleDestroyed),&Parms);
    }
    DECLARE_CLASS(ASVehicleFactory,AActor,0,Engine)
	INT AddMyMarker(AActor *S);
};


class ENGINE_API AVehiclePart : public AActor
{
public:
    BITFIELD bUpdating:1 GCC_PACK(4);
    DECLARE_CLASS(AVehiclePart,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehiclePart)
};

#define UCONST_LATENT_MOVETOWARD 503

struct AController_eventMonitoredPawnAlert_Parms
{
};
struct AController_eventDelayedWarning_Parms
{
};
struct AController_eventReceiveWarning_Parms
{
    class APawn* shooter;
    FLOAT projSpeed;
    FVector FireDir;
};
struct AController_eventEnemyNotVisible_Parms
{
};
struct AController_eventSeeMonster_Parms
{
    class APawn* Seen;
};
struct AController_eventSeePlayer_Parms
{
    class APawn* Seen;
};
struct AController_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct AController_eventSetupSpecialPathAbilities_Parms
{
};
struct AController_eventSuperDesireability_Parms
{
    class APickup* P;
    FLOAT ReturnValue;
};
struct AController_eventDesireability_Parms
{
    class APickup* P;
    FLOAT ReturnValue;
};
struct AController_eventPrepareForMove_Parms
{
    class ANavigationPoint* Goal;
    class UReachSpec* Path;
};
struct AController_eventAllowDetourTo_Parms
{
    class ANavigationPoint* N;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyMissedJump_Parms
{
};
struct AController_eventNotifyJumpApex_Parms
{
};
struct AController_eventNotifyHitMover_Parms
{
    FVector HitNormal;
    class AMover* Wall;
};
struct AController_eventNotifyBump_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyFallingHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
};
struct AController_eventNotifyHitWall_Parms
{
    FVector HitNormal;
    class AActor* Wall;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyLanded_Parms
{
    FVector HitNormal;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHeadVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventLongFall_Parms
{
};
struct AController_eventSoakStop_Parms
{
    FString problem;
};
struct AController_eventAIHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct AController_eventMissedDodge_Parms
{
};
struct AController_eventMayDodgeToMoveTarget_Parms
{
};
struct AController_eventMayFall_Parms
{
};
class ENGINE_API AController : public AActor
{
public:
    class APawn* Pawn GCC_PACK(4);
    INT PlayerNum;
    FLOAT SightCounter;
    FLOAT FovAngle;
    FLOAT Handedness;
    BITFIELD bIsPlayer:1 GCC_PACK(4);
    BITFIELD bGodMode:1;
    BITFIELD bLOSflag:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bAdjusting:1;
    BITFIELD bPreparingMove:1;
    BITFIELD bControlAnimations:1;
    BITFIELD bEnemyInfoValid:1;
    BITFIELD bNotifyApex:1;
    BITFIELD bUsePlayerHearing:1;
    BITFIELD bJumpOverWall:1;
    BITFIELD bEnemyAcquired:1;
    BITFIELD bSoaking:1;
    BITFIELD bHuntPlayer:1;
    BITFIELD bAllowedToTranslocate:1;
    BITFIELD bAllowedToImpactJump:1;
    BITFIELD bAdrenalineEnabled:1;
    BITFIELD bNotifyFallingHitWall:1;
    BITFIELD bSlowerZAcquire:1;
    BITFIELD bInDodgeMove:1;
    BITFIELD bVehicleTransition:1;
    BITFIELD bForceStrafe:1;
    BYTE bRun GCC_PACK(4);
    BYTE bDuck;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bVoiceTalk;
    FVector AdjustLoc GCC_PACK(4);
    class AController* nextController;
    FLOAT Stimulus;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    FVector Destination;
    FVector FocalPoint;
    class AActor* Focus;
    FLOAT FocusLead;
    class AMover* PendingMover;
    class AActor* GoalList[4];
    class ANavigationPoint* home;
    FLOAT MinHitWall;
    FLOAT RespawnPredictionTime;
    FLOAT DodgeToGoalPct;
    INT AcquisitionYawRate;
    FLOAT DodgeLandZ;
    class APawn* Enemy;
    class AActor* Target;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    class AActor* RouteCache[16];
    class UReachSpec* CurrentPath;
    class UReachSpec* NextRoutePath;
    FVector CurrentPathDir;
    class AActor* RouteGoal;
    FLOAT RouteDist;
    FLOAT LastRouteFind;
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class UClass* PawnClass;
    class UClass* PreviousPawnClass;
    FLOAT GroundPitchTime;
    FVector ViewX;
    FVector ViewY;
    FVector ViewZ;
    class ANavigationPoint* StartSpot;
    FVector MonitorStartLoc;
    class APawn* MonitoredPawn;
    FLOAT MonitorMaxDistSq;
    class AAvoidMarker* FearSpots[2];
    FLOAT WarningDelay;
    class AProjectile* WarningProjectile;
    class APawn* ShotTarget;
    class AActor* LastFailedReach;
    FLOAT FailedReachTime;
    FVector FailedReachLocation;
    FLOAT Adrenaline;
    FLOAT AdrenalineMax;
    class UClass* LastPawnWeapon;
    DECLARE_FUNCTION(execCanMakePathTo);
    DECLARE_FUNCTION(execEndClimbLadder);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execInLatentExecution);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemoveController);
    DECLARE_FUNCTION(execAddController);
    DECLARE_FUNCTION(execFindBestSuperPickup);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathTowardNearest);
    DECLARE_FUNCTION(execFindPathToIntercept);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execFinishRotation);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventMonitoredPawnAlert()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MonitoredPawnAlert),NULL);
    }
    void eventDelayedWarning()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DelayedWarning),NULL);
    }
    void eventReceiveWarning(class APawn* shooter, FLOAT projSpeed, FVector FireDir)
    {
        AController_eventReceiveWarning_Parms Parms;
        Parms.shooter=shooter;
        Parms.projSpeed=projSpeed;
        Parms.FireDir=FireDir;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveWarning),&Parms);
    }
    void eventEnemyNotVisible()
    {
        if(IsProbing(NAME_EnemyNotVisible)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
        }
    }
    void eventSeeMonster(class APawn* Seen)
    {
        AController_eventSeeMonster_Parms Parms;
        if(IsProbing(NAME_SeeMonster)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
        }
    }
    void eventSeePlayer(class APawn* Seen)
    {
        AController_eventSeePlayer_Parms Parms;
        if(IsProbing(NAME_SeePlayer)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
        }
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        AController_eventHearNoise_Parms Parms;
        if(IsProbing(NAME_HearNoise)) {
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
        }
    }
    void eventSetupSpecialPathAbilities()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetupSpecialPathAbilities),NULL);
    }
    FLOAT eventSuperDesireability(class APickup* P)
    {
        AController_eventSuperDesireability_Parms Parms;
        Parms.ReturnValue=0;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_SuperDesireability),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventDesireability(class APickup* P)
    {
        AController_eventDesireability_Parms Parms;
        Parms.ReturnValue=0;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_Desireability),&Parms);
        return Parms.ReturnValue;
    }
    void eventPrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
    {
        AController_eventPrepareForMove_Parms Parms;
        if(IsProbing(NAME_PrepareForMove)) {
        Parms.Goal=Goal;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForMove),&Parms);
        }
    }
    BITFIELD eventAllowDetourTo(class ANavigationPoint* N)
    {
        AController_eventAllowDetourTo_Parms Parms;
        Parms.ReturnValue=0;
        Parms.N=N;
        ProcessEvent(FindFunctionChecked(ENGINE_AllowDetourTo),&Parms);
        return Parms.ReturnValue;
    }
    void eventNotifyMissedJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyMissedJump),NULL);
    }
    void eventNotifyJumpApex()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyJumpApex),NULL);
    }
    void eventNotifyHitMover(FVector HitNormal, class AMover* Wall)
    {
        AController_eventNotifyHitMover_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
    }
    BITFIELD eventNotifyBump(class AActor* Other)
    {
        AController_eventNotifyBump_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyBump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventNotifyFallingHitWall(FVector HitNormal, class AActor* Wall)
    {
        AController_eventNotifyFallingHitWall_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyFallingHitWall),&Parms);
    }
    BITFIELD eventNotifyHitWall(FVector HitNormal, class AActor* Wall)
    {
        AController_eventNotifyHitWall_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyLanded(FVector HitNormal)
    {
        AController_eventNotifyLanded_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyLanded)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHeadVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventSoakStop(const FString& problem)
    {
        AController_eventSoakStop_Parms Parms;
        Parms.problem=problem;
        ProcessEvent(FindFunctionChecked(ENGINE_SoakStop),&Parms);
    }
    void eventAIHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
    {
        AController_eventAIHearSound_Parms Parms;
        if(IsProbing(NAME_AIHearSound)) {
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        Parms.Attenuate=((Attenuate) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
        }
    }
    void eventMissedDodge()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MissedDodge),NULL);
    }
    void eventMayDodgeToMoveTarget()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MayDodgeToMoveTarget),NULL);
    }
    void eventMayFall()
    {
        if(IsProbing(NAME_MayFall)) {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
        }
    }
    DECLARE_CLASS(AController,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AController.h"
};

struct ENGINE_API FStoredChatPassword
{
    FStringNoInit ChatRoomName GCC_PACK(4);
    FStringNoInit ChatRoomPassword;
};

struct ENGINE_API FPlayerNameInfo
{
    FStringNoInit mInfo GCC_PACK(4);
    FColor mColor;
    FLOAT mXPos;
    FLOAT mYPos;
};

struct ENGINE_API FClientAdjustment
{
    FLOAT TimeStamp GCC_PACK(4);
    FName NewState;
    BYTE newPhysics;
    FVector NewLoc GCC_PACK(4);
    FVector NewVel;
    class AActor* NewBase;
    FVector NewFloor;
};


struct APlayerController_eventVoiceCommand_Parms
{
    FString RecognizedString;
    FString RawString;
};
struct APlayerController_eventStartClientDemoRec_Parms
{
};
struct APlayerController_eventClientNetworkMessage_Parms
{
    FString ParamA;
    FString ParamB;
};
struct APlayerController_eventClientCloseMenu_Parms
{
    BITFIELD bCloseAll;
    BITFIELD bCancel;
};
struct APlayerController_eventClientReplaceMenu_Parms
{
    FString Menu;
    BITFIELD bDisconnect;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventClientOpenMenu_Parms
{
    FString Menu;
    BITFIELD bDisconnect;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventUnPressButtons_Parms
{
};
struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventRemoveCameraEffect_Parms
{
    class UCameraEffect* ExEffect;
};
struct APlayerController_eventAddCameraEffect_Parms
{
    class UCameraEffect* NewEffect;
    BITFIELD RemoveExisting;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetProgressTime_Parms
{
    FLOAT t;
};
struct APlayerController_eventSetProgressMessage_Parms
{
    INT Index;
    FString S;
    FColor C;
};
struct APlayerController_eventProgressCommand_Parms
{
    FString Cmd;
    FString Msg1;
    FString Msg2;
};
struct APlayerController_eventShakeViewEvent_Parms
{
    FVector shRotMag;
    FVector shRotRate;
    FLOAT shRotTime;
    FVector shOffsetMag;
    FVector shOffsetRate;
    FLOAT shOffsetTime;
};
struct APlayerController_eventSetAmbientShake_Parms
{
    FLOAT FalloffStartTime;
    FLOAT FalloffTime;
    FVector OffsetMag;
    FLOAT OffsetFreq;
    FRotator RotMag;
    FLOAT RotFreq;
};
struct APlayerController_eventSendClientAdjustment_Parms
{
};
struct APlayerController_eventPreClientTravel_Parms
{
};
struct APlayerController_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
};
struct APlayerController_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APlayerController_eventChatRoomMessage_Parms
{
    BYTE Result;
    INT ChannelIndex;
    class APlayerReplicationInfo* RelatedPRI;
};
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventClientReset_Parms
{
};
struct APlayerController_eventClientSetViewTarget_Parms
{
    class AActor* A;
};
struct APlayerController_eventStreamFinished_Parms
{
    INT StreamHandle;
    BYTE Reason;
};
struct APlayerController_eventKickWarning_Parms
{
};
struct APlayerController_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
    BITFIELD Attenuate;
};
struct APlayerController_eventServerValidationResponse_Parms
{
    FString R;
};
struct APlayerController_eventClientValidate_Parms
{
    FString C;
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerController : public AController
{
public:
    class UPlayer* Player GCC_PACK(4);
    BITFIELD bLookUpStairs:1 GCC_PACK(4);
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bHideSpectatorBeacons:1;
    BITFIELD bZooming:1;
    BITFIELD bHideVehicleNoEntryIndicator:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bCameraPositionLocked:1;
    BITFIELD bViewBot:1;
    BITFIELD UseFixedVisibility:1;
    BITFIELD bFreeCam:1;
    BITFIELD bFreeCamZoom:1;
    BITFIELD bFreeCamSwivel:1;
    BITFIELD bBlockCloseCamera:1;
    BITFIELD bValidBehindCamera:1;
    BITFIELD bForcePrecache:1;
    BITFIELD bClientDemo:1;
    BITFIELD bAllActorsRelevant:1;
    BITFIELD bShortConnectTimeOut:1;
    BITFIELD bPendingDestroy:1;
    BITFIELD bEnableAmbientShake:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoTextToSpeechVoiceMessages:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bNoMatureLanguage:1;
    BITFIELD bDynamicNetSpeed:1;
    BITFIELD bSmallWeapons:1;
    BITFIELD bWeaponViewShake:1;
    BITFIELD bLandingShake:1;
    BITFIELD bAimingHelp:1;
    BITFIELD bEnablePickupForceFeedback:1;
    BITFIELD bEnableWeaponForceFeedback:1;
    BITFIELD bEnableDamageForceFeedback:1;
    BITFIELD bEnableGUIForceFeedback:1;
    BITFIELD bForceFeedbackSupported:1;
    BITFIELD bVoiceChatEnabled:1;
    BITFIELD bEnableInitialChatRoom:1;
    BITFIELD bViewingMatineeCinematic:1;
    BITFIELD bCustomListener:1;
    BITFIELD bAcuteHearing:1;
    BITFIELD bMenuBeforeRespawn:1;
    BITFIELD bSkippedLastUpdate:1;
    BITFIELD bLastPressedJump:1;
    BITFIELD bEnableStatsTracking:1;
    BITFIELD bOnlySpeakTeamText:1;
    FLOAT FOVBias GCC_PACK(4);
    BYTE AutoJoinMask;
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bXAxis;
    BYTE bYAxis;
    BYTE DoubleClickDir;
    BYTE AnnouncerLevel;
    BYTE AnnouncerVolume;
    FLOAT TextToSpeechVoiceVolume GCC_PACK(4);
    FLOAT MaxResponseTime;
    FLOAT WaitDelay;
    class APawn* AcknowledgedPawn;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aLastForward;
    FLOAT aLastStrafe;
    FLOAT aLastUp;
    FLOAT NumServerDrives;
    FLOAT NumSkips;
    FLOAT VehicleCheckRadius;
    BITFIELD bSuccessfulUse:1 GCC_PACK(4);
    INT ShowFlags GCC_PACK(4);
    INT Misc1;
    INT Misc2;
    INT RendMap;
    FLOAT OrthoZoom;
    class AActor* ViewTarget;
    class AController* RealViewTarget;
    class APlayerController* DemoViewer;
    FLOAT CameraDist;
    FRange CameraDistRange;
    FVector OldCameraLoc;
    FRotator OldCameraRot;
    TArrayNoInit<class UCameraEffect*> CameraEffects;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    FLOAT DesiredZoomLevel;
    FVector ListenerLocation;
    FRotator ListenerRotation;
    FVector FixedLocation;
    FRotator FixedRotation;
    FMatrix RenderWorldToCamera;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT ConstantGlowScale;
    FVector ConstantGlowFog;
    FLOAT ScreenFlashScaling;
    FColor LastDistanceFogColor;
    FLOAT LastDistanceFogStart;
    FLOAT LastDistanceFogEnd;
    FLOAT CurrentDistanceFogEnd;
    FLOAT TimeSinceLastFogChange;
    INT LastZone;
    FRotator TargetViewRotation;
    FRotator BlendedTargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    class AHUD* myHUD;
    FLOAT LastPlaySound;
    FLOAT LastPlaySpeech;
    FStringNoInit Song;
    BYTE Transition;
    class ASavedMove* SavedMoves GCC_PACK(4);
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FLOAT TimeMarginSlack;
    class AWeapon* OldClientWeapon;
    INT WeaponUpdate;
    FStringNoInit ProgressMessage[4];
    FColor ProgressColor[4];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    class AGameReplicationInfo* GameReplicationInfo;
    class AVoiceChatReplicationInfo* VoiceReplicationInfo;
    class AVotingReplicationInfoBase* VoteReplicationInfo;
    FStringNoInit StatsUsername;
    FStringNoInit StatsPassword;
    class UClass* LocalMessageClass;
    class UClass* ChatRoomMessageClass;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FVector ShakeOffsetTime;
    FVector ShakeOffsetMax;
    FVector ShakeRotRate;
    FVector ShakeRotMax;
    FRotator ShakeRot;
    FVector ShakeRotTime;
    FLOAT AmbientShakeFalloffStartTime;
    FLOAT AmbientShakeFalloffTime;
    FVector AmbientShakeOffsetMag;
    FLOAT AmbientShakeOffsetFreq;
    FRotator AmbientShakeRotMag;
    FLOAT AmbientShakeRotFreq;
    class APawn* TurnTarget;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    FRotator TurnRot180;
    FVector OldFloor;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    class UAdminBase* AdminManager;
    class AMaplistManagerBase* MapHandler;
    FStringNoInit PlayerChatType;
    class APlayerChatManager* ChatManager;
    FVector FailedPathStart;
    FRotator CameraDeltaRotation;
    FLOAT CameraDeltaRad;
    FRotator CameraSwivel;
    FLOAT TeamBeaconMaxDist;
    FLOAT TeamBeaconPlayerInfoMaxDist;
    class UTexture* TeamBeaconTexture;
    class UTexture* LinkBeaconTexture;
    class UTexture* SpeakingBeaconTexture;
    FColor TeamBeaconTeamColors[2];
    FColor TeamBeaconCustomColor;
    TArrayNoInit<FPlayerNameInfo> PlayerNameArray;
    INT DemoViewPitch;
    INT DemoViewYaw;
    class ASecurity* PlayerSecurity;
    FLOAT LoginDelay;
    FLOAT NextLoginTime;
    FLOAT ForcePrecacheTime;
    FLOAT LastPingUpdate;
    FLOAT ExactPing;
    FLOAT OldPing;
    FLOAT SpectateSpeed;
    FLOAT DynamicPingThreshold;
    FLOAT NextSpeedChange;
    FLOAT VoiceChangeLimit;
    INT ClientCap;
    FStringNoInit MidGameMenuClass;
    FStringNoInit DemoMenuClass;
    FStringNoInit AdminMenuClass;
    FStringNoInit ChatPasswordMenuClass;
    TArrayNoInit<FStoredChatPassword> StoredChatPasswords;
    class AVoiceChatRoom* ActiveRoom;
    FStringNoInit LastActiveChannel;
    FStringNoInit VoiceChatCodec;
    FStringNoInit VoiceChatLANCodec;
    FStringNoInit ChatPassword;
    FStringNoInit DefaultActiveChannel;
    FClientAdjustment PendingAdjustment;
    class AAnnouncerQueueManager* AnnouncerQueueManager;
    class AAnnouncerVoice* StatusAnnouncer;
    class AAnnouncerVoice* RewardAnnouncer;
    FLOAT LastActiveTime;
    class AActor* CalcViewActor;
    FVector CalcViewActorLocation;
    FVector CalcViewLocation;
    FRotator CalcViewRotation;
    FLOAT LastPlayerCalcView;
    FLOAT LastBroadcastTime;
    FStringNoInit LastBroadcastString[4];
    BITFIELD bIsSpaceFighter:1 GCC_PACK(4);
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execCheckSpeedHack);
    DECLARE_FUNCTION(execServerValidationResponse);
    DECLARE_FUNCTION(execClientValidate);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execGetURLProtocol);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execSetViewTarget);
    DECLARE_FUNCTION(execResetInput);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetServerNetworkAddress);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execGetPlayerIDHash);
    DECLARE_FUNCTION(execSetNetSpeed);
    void eventVoiceCommand(const FString& RecognizedString, const FString& RawString)
    {
        APlayerController_eventVoiceCommand_Parms Parms;
        Parms.RecognizedString=RecognizedString;
        Parms.RawString=RawString;
        ProcessEvent(FindFunctionChecked(ENGINE_VoiceCommand),&Parms);
    }
    void eventStartClientDemoRec()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StartClientDemoRec),NULL);
    }
    void eventClientNetworkMessage(const FString& ParamA, const FString& ParamB)
    {
        APlayerController_eventClientNetworkMessage_Parms Parms;
        Parms.ParamA=ParamA;
        Parms.ParamB=ParamB;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientNetworkMessage),&Parms);
    }
    void eventClientCloseMenu(BITFIELD bCloseAll, BITFIELD bCancel)
    {
        APlayerController_eventClientCloseMenu_Parms Parms;
        Parms.bCloseAll=((bCloseAll) ? FIRST_BITFIELD : 0);
        Parms.bCancel=((bCancel) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCloseMenu),&Parms);
    }
    void eventClientReplaceMenu(const FString& Menu, BITFIELD bDisconnect, const FString& Msg1, const FString& Msg2)
    {
        APlayerController_eventClientReplaceMenu_Parms Parms;
        Parms.Menu=Menu;
        Parms.bDisconnect=((bDisconnect) ? FIRST_BITFIELD : 0);
        Parms.Msg1=Msg1;
        Parms.Msg2=Msg2;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientReplaceMenu),&Parms);
    }
    void eventClientOpenMenu(const FString& Menu, BITFIELD bDisconnect, const FString& Msg1, const FString& Msg2)
    {
        APlayerController_eventClientOpenMenu_Parms Parms;
        Parms.Menu=Menu;
        Parms.bDisconnect=((bDisconnect) ? FIRST_BITFIELD : 0);
        Parms.Msg1=Msg1;
        Parms.Msg2=Msg2;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientOpenMenu),&Parms);
    }
    void eventUnPressButtons()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPressButtons),NULL);
    }
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerController_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventRemoveCameraEffect(class UCameraEffect* ExEffect)
    {
        APlayerController_eventRemoveCameraEffect_Parms Parms;
        Parms.ExEffect=ExEffect;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveCameraEffect),&Parms);
    }
    void eventAddCameraEffect(class UCameraEffect* NewEffect, BITFIELD RemoveExisting)
    {
        APlayerController_eventAddCameraEffect_Parms Parms;
        Parms.NewEffect=NewEffect;
        Parms.RemoveExisting=((RemoveExisting) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_AddCameraEffect),&Parms);
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerController_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    void eventSetProgressTime(FLOAT t)
    {
        APlayerController_eventSetProgressTime_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
    }
    void eventSetProgressMessage(INT Index, const FString& S, FColor C)
    {
        APlayerController_eventSetProgressMessage_Parms Parms;
        Parms.Index=Index;
        Parms.S=S;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
    }
    void eventProgressCommand(const FString& Cmd, const FString& Msg1, const FString& Msg2)
    {
        APlayerController_eventProgressCommand_Parms Parms;
        Parms.Cmd=Cmd;
        Parms.Msg1=Msg1;
        Parms.Msg2=Msg2;
        ProcessEvent(FindFunctionChecked(ENGINE_ProgressCommand),&Parms);
    }
    void eventShakeViewEvent(FVector shRotMag, FVector shRotRate, FLOAT shRotTime, FVector shOffsetMag, FVector shOffsetRate, FLOAT shOffsetTime)
    {
        APlayerController_eventShakeViewEvent_Parms Parms;
        Parms.shRotMag=shRotMag;
        Parms.shRotRate=shRotRate;
        Parms.shRotTime=shRotTime;
        Parms.shOffsetMag=shOffsetMag;
        Parms.shOffsetRate=shOffsetRate;
        Parms.shOffsetTime=shOffsetTime;
        ProcessEvent(FindFunctionChecked(ENGINE_ShakeViewEvent),&Parms);
    }
    void eventSetAmbientShake(FLOAT FalloffStartTime, FLOAT FalloffTime, FVector OffsetMag, FLOAT OffsetFreq, FRotator RotMag, FLOAT RotFreq)
    {
        APlayerController_eventSetAmbientShake_Parms Parms;
        Parms.FalloffStartTime=FalloffStartTime;
        Parms.FalloffTime=FalloffTime;
        Parms.OffsetMag=OffsetMag;
        Parms.OffsetFreq=OffsetFreq;
        Parms.RotMag=RotMag;
        Parms.RotFreq=RotFreq;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAmbientShake),&Parms);
    }
    void eventSendClientAdjustment()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SendClientAdjustment),NULL);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type)
    {
        APlayerController_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APlayerController_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventChatRoomMessage(BYTE Result, INT ChannelIndex, class APlayerReplicationInfo* RelatedPRI)
    {
        APlayerController_eventChatRoomMessage_Parms Parms;
        Parms.Result=Result;
        Parms.ChannelIndex=ChannelIndex;
        Parms.RelatedPRI=RelatedPRI;
        ProcessEvent(FindFunctionChecked(ENGINE_ChatRoomMessage),&Parms);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventInitInputSystem()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
    }
    void eventClientReset()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientReset),NULL);
    }
    void eventClientSetViewTarget(class AActor* A)
    {
        APlayerController_eventClientSetViewTarget_Parms Parms;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientSetViewTarget),&Parms);
    }
    void eventStreamFinished(INT StreamHandle, BYTE Reason)
    {
        APlayerController_eventStreamFinished_Parms Parms;
        Parms.StreamHandle=StreamHandle;
        Parms.Reason=Reason;
        ProcessEvent(FindFunctionChecked(ENGINE_StreamFinished),&Parms);
    }
    void eventKickWarning()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KickWarning),NULL);
    }
    void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
    {
        APlayerController_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        Parms.Attenuate=((Attenuate) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventServerValidationResponse(const FString& R)
    {
        APlayerController_eventServerValidationResponse_Parms Parms;
        Parms.R=R;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerValidationResponse),&Parms);
    }
    void eventClientValidate(const FString& C)
    {
        APlayerController_eventClientValidate_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientValidate),&Parms);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerController_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=((bItems) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "APlayerController.h"
};


class ENGINE_API ACamera : public APlayerController
{
public:
    DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
    #include "ACamera.h"
};


class ENGINE_API AAIController : public AController
{
public:
    BITFIELD bHunting:1 GCC_PACK(4);
    BITFIELD bAdjustFromWalls:1;
    BITFIELD bPlannedJump:1;
    class AAIScript* MyScript GCC_PACK(4);
    FLOAT Skill;
    DECLARE_FUNCTION(execWaitToSeeEnemy);
    DECLARE_CLASS(AAIController,AController,0|CLASS_Config,Engine)
    #include "AAIController.h"
};


class ENGINE_API AInventory : public AActor
{
public:
    BYTE InventoryGroup GCC_PACK(4);
    BYTE GroupOffset;
    BITFIELD bDisplayableInv:1 GCC_PACK(4);
    BITFIELD bTossedOut:1;
    class UClass* PickupClass GCC_PACK(4);
    INT Charge;
    FVector PlayerViewOffset;
    FRotator PlayerViewPivot;
    BITFIELD bDrawingFirstPerson:1 GCC_PACK(4);
    FLOAT BobDamping GCC_PACK(4);
    class AActor* ThirdPersonActor;
    class UClass* AttachmentClass;
    class UMaterial* IconMaterial;
    FIntBox IconCoords;
    FStringNoInit ItemName;
    DECLARE_CLASS(AInventory,AActor,0|CLASS_NativeReplication,Engine)
    #include "AInventory.h"
};


class ENGINE_API AAmmunition : public AInventory
{
public:
    INT MaxAmmo GCC_PACK(4);
    INT AmmoAmount;
    INT InitialAmount;
    INT PickupAmmo;
    BITFIELD bRecommendSplashDamage:1 GCC_PACK(4);
    BITFIELD bTossed:1;
    BITFIELD bTrySplash:1;
    BITFIELD bLeadTarget:1;
    BITFIELD bInstantHit:1;
    BITFIELD bSplashDamage:1;
    class UClass* ProjectileClass GCC_PACK(4);
    class UClass* MyDamageType;
    FLOAT WarnTargetPct;
    FLOAT RefireRate;
    class USound* FireSound;
    FLOAT MaxRange;
    BITFIELD bTryHeadShot:1 GCC_PACK(4);
    DECLARE_CLASS(AAmmunition,AInventory,0|CLASS_NativeReplication,Engine)
    #include "AAmmunition.h"
};


class ENGINE_API APowerups : public AInventory
{
public:
    INT NumCopies GCC_PACK(4);
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bAutoActivate:1;
    BITFIELD bActivatable:1;
    BITFIELD bActive:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    class USound* ActivateSound;
    class USound* DeActivateSound;
    DECLARE_CLASS(APowerups,AInventory,0|CLASS_NativeReplication,Engine)
    #include "APowerups.h"
};

enum EWeaponClientState
{
    WS_None                 =0,
    WS_Hidden               =1,
    WS_BringUp              =2,
    WS_PutDown              =3,
    WS_ReadyToFire          =4,
    WS_MAX                  =5,
};
#define UCONST_NUM_FIRE_MODES 2

struct AWeapon_eventStopFire_Parms
{
    INT Mode;
};
struct AWeapon_eventServerStartFire_Parms
{
    BYTE Mode;
};
struct AWeapon_eventClientStopFire_Parms
{
    INT Mode;
};
struct AWeapon_eventClientStartFire_Parms
{
    INT Mode;
};
struct AWeapon_eventWeaponTick_Parms
{
    FLOAT dt;
};
class ENGINE_API AWeapon : public AInventory
{
public:
    class UClass* FireModeClass[2] GCC_PACK(4);
    class UWeaponFire* FireMode[2];
    class AAmmunition* Ammo[2];
    FName IdleAnim;
    FName RestAnim;
    FName AimAnim;
    FName RunAnim;
    FName SelectAnim;
    FName PutDownAnim;
    FLOAT IdleAnimRate;
    FLOAT RestAnimRate;
    FLOAT AimAnimRate;
    FLOAT RunAnimRate;
    FLOAT SelectAnimRate;
    FLOAT PutDownAnimRate;
    FLOAT PutDownTime;
    FLOAT BringUpTime;
    class USound* SelectSound;
    FStringNoInit SelectForce;
    INT BotMode;
    FLOAT AIRating;
    FLOAT CurrentRating;
    BITFIELD bMeleeWeapon:1 GCC_PACK(4);
    BITFIELD bSniping:1;
    BITFIELD bShowChargingBar:1;
    BITFIELD bMatchWeapons:1;
    BITFIELD bCanThrow:1;
    BITFIELD bForceSwitch:1;
    BITFIELD bNotInPriorityList:1;
    BITFIELD bNotInDemo:1;
    BITFIELD bNoVoluntarySwitch:1;
    BITFIELD bSpectated:1;
    BITFIELD bDebugging:1;
    BITFIELD bNoInstagibReplace:1;
    BITFIELD bInitOldMesh:1;
    BITFIELD bUseOldWeaponMesh:1;
    BITFIELD bEndOfRound:1;
    BITFIELD bNoAmmoInstances:1;
    INT AmmoCharge[2] GCC_PACK(4);
    class UClass* AmmoClass[2];
    class UMesh* OldMesh;
    FStringNoInit OldPickup;
    FLOAT OldDrawScale;
    FLOAT OldCenteredOffsetY;
    FVector OldPlayerViewOffset;
    FVector OldSmallViewOffset;
    FRotator OldPlayerViewPivot;
    INT OldCenteredRoll;
    INT OldCenteredYaw;
    FStringNoInit Description;
    class UClass* DemoReplacement;
    BITFIELD bPendingSwitch:1 GCC_PACK(4);
    FVector EffectOffset GCC_PACK(4);
    FStringNoInit MessageNoAmmo;
    FLOAT DisplayFOV;
    BYTE ClientState;
    BYTE ExchangeFireModes;
    BYTE Priority;
    BYTE DefaultPriority;
    FLOAT hand GCC_PACK(4);
    FLOAT RenderedHand;
    FColor HudColor;
    class AWeapon* OldWeapon;
    FVector SmallViewOffset;
    FVector SmallEffectOffset;
    FLOAT CenteredOffsetY;
    INT CenteredRoll;
    INT CenteredYaw;
    INT CustomCrosshair;
    FColor CustomCrossHairColor;
    FLOAT CustomCrossHairScale;
    FStringNoInit CustomCrossHairTextureName;
    class UTexture* CustomCrossHairTexture;
    FLOAT DownDelay;
    FLOAT MinReloadPct;
    DECLARE_FUNCTION(execInitWeaponFires);
    void eventStopFire(INT Mode)
    {
        AWeapon_eventStopFire_Parms Parms;
        Parms.Mode=Mode;
        ProcessEvent(FindFunctionChecked(ENGINE_StopFire),&Parms);
    }
    void eventServerStartFire(BYTE Mode)
    {
        AWeapon_eventServerStartFire_Parms Parms;
        Parms.Mode=Mode;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerStartFire),&Parms);
    }
    void eventClientStopFire(INT Mode)
    {
        AWeapon_eventClientStopFire_Parms Parms;
        Parms.Mode=Mode;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientStopFire),&Parms);
    }
    void eventClientStartFire(INT Mode)
    {
        AWeapon_eventClientStartFire_Parms Parms;
        Parms.Mode=Mode;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientStartFire),&Parms);
    }
    void eventWeaponTick(FLOAT dt)
    {
        AWeapon_eventWeaponTick_Parms Parms;
        Parms.dt=dt;
        ProcessEvent(FindFunctionChecked(ENGINE_WeaponTick),&Parms);
    }
    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_Config|CLASS_NativeReplication,Engine)
    #include "AWeapon.h"
};


class ENGINE_API APickup : public AActor
{
public:
    FLOAT MaxDesireability GCC_PACK(4);
    class AInventorySpot* myMarker;
    class ANavigationPoint* PickupCache;
    class UClass* InventoryType;
    BITFIELD bInstantRespawn:1 GCC_PACK(4);
    BITFIELD bOnlyReplicateHidden:1;
    BITFIELD bAmbientGlow:1;
    BITFIELD bDropped:1;
    BITFIELD bPredictRespawns:1;
    FLOAT RespawnTime GCC_PACK(4);
    FLOAT RespawnEffectTime;
    FStringNoInit PickupMessage;
    class USound* PickupSound;
    FStringNoInit PickupForce;
    class AxPickUpBase* PickUpBase;
    class AController* TeamOwner[4];
    DECLARE_FUNCTION(execRemoveFromNavigation);
    DECLARE_FUNCTION(execAddToNavigation);
    DECLARE_CLASS(APickup,AActor,0|CLASS_NativeReplication,Engine)
    #include "APickup.h"
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount GCC_PACK(4);
    DECLARE_CLASS(AAmmo,APickup,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmo)
};

struct ENGINE_API FConsoleMessage
{
    FStringNoInit Text GCC_PACK(4);
    FColor TextColor;
    FLOAT MessageLife;
    class APlayerReplicationInfo* PRI;
};


struct AHUD_eventAnnouncementPlayed_Parms
{
    FName AnnouncerSound;
    BYTE Switch;
};
struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventConnectFailure_Parms
{
    FString FailCode;
    FString URL;
};
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
class ENGINE_API AHUD : public AActor
{
public:
    class APlayerController* PlayerOwner GCC_PACK(4);
    class APawn* PawnOwner;
    class APlayerReplicationInfo* PawnOwnerPRI;
    class UConsole* PlayerConsole;
    class AScoreBoard* ScoreBoard;
    class AScoreBoard* LocalStatsScreen;
    class AActor* VoteMenu;
    FColor WhiteColor;
    FColor RedColor;
    FColor GreenColor;
    FColor CyanColor;
    FColor BlueColor;
    FColor GoldColor;
    FColor PurpleColor;
    FColor TurqColor;
    FColor GrayColor;
    FColor BlackColor;
    BITFIELD bShowVoteMenu:1 GCC_PACK(4);
    BITFIELD bHideHUD:1;
    BITFIELD bShowScoreBoard:1;
    BITFIELD bShowDebugInfo:1;
    BITFIELD bShowBadConnectionAlert:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bShowWeaponInfo:1;
    BITFIELD bShowPersonalInfo:1;
    BITFIELD bShowPoints:1;
    BITFIELD bShowWeaponBar:1;
    BITFIELD bCrosshairShow:1;
    BITFIELD bShowPortrait:1;
    BITFIELD bShowPortraitVC:1;
    BITFIELD bNoEnemyNames:1;
    BITFIELD bSmallWeaponBar:1;
    BITFIELD bBuiltMOTD:1;
    BITFIELD bShowLocalStats:1;
    FColor ConsoleColor GCC_PACK(4);
    class APlayerReplicationInfo* PortraitPRI;
    FStringNoInit ProgressFontName;
    class UFont* ProgressFontFont;
    FStringNoInit OverrideConsoleFontName;
    class UFont* OverrideConsoleFont;
    FLOAT ProgressFadeTime;
    FColor MOTDColor;
    FLOAT HudScale;
    FLOAT HudOpacity;
    FLOAT HudCanvasScale;
    INT CrosshairStyle;
    FLOAT CrosshairScale;
    FLOAT CrosshairOpacity;
    FColor CrossHairColor;
    FLOAT ResScaleX;
    FLOAT ResScaleY;
    INT ConsoleMessageCount;
    INT ConsoleFontSize;
    INT MessageFontOffset;
    FConsoleMessage TextMessages[8];
    FLOAT ConsoleMessagePosX;
    FLOAT ConsoleMessagePosY;
    FStringNoInit FontArrayNames[9];
    class UFont* FontArrayFonts[9];
    INT FontScreenWidthMedium[9];
    INT FontScreenWidthSmall[9];
    FStringNoInit MOTD[4];
    INT MOTDState;
    FLOAT LastPickupTime;
    FLOAT LastAmmoPickupTime;
    FLOAT LastWeaponPickupTime;
    FLOAT LastHealthPickupTime;
    FLOAT LastArmorPickupTime;
    FLOAT LastVoiceGain;
    FLOAT LastVoiceGainTime;
    INT LastPlayerIDTalking;
    FLOAT LastPlayerIDTalkingTime;
    class ASceneSubtitles* SubTitles;
    TArrayNoInit<class AHudOverlay*> Overlays;
    DECLARE_FUNCTION(execStaticDrawCanvasLine);
    DECLARE_FUNCTION(execDrawCanvasLine);
    DECLARE_FUNCTION(execDraw3DLine);
    void eventAnnouncementPlayed(FName AnnouncerSound, BYTE Switch)
    {
        AHUD_eventAnnouncementPlayed_Parms Parms;
        Parms.AnnouncerSound=AnnouncerSound;
        Parms.Switch=Switch;
        ProcessEvent(FindFunctionChecked(ENGINE_AnnouncementPlayed),&Parms);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventConnectFailure(const FString& FailCode, const FString& URL)
    {
        AHUD_eventConnectFailure_Parms Parms;
        Parms.FailCode=FailCode;
        Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectFailure),&Parms);
    }
    void eventWorldSpaceOverlays()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT Speed GCC_PACK(4);
    FLOAT MaxSpeed;
    FLOAT TossZ;
    class AActor* ZeroCollider;
    BITFIELD bSwitchToZeroCollision:1 GCC_PACK(4);
    BITFIELD bNoFX:1;
    FLOAT Damage GCC_PACK(4);
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    class UClass* MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* ExplosionDecal;
    FLOAT ExploWallOut;
    class AController* InstigatorController;
    class AActor* LastTouched;
    class AActor* HurtWall;
    FLOAT MaxEffectDistance;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    #include "AProjectile.h"
};


struct ADecoration_eventNotReachableBy_Parms
{
    class APawn* P;
};
class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed GCC_PACK(4);
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    class USound* PushSound GCC_PACK(4);
    class USound* EndPushSound;
    INT numLandings;
    class UClass* Contents;
    INT NumFrags;
    class UTexture* FragSkin;
    class UClass* FragType;
    FVector FragMomentum;
    INT Health;
    FLOAT SplashTime;
    class ANavigationPoint* LastAnchor;
    FLOAT LastValidAnchorTime;
    void eventNotReachableBy(class APawn* P)
    {
        ADecoration_eventNotReachableBy_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_NotReachableBy),&Parms);
    }
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    #include "ADecoration.h"
};


struct AVignette_eventDrawVignette_Parms
{
    class UCanvas* C;
    FLOAT Progress;
};
struct AVignette_eventInit_Parms
{
};
class ENGINE_API AVignette : public AActor
{
public:
    FStringNoInit MapName GCC_PACK(4);
    class UClass* GameClass;
    void eventDrawVignette(class UCanvas* C, FLOAT Progress)
    {
        AVignette_eventDrawVignette_Parms Parms;
        Parms.C=C;
        Parms.Progress=Progress;
        ProcessEvent(FindFunctionChecked(ENGINE_DrawVignette),&Parms);
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(AVignette,AActor,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVignette)
};


class ENGINE_API ANote : public AActor
{
public:
    FStringNoInit Text GCC_PACK(4);
    DECLARE_CLASS(ANote,AActor,0,Engine)
    #include "ANote.h"
};


class ENGINE_API ALight : public AActor
{
public:
    FLOAT MinCoronaSize GCC_PACK(4);
    FLOAT MaxCoronaSize;
    FLOAT CoronaRotation;
    FLOAT CoronaRotationOffset;
    BITFIELD UseOwnFinalBlend:1 GCC_PACK(4);
    DECLARE_CLASS(ALight,AActor,0,Engine)
    #include "ALight.h"
};


class ENGINE_API AKRepulsor : public AActor
{
public:
    BITFIELD bEnableRepulsion:1 GCC_PACK(4);
    BITFIELD bRepulsorInContact:1;
    FVector CheckDir GCC_PACK(4);
    FLOAT CheckDist;
    FLOAT Softness;
    FLOAT PenScale;
    FLOAT PenOffset;
    PTRINT KContact;
    DECLARE_CLASS(AKRepulsor,AActor,0,Engine)
#ifdef WITH_KARMA
	void Destroy();
#endif
};


class ENGINE_API AKActor : public AActor
{
public:
    BITFIELD bKTakeShot:1 GCC_PACK(4);
    TArrayNoInit<class USound*> ImpactSounds GCC_PACK(4);
    FLOAT ImpactVolume;
    class UClass* ImpactEffect;
    BITFIELD bOrientImpactEffect:1 GCC_PACK(4);
    FLOAT ImpactInterval GCC_PACK(4);
    FLOAT LastImpactTime;
    DECLARE_CLASS(AKActor,AActor,0,Engine)
	virtual void Spawned();
};


class ENGINE_API AKTire : public AKActor
{
public:
    class AKCarWheelJoint* WheelJoint GCC_PACK(4);
    FLOAT RollFriction;
    FLOAT LateralFriction;
    FLOAT RollSlip;
    FLOAT LateralSlip;
    FLOAT MinSlip;
    FLOAT SlipRate;
    FLOAT Softness;
    FLOAT Adhesion;
    FLOAT Restitution;
    BITFIELD bTireOnGround:1 GCC_PACK(4);
    FLOAT GroundSlipVel GCC_PACK(4);
    FVector GroundSlipVec;
    FLOAT SpinSpeed;
    class UMaterial* GroundMaterial;
    BYTE GroundSurfaceType;
    FKRigidBodyState ReceiveState GCC_PACK(4);
    BITFIELD bReceiveStateNew:1 GCC_PACK(4);
    DECLARE_CLASS(AKTire,AKActor,0,Engine)
#ifdef WITH_KARMA
	// Actor interface.
	virtual void preContactUpdate();
#endif
};


struct AKConstraint_eventKForceExceed_Parms
{
    FLOAT forceMag;
};
class ENGINE_API AKConstraint : public AKActor
{
public:
    PTRINT KConstraintData GCC_PACK(4);
    class AActor* KConstraintActor1;
    class AActor* KConstraintActor2;
    FName KConstraintBone1;
    FName KConstraintBone2;
    BITFIELD bKDisableCollision:1 GCC_PACK(4);
    FVector KPos1 GCC_PACK(4);
    FVector KPriAxis1;
    FVector KSecAxis1;
    FVector KPos2;
    FVector KPriAxis2;
    FVector KSecAxis2;
    BITFIELD bKForceFrameUpdate:1 GCC_PACK(4);
    FLOAT KForceThreshold GCC_PACK(4);
    DECLARE_FUNCTION(execKGetConstraintTorque);
    DECLARE_FUNCTION(execKGetConstraintForce);
    DECLARE_FUNCTION(execKUpdateConstraintParams);
    void eventKForceExceed(FLOAT forceMag)
    {
        AKConstraint_eventKForceExceed_Parms Parms;
        Parms.forceMag=forceMag;
        ProcessEvent(FindFunctionChecked(ENGINE_KForceExceed),&Parms);
    }
    DECLARE_CLASS(AKConstraint,AKActor,0,Engine)
#ifdef WITH_KARMA
    virtual MdtConstraintID getKConstraint() const;
    virtual McdModelID getKModel() const;

	virtual void physKarma(FLOAT DeltaTime);

	virtual void PostEditChange();
	virtual void PostEditMove();

    virtual void KUpdateConstraintParams();
	
	virtual void CheckForErrors(); // used for checking that this constraint is valid buring map build
	virtual void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
	virtual UBOOL CheckOwnerUpdated();

	virtual void preKarmaStep(FLOAT DeltaTime) {};
	virtual void postKarmaStep() {};
#endif
};


class ENGINE_API AKCarWheelJoint : public AKConstraint
{
public:
    FLOAT KSteerAngle GCC_PACK(4);
    FLOAT KProportionalGap;
    FLOAT KMaxSteerTorque;
    FLOAT KMaxSteerSpeed;
    BITFIELD bKSteeringLocked:1 GCC_PACK(4);
    FLOAT KMotorTorque GCC_PACK(4);
    FLOAT KMaxSpeed;
    FLOAT KBraking;
    FLOAT KSuspLowLimit;
    FLOAT KSuspHighLimit;
    FLOAT KSuspStiffness;
    FLOAT KSuspDamping;
    FLOAT KSuspRef;
    FLOAT KWheelHeight;
    DECLARE_CLASS(AKCarWheelJoint,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
	virtual void preKarmaStep(FLOAT DeltaTime);
#endif
};


class ENGINE_API AKConeLimit : public AKConstraint
{
public:
    FLOAT KHalfAngle GCC_PACK(4);
    FLOAT KStiffness;
    FLOAT KDamping;
    DECLARE_CLASS(AKConeLimit,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
#endif
};

enum EHingeType
{
    HT_Normal               =0,
    HT_Springy              =1,
    HT_Motor                =2,
    HT_Controlled           =3,
    HT_MAX                  =4,
};

class ENGINE_API AKHinge : public AKConstraint
{
public:
    BYTE KHingeType GCC_PACK(4);
    FLOAT KStiffness GCC_PACK(4);
    FLOAT KDamping;
    FLOAT KDesiredAngVel;
    FLOAT KMaxTorque;
    FLOAT KDesiredAngle;
    FLOAT KProportionalGap;
    FLOAT KAltDesiredAngle;
    BITFIELD KUseAltDesired:1 GCC_PACK(4);
    FLOAT KCurrentAngle GCC_PACK(4);
    DECLARE_CLASS(AKHinge,AKConstraint,0,Engine)
#ifdef WITH_KARMA
    virtual void KUpdateConstraintParams();
	virtual void preKarmaStep(FLOAT DeltaTime);
#endif
};


class ENGINE_API AKBSJoint : public AKConstraint
{
public:
    DECLARE_CLASS(AKBSJoint,AKConstraint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKBSJoint)
};

enum EWeatherType
{
    WT_Rain                 =0,
    WT_Snow                 =1,
    WT_Dust                 =2,
    WT_MAX                  =3,
};
struct ENGINE_API FWeatherPcl
{
    FVector pos GCC_PACK(4);
    FVector Vel;
    FLOAT Life;
    FLOAT Size;
    FLOAT HitTime;
    FLOAT InvLifeSpan;
    FLOAT DistAtten;
    BYTE frame;
    BYTE Dummy1;
    BYTE Visible;
    BYTE Dummy2;
};


class ENGINE_API AxWeatherEffect : public AActor
{
public:
    BYTE WeatherType GCC_PACK(4);
    INT numParticles GCC_PACK(4);
    INT numActive;
    FBox Box;
    FVector eyePos;
    FVector eyeDir;
    FVector spawnOrigin;
    FVector eyeMoveVec;
    FLOAT eyeVel;
    FLOAT deviation;
    FLOAT maxPclEyeDist;
    FLOAT numCols;
    FLOAT numRows;
    FLOAT numFrames;
    FLOAT texU;
    FLOAT texV;
    BITFIELD noReference:1 GCC_PACK(4);
    FVector spawnVecU GCC_PACK(4);
    FVector spawnVecV;
    FVector spawnVel;
    FRangeVector Position;
    FRange Speed;
    FRange Life;
    FRange Size;
    FRange EyeSizeClamp;
    BITFIELD bForceAffected:1 GCC_PACK(4);
    TArrayNoInit<FWeatherPcl> pcl GCC_PACK(4);
    TArrayNoInit<class AVolume*> pclBlockers;
    DECLARE_CLASS(AxWeatherEffect,AActor,0,Engine)
    #include "AxWeatherEffect.h"
};

enum EProcMeshType
{
    MT_Water                =0,
    MT_Deform               =1,
    MT_MAX                  =2,
};
struct ENGINE_API FProcMeshVertex
{
    FVector Position GCC_PACK(4);
    FVector Normal;
    FColor Color;
    FLOAT U;
    FLOAT V;
};


class ENGINE_API AxProcMesh : public AActor
{
public:
    TArrayNoInit<FProcMeshVertex> Vertices GCC_PACK(4);
    TArrayNoInit<INT> SectionOffsets;
    FLOAT Dampening;
    FRange DampeningRange;
    FRange MovementClamp;
    FRange ForceClamp;
    FLOAT ForceAttenuation;
    FLOAT Tension;
    FLOAT RestTension;
    BITFIELD CheckCollision:1 GCC_PACK(4);
    FLOAT Noise GCC_PACK(4);
    FRange NoiseForce;
    FRange NoiseTimer;
    FLOAT NoiseCounter;
    BYTE ProcType;
    BITFIELD bForceAffected:1 GCC_PACK(4);
    BITFIELD bRigidEdges:1;
    PTRINT pProcData GCC_PACK(4);
    class UClass* HitEffect;
    class UClass* BigHitEffect;
    FLOAT BigMomentumThreshold;
    FLOAT BigTouchThreshold;
    FLOAT ShootStrength;
    FLOAT TouchStrength;
    FLOAT InfluenceRadius;
    DECLARE_FUNCTION(execProcPling);
    DECLARE_CLASS(AxProcMesh,AActor,0,Engine)
    #include "AxProcMesh.h"
};


class ENGINE_API AxPickUpBase : public AActor
{
public:
    class UClass* PowerUp GCC_PACK(4);
    FLOAT SpawnHeight;
    class UClass* SpiralEmitter;
    FLOAT ExtraPathCost;
    class APickup* myPickUp;
    class AEmitter* myEmitter;
    class AInventorySpot* myMarker;
    BITFIELD bDelayedSpawn:1 GCC_PACK(4);
    class UStaticMesh* NewStaticMesh GCC_PACK(4);
    FVector NewPrePivot;
    FLOAT NewDrawScale;
    DECLARE_CLASS(AxPickUpBase,AActor,0,Engine)
    #include "AxPickUpBase.h"
};

enum EAttenFunc
{
    ATF_LerpInOut           =0,
    ATF_ExpInOut            =1,
    ATF_SmoothStep          =2,
    ATF_Pulse               =3,
    ATF_Random              =4,
    ATF_None                =5,
    ATF_MAX                 =6,
};
enum ExSpawningTypes
{
    ST_Sphere               =0,
    ST_Line                 =1,
    ST_Disc                 =2,
    ST_Cylinder             =3,
    ST_AimedSphere          =4,
    ST_StaticMesh           =5,
    ST_Explode              =6,
    ST_ExplodeRing          =7,
    ST_OwnerSkeleton        =8,
    ST_Test                 =9,
    ST_MAX                  =10,
};
enum ExParticleTypes
{
    PT_Sprite               =0,
    PT_Stream               =1,
    PT_Line                 =2,
    PT_Disc                 =3,
    PT_Mesh                 =4,
    PT_Branch               =5,
    PT_Beam                 =6,
    PT_MAX                  =7,
};

struct AxEmitter_eventPreSpawned_Parms
{
};
struct AxEmitter_eventCollisionSound_Parms
{
};
class ENGINE_API AxEmitter : public AActor
{
public:
    BYTE mParticleType GCC_PACK(4);
    BYTE mSpawningType;
    BITFIELD mRegen:1 GCC_PACK(4);
    BITFIELD mRegenPause:1;
    FLOAT mRegenOnTime[2] GCC_PACK(4);
    FLOAT mRegenOffTime[2];
    INT mStartParticles;
    INT mMaxParticles;
    FLOAT mDelayRange[2];
    FLOAT mLifeRange[2];
    FLOAT mRegenRange[2];
    FLOAT mRegenDist;
    FName mSourceActor;
    FName mChildName;
    class AxEmitter* mChildEmitter;
    class AStaticMeshActor* SourceStaticMesh;
    BITFIELD bSuspendWhenNotVisible:1 GCC_PACK(4);
    BITFIELD mDistanceAtten:1;
    FVector mDirDev GCC_PACK(4);
    FVector mPosDev;
    FVector mSpawnVecA;
    FVector mSpawnVecB;
    FLOAT mSpeedRange[2];
    BITFIELD mPosRelative:1 GCC_PACK(4);
    FLOAT mMassRange[2] GCC_PACK(4);
    FLOAT mAirResistance;
    BITFIELD mCollision:1 GCC_PACK(4);
    FLOAT mOwnerVelocityFactor GCC_PACK(4);
    BITFIELD mRandOrient:1 GCC_PACK(4);
    FLOAT mSpinRange[2] GCC_PACK(4);
    FLOAT mSizeRange[2];
    FLOAT mGrowthRate;
    FColor mColorRange[2];
    BITFIELD mAttenuate:1 GCC_PACK(4);
    FLOAT mAttenKa GCC_PACK(4);
    FLOAT mAttenKb;
    BYTE mAttenFunc;
    INT mpAttenFunc GCC_PACK(4);
    BITFIELD mRandTextures:1 GCC_PACK(4);
    BITFIELD mTileAnimation:1;
    INT mNumTileColumns GCC_PACK(4);
    INT mNumTileRows;
    BITFIELD mUseMeshNodes:1 GCC_PACK(4);
    BITFIELD mRandMeshes:1;
    class UStaticMesh* mMeshNodes[8] GCC_PACK(4);
    class UTexture* mPosColorMapXY;
    class UTexture* mPosColorMapXZ;
    class UTexture* mLifeColorMap;
    FLOAT springK;
    FLOAT springD;
    FLOAT springMaxStretch;
    FLOAT springMaxCompress;
    FLOAT mColElasticity;
    FLOAT mAttraction;
    BITFIELD mColMakeSound:1 GCC_PACK(4);
    FLOAT mWaveFrequency GCC_PACK(4);
    FLOAT mWaveAmplitude;
    FLOAT mWaveShift;
    FLOAT mBendStrength;
    BITFIELD mWaveLockEnd:1 GCC_PACK(4);
    BITFIELD bForceAffected:1;
    INT SystemHandle GCC_PACK(4);
    INT Expire;
    PTRINT mpParticles;
    INT mNumActivePcl;
    PTRINT mpIterator;
    INT mbSpinningNodes;
    FVector mLastPos;
    FVector mLastVector;
    FLOAT mTime;
    FLOAT mT;
    FLOAT mRegenBias;
    FLOAT mRegenTimer;
    FLOAT mPauseTimer;
    FBox mBounds;
    FPlane mSphere;
    FVector mDir;
    INT mNumUpdates;
    INT mAtLeastOneFrame;
    INT mRenderableVerts;
    FLOAT mTexU;
    FLOAT mTexV;
    FLOAT mTotalTiles;
    FLOAT mInvTileCols;
    PTRINT mpSprings;
    INT mNumSprings;
    FLOAT mWavePhaseA;
    FLOAT mWavePhaseB;
    BITFIELD blockOnNet:1 GCC_PACK(4);
    BITFIELD bCallPreSpawn:1;
    INT mHeadIndex GCC_PACK(4);
    void eventPreSpawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreSpawned),NULL);
    }
    void eventCollisionSound()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_CollisionSound),NULL);
    }
    DECLARE_CLASS(AxEmitter,AActor,0,Engine)
    #include "AxEmitter.h"
};

enum ESkelLocationUpdate
{
    PTSU_None               =0,
    PTSU_SpawnOffset        =1,
    PTSU_Location           =2,
    PTSU_MAX                =3,
};
enum EParticleMeshSpawning
{
    PTMS_None               =0,
    PTMS_Linear             =1,
    PTMS_Random             =2,
    PTMS_MAX                =3,
};
enum EParticleCollisionSound
{
    PTSC_None               =0,
    PTSC_LinearGlobal       =1,
    PTSC_LinearLocal        =2,
    PTSC_Random             =3,
    PTSC_MAX                =4,
};
enum EParticleEffectAxis
{
    PTEA_NegativeX          =0,
    PTEA_PositiveZ          =1,
    PTEA_MAX                =2,
};
enum EParticleStartLocationShape
{
    PTLS_Box                =0,
    PTLS_Sphere             =1,
    PTLS_Polar              =2,
    PTLS_All                =3,
    PTLS_MAX                =4,
};
enum EParticleVelocityDirection
{
    PTVD_None               =0,
    PTVD_StartPositionAndOwner=1,
    PTVD_OwnerAndStartPosition=2,
    PTVD_AddRadial          =3,
    PTVD_MAX                =4,
};
enum EParticleRotationSource
{
    PTRS_None               =0,
    PTRS_Actor              =1,
    PTRS_Offset             =2,
    PTRS_Normal             =3,
    PTRS_MAX                =4,
};
enum EParticleCoordinateSystem
{
    PTCS_Independent        =0,
    PTCS_Relative           =1,
    PTCS_Absolute           =2,
    PTCS_MAX                =3,
};
enum EParticleDrawStyle
{
    PTDS_Regular            =0,
    PTDS_AlphaBlend         =1,
    PTDS_Modulated          =2,
    PTDS_Translucent        =3,
    PTDS_AlphaModulate_MightNotFogCorrectly=4,
    PTDS_Darken             =5,
    PTDS_Brighten           =6,
    PTDS_MAX                =7,
};
enum EBlendMode
{
    BM_MODULATE             =0,
    BM_MODULATE2X           =1,
    BM_MODULATE4X           =2,
    BM_ADD                  =3,
    BM_ADDSIGNED            =4,
    BM_ADDSIGNED2X          =5,
    BM_SUBTRACT             =6,
    BM_ADDSMOOTH            =7,
    BM_BLENDDIFFUSEALPHA    =8,
    BM_BLENDTEXTUREALPHA    =9,
    BM_BLENDFACTORALPHA     =10,
    BM_BLENDTEXTUREALPHAPM  =11,
    BM_BLENDCURRENTALPHA    =12,
    BM_PREMODULATE          =13,
    BM_MODULATEALPHA_ADDCOLOR=14,
    BM_MODULATEINVALPHA_ADDCOLOR=15,
    BM_MODULATEINVCOLOR_ADDALPHA=16,
    BM_HACK                 =17,
    BM_MAX                  =18,
};

class ENGINE_API UParticleEmitter : public UObject
{
public:
    BITFIELD UseCollision:1 GCC_PACK(4);
    BITFIELD UseCollisionPlanes:1;
    BITFIELD UseMaxCollisions:1;
    BITFIELD UseSpawnedVelocityScale:1;
    BITFIELD UseColorScale:1;
    BITFIELD FadeOut:1;
    BITFIELD FadeIn:1;
    BITFIELD UseActorForces:1;
    BITFIELD ResetAfterChange:1;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD Backup_Disabled:1;
    BITFIELD DisableFogging:1;
    BITFIELD VelocityFromMesh:1;
    BITFIELD UniformMeshScale:1;
    BITFIELD UniformVelocityScale:1;
    BITFIELD UseColorFromMesh:1;
    BITFIELD SpawnOnlyInDirectionOfNormal:1;
    BITFIELD AlphaTest:1;
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BITFIELD UseRevolution:1;
    BITFIELD UseRevolutionScale:1;
    BITFIELD SpinParticles:1;
    BITFIELD DampRotation:1;
    BITFIELD UseSizeScale:1;
    BITFIELD UseAbsoluteTimeForSizeScale:1;
    BITFIELD UseRegularSizeScale:1;
    BITFIELD UniformSize:1;
    BITFIELD DetermineVelocityByLocationDifference:1;
    BITFIELD ScaleSizeXByVelocity:1;
    BITFIELD ScaleSizeYByVelocity:1;
    BITFIELD ScaleSizeZByVelocity:1;
    BITFIELD AutomaticInitialSpawning:1;
    BITFIELD BlendBetweenSubdivisions:1;
    BITFIELD UseSubdivisionScale:1;
    BITFIELD UseRandomSubdivision:1;
    BITFIELD TriggerDisabled:1;
    BITFIELD ResetOnTrigger:1;
    BITFIELD UseVelocityScale:1;
    BITFIELD AddVelocityFromOwner:1;
    FLOAT LowDetailFactor GCC_PACK(4);
    FVector Acceleration;
    FVector ExtentMultiplier;
    FRangeVector DampingFactorRange;
    TArrayNoInit<FPlane> CollisionPlanes;
    FRange MaxCollisions;
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    TArrayNoInit<FParticleColorScale> ColorScale;
    FLOAT ColorScaleRepeats;
    FRangeVector ColorMultiplierRange;
    FLOAT Opacity;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    FPlane FadeInFactor;
    FLOAT FadeInEndTime;
    BYTE CoordinateSystem;
    INT MaxParticles GCC_PACK(4);
    BYTE EffectAxis;
    FRange AutoResetTimeRange GCC_PACK(4);
    FStringNoInit Name;
    BYTE DetailMode;
    FVector StartLocationOffset GCC_PACK(4);
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange GCC_PACK(4);
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    class UStaticMesh* MeshSpawningStaticMesh;
    BYTE MeshSpawning;
    FRangeVector VelocityScaleRange GCC_PACK(4);
    FRangeVector MeshScaleRange;
    FVector MeshNormal;
    FRange MeshNormalThresholdRange;
    INT AlphaRef;
    FRangeVector RevolutionCenterOffsetRange;
    FRangeVector RevolutionsPerSecondRange;
    TArrayNoInit<FParticleRevolutionScale> RevolutionScale;
    FLOAT RevolutionScaleRepeats;
    BYTE UseRotationFrom;
    FRotator RotationOffset GCC_PACK(4);
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    FRangeVector RotationDampingFactorRange;
    FVector RotationNormal;
    TArrayNoInit<FParticleTimeScale> SizeScale;
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    FVector ScaleSizeByVelocityMultiplier;
    FLOAT ScaleSizeByVelocityMax;
    BYTE UseSkeletalLocationAs;
    class AActor* SkeletalMeshActor GCC_PACK(4);
    FVector SkeletalScale;
    FRange RelativeBoneIndexRange;
    TArrayNoInit<FParticleSound> Sounds;
    BYTE SpawningSound;
    FRange SpawningSoundIndex GCC_PACK(4);
    FRange SpawningSoundProbability;
    BYTE CollisionSound;
    FRange CollisionSoundIndex GCC_PACK(4);
    FRange CollisionSoundProbability;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    BYTE DrawStyle;
    class UTexture* Texture GCC_PACK(4);
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    TArrayNoInit<FLOAT> SubdivisionScale;
    INT SubdivisionStart;
    INT SubdivisionEnd;
    FLOAT SecondsBeforeInactive;
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    FRange SpawnOnTriggerRange;
    FLOAT SpawnOnTriggerPPS;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    BITFIELD RotateVelocityLossRange:1 GCC_PACK(4);
    INT AddVelocityFromOtherEmitter GCC_PACK(4);
    FRangeVector AddVelocityMultiplierRange;
    BYTE GetVelocityDirectionFrom;
    TArrayNoInit<FParticleVelocityScale> VelocityScale GCC_PACK(4);
    FLOAT VelocityScaleRepeats;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class AEmitter* Owner;
    BITFIELD Initialized:1 GCC_PACK(4);
    BITFIELD Inactive:1;
    BITFIELD RealDisableFogging:1;
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    FLOAT InactiveTime GCC_PACK(4);
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    INT OtherIndex;
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    INT CurrentSpawningSoundIndex;
    INT CurrentMeshSpawningIndex;
    FLOAT MaxSizeScale;
    INT KillPending;
    INT DeferredParticles;
    FVector RealMeshNormal;
    TArrayNoInit<FVector> MeshVertsAndNormals;
    INT CurrentSpawnOnTrigger;
    INT RenderableParticles;
    FRangeVector RealVelocityLossRange;
    DECLARE_FUNCTION(execReset);
    DECLARE_FUNCTION(execTrigger);
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
    #include "UParticleEmitter.h"
};

enum ETrailLocation
{
    PTTL_AttachedToParticle =0,
    PTTL_FollowEmitter      =1,
    PTTL_MAX                =2,
};
enum ETrailShadeType
{
    PTTST_None              =0,
    PTTST_RandomStatic      =1,
    PTTST_RandomDynamic     =2,
    PTTST_Linear            =3,
    PTTST_PointLife         =4,
    PTTST_MAX               =5,
};

class ENGINE_API UTrailEmitter : public UParticleEmitter
{
public:
    BYTE TrailShadeType GCC_PACK(4);
    BYTE TrailLocation;
    INT MaxPointsPerTrail GCC_PACK(4);
    FLOAT DistanceThreshold;
    BITFIELD UseCrossedSheets:1 GCC_PACK(4);
    INT MaxTrailTwistAngle GCC_PACK(4);
    FLOAT PointLifeTime;
    TArrayNoInit<FParticleTrailData> TrailData;
    TArrayNoInit<FParticleTrailInfo> TrailInfo;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_FUNCTION(execResetTrail);
    DECLARE_CLASS(UTrailEmitter,UParticleEmitter,0,Engine)
    #include "UTrailEmitter.h"
};

enum EParticleDirectionUsage
{
    PTDU_None               =0,
    PTDU_Up                 =1,
    PTDU_Right              =2,
    PTDU_Forward            =3,
    PTDU_Normal             =4,
    PTDU_UpAndNormal        =5,
    PTDU_RightAndNormal     =6,
    PTDU_Scale              =7,
    PTDU_MAX                =8,
};

class ENGINE_API USpriteEmitter : public UParticleEmitter
{
public:
    BYTE UseDirectionAs GCC_PACK(4);
    FVector ProjectionNormal GCC_PACK(4);
    FVector RealProjectionNormal;
    DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
    #include "USpriteEmitter.h"
};


class ENGINE_API USparkEmitter : public UParticleEmitter
{
public:
    FRange LineSegmentsRange GCC_PACK(4);
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
    #include "USparkEmitter.h"
};


class ENGINE_API UMeshEmitter : public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh GCC_PACK(4);
    BITFIELD UseMeshBlendMode:1 GCC_PACK(4);
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    FVector MeshExtent GCC_PACK(4);
    DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
    #include "UMeshEmitter.h"
};

enum EBeamEndPointType
{
    PTEP_Velocity           =0,
    PTEP_Distance           =1,
    PTEP_Offset             =2,
    PTEP_Actor              =3,
    PTEP_TraceOffset        =4,
    PTEP_OffsetAsAbsolute   =5,
    PTEP_DynamicDistance    =6,
    PTEP_MAX                =7,
};

class ENGINE_API UBeamEmitter : public UParticleEmitter
{
public:
    FRange BeamDistanceRange GCC_PACK(4);
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale GCC_PACK(4);
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    BITFIELD TriggerEndpoint:1 GCC_PACK(4);
    FRangeVector LowFrequencyNoiseRange GCC_PACK(4);
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1 GCC_PACK(4);
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    FRangeVector DynamicHFNoiseRange GCC_PACK(4);
    FRange DynamicHFNoisePointsRange;
    FRange DynamicTimeBetweenNoiseRange;
    BITFIELD UseBranching:1 GCC_PACK(4);
    FRange BranchProbability GCC_PACK(4);
    FRange BranchHFPointsRange;
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1 GCC_PACK(4);
    INT SheetsUsed GCC_PACK(4);
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    FLOAT TimeSinceLastDynamicNoise;
    DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
    #include "UBeamEmitter.h"
};


class ENGINE_API UShadowBitmapMaterial : public UBitmapMaterial
{
public:
    PTRINT TextureInterfaces[2] GCC_PACK(4);
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    FLOAT LightFOV;
    BITFIELD Dirty:1 GCC_PACK(4);
    BITFIELD Invalid:1;
    BITFIELD bBlobShadow:1;
    FLOAT CullDistance GCC_PACK(4);
    BYTE ShadowDarkness;
    class UBitmapMaterial* BlobShadow GCC_PACK(4);
    DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
	virtual void Destroy();

	virtual FBaseTexture* GetRenderInterface();
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
};


class ENGINE_API UScriptedTexture : public UBitmapMaterial
{
public:
    PTRINT RenderTarget GCC_PACK(4);
    class UViewport* RenderViewport;
    class AActor* Client;
    INT Revision;
    INT OldRevision;
    INT Invalid;
    DECLARE_FUNCTION(execDrawPortal);
    DECLARE_FUNCTION(execDrawTile);
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execDrawText);
    DECLARE_FUNCTION(execSetSize);
    DECLARE_CLASS(UScriptedTexture,UBitmapMaterial,0,Engine)
	void Render(FRenderInterface* RI);

	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
	virtual FBaseTexture* GetRenderInterface();
	virtual void Destroy();
	virtual void PostEditChange();
};

struct ENGINE_API FTerrainMaterialLayer
{
    class UMaterial* Texture GCC_PACK(4);
    class UBitmapMaterial* AlphaWeight;
    FMatrix TextureMatrix;
};


class ENGINE_API UTerrainMaterial : public URenderedMaterial
{
public:
    TArrayNoInit<FTerrainMaterialLayer> Layers GCC_PACK(4);
    BYTE RenderMethod;
    BITFIELD FirstPass:1 GCC_PACK(4);
    DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)
	virtual UMaterial* CheckFallback();
	virtual UBOOL HasFallback();
};


class ENGINE_API UProjectorMaterial : public URenderedMaterial
{
public:
    class UBitmapMaterial* Gradient GCC_PACK(4);
    class UMaterial* Projected;
    class UMaterial* BaseMaterial;
    BYTE BaseMaterialBlending;
    BYTE FrameBufferBlending;
    FMatrix Matrix GCC_PACK(4);
    FMatrix GradientMatrix;
    BITFIELD bProjected:1 GCC_PACK(4);
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bStaticProjector:1;
    BITFIELD bTwoSided:1;
    DECLARE_CLASS(UProjectorMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UProjectorMaterial)
};


class ENGINE_API UParticleMaterial : public URenderedMaterial
{
public:
    INT ParticleBlending GCC_PACK(4);
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    BITFIELD AcceptsProjectors:1 GCC_PACK(4);
    INT NumProjectors GCC_PACK(4);
    FParticleProjectorInfo Projectors[8];
    DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};


class ENGINE_API UVertexColor : public URenderedMaterial
{
public:
    DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};


class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return FColor(0,0,0,0); }
};

enum EColorFadeType
{
    FC_Linear               =0,
    FC_Sinusoidal           =1,
    FC_MAX                  =2,
};

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    FColor Color1 GCC_PACK(4);
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds);
};


class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color GCC_PACK(4);
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return Color; }
};

enum EOutputBlending
{
    OB_Normal               =0,
    OB_Masked               =1,
    OB_Modulate             =2,
    OB_Translucent          =3,
    OB_Invisible            =4,
    OB_Brighten             =5,
    OB_Darken               =6,
    OB_MAX                  =7,
};

class ENGINE_API UShader : public URenderedMaterial
{
public:
    class UMaterial* Diffuse GCC_PACK(4);
    class UMaterial* Opacity;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    class UMaterial* Detail;
    FLOAT DetailScale;
    BYTE OutputBlending;
    BITFIELD TwoSided:1 GCC_PACK(4);
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD PerformLightingOnSpecularPass:1;
    BITFIELD ModulateSpecular2X:1;
    DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
    #include "UShader.h"
};


class ENGINE_API UModifier : public UMaterial
{
public:
    class UMaterial* Material GCC_PACK(4);
    DECLARE_CLASS(UModifier,UMaterial,0,Engine)
    #include "UModifier.h"
};


class ENGINE_API UOpacityModifier : public UModifier
{
public:
    class UMaterial* Opacity GCC_PACK(4);
    BITFIELD bOverrideTexModifier:1 GCC_PACK(4);
    DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};

enum EMaterialSequenceTriggerActon
{
    MSTA_Ignore             =0,
    MSTA_Reset              =1,
    MSTA_Pause              =2,
    MSTA_Stop               =3,
    MSTA_MAX                =4,
};
enum EMaterialSequenceAction
{
    MSA_ShowMaterial        =0,
    MSA_FadeToMaterial      =1,
    MSA_MAX                 =2,
};
struct ENGINE_API FMaterialSequenceItem
{
    class UMaterial* Material GCC_PACK(4);
    FLOAT Time;
    BYTE Action;
};


class ENGINE_API UMaterialSequence : public UModifier
{
public:
    TArrayNoInit<FMaterialSequenceItem> SequenceItems GCC_PACK(4);
    BYTE TriggerAction;
    BITFIELD Loop:1 GCC_PACK(4);
    BITFIELD Paused:1;
    FLOAT CurrentTime GCC_PACK(4);
    FLOAT LastTime;
    FLOAT TotalTime;
    DECLARE_CLASS(UMaterialSequence,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
	virtual void PreSetMaterial(FLOAT TimeSeconds);
	virtual void Serialize(FArchive& Ar);
};


class ENGINE_API UMaterialSwitch : public UModifier
{
public:
    INT Current GCC_PACK(4);
    TArrayNoInit<class UMaterial*> Materials;
    DECLARE_CLASS(UMaterialSwitch,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
};

enum EFrameBufferBlending
{
    FB_Overwrite            =0,
    FB_Modulate             =1,
    FB_AlphaBlend           =2,
    FB_AlphaModulate_MightNotFogCorrectly=3,
    FB_Translucent          =4,
    FB_Darken               =5,
    FB_Brighten             =6,
    FB_Invisible            =7,
    FB_MAX                  =8,
};

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending GCC_PACK(4);
    BITFIELD ZWrite:1 GCC_PACK(4);
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BYTE AlphaRef GCC_PACK(4);
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
    #include "UFinalBlend.h"
};

enum ETexCoordCount
{
    TCN_2DCoords            =0,
    TCN_3DCoords            =1,
    TCN_4DCoords            =2,
    TCN_MAX                 =3,
};
enum ETexCoordSrc
{
    TCS_Stream0             =0,
    TCS_Stream1             =1,
    TCS_Stream2             =2,
    TCS_Stream3             =3,
    TCS_Stream4             =4,
    TCS_Stream5             =5,
    TCS_Stream6             =6,
    TCS_Stream7             =7,
    TCS_WorldCoords         =8,
    TCS_CameraCoords        =9,
    TCS_WorldEnvMapCoords   =10,
    TCS_CameraEnvMapCoords  =11,
    TCS_ProjectorCoords     =12,
    TCS_NoChange            =13,
    TCS_MAX                 =14,
};

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource GCC_PACK(4);
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    INT texmodifier_dummy GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return NULL; }

	// Material interface.
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual BYTE RequiredUVStreams();
	virtual UBOOL RequiresNormal();
	virtual UBOOL GetValidated();
	virtual void SetValidated( UBOOL InValidated );
};


class ENGINE_API UTexCoordSource : public UTexModifier
{
public:
    INT SourceChannel GCC_PACK(4);
    DECLARE_CLASS(UTexCoordSource,UTexModifier,0,Engine)
	void PostEditChange();
};


class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix GCC_PACK(4);
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return &Matrix; }
};

enum ETexEnvMapType
{
    EM_WorldSpace           =0,
    EM_CameraSpace          =1,
    EM_MAX                  =2,
};

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType GCC_PACK(4);
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

enum ETexOscillationType
{
    OT_Pan                  =0,
    OT_Stretch              =1,
    OT_StretchRepeat        =2,
    OT_Jitter               =3,
    OT_MAX                  =4,
};

class ENGINE_API UTexOscillator : public UTexModifier
{
public:
    FLOAT UOscillationRate GCC_PACK(4);
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT UOffset GCC_PACK(4);
    FLOAT VOffset;
    FMatrix M;
    FLOAT LastSu;
    FLOAT LastSv;
    FLOAT CurrentUJitter;
    FLOAT CurrentVJitter;
    DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	// UObject interface
	virtual void PostEditChange();
};

enum ERetriggerAction
{
    RTA_Reverse             =0,
    RTA_Reset               =1,
    RTA_Ignore              =2,
    RTA_Retrigger           =3,
    RTA_MAX                 =4,
};

class ENGINE_API UTexOscillatorTriggered : public UTexOscillator
{
public:
    BYTE RetriggerAction GCC_PACK(4);
    FLOAT StopAfterPeriod GCC_PACK(4);
    FLOAT TriggeredTime;
    BITFIELD Reverse:1 GCC_PACK(4);
    BITFIELD Triggered:1;
    DECLARE_CLASS(UTexOscillatorTriggered,UTexOscillator,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

enum ETexRotationType
{
    TR_FixedRotation        =0,
    TR_ConstantlyRotating   =1,
    TR_OscillatingRotation  =2,
    TR_MAX                  =3,
};

class ENGINE_API UTexRotator : public UTexModifier
{
public:
    FMatrix M GCC_PACK(4);
    BYTE TexRotationType;
    FRotator Rotation GCC_PACK(4);
    BITFIELD ConstantRotation:1 GCC_PACK(4);
    FLOAT UOffset GCC_PACK(4);
    FLOAT VOffset;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	void PostLoad()
	{
		Super::PostLoad();
		//!!OLDVER
		if( ConstantRotation )
		{
			ConstantRotation = 0;
			TexRotationType = TR_ConstantlyRotating;
		}
	}
};


class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FMatrix M GCC_PACK(4);
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UVariableTexPanner : public UTexModifier
{
public:
    FRotator PanDirection GCC_PACK(4);
    FLOAT PanRate;
    FMatrix M;
    FLOAT LastTime;
    FLOAT PanOffset;
    DECLARE_CLASS(UVariableTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FRotator PanDirection GCC_PACK(4);
    FLOAT PanRate;
    FMatrix M;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UTexPannerTriggered : public UTexPanner
{
public:
    BYTE RetriggerAction GCC_PACK(4);
    FLOAT StopAfterPeriod GCC_PACK(4);
    FLOAT TriggeredTime;
    BITFIELD Reverse:1 GCC_PACK(4);
    BITFIELD Triggered:1;
    DECLARE_CLASS(UTexPannerTriggered,UTexPanner,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};


class ENGINE_API UColorModifier : public UModifier
{
public:
    FColor Color GCC_PACK(4);
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

enum EAlphaOperation
{
    AO_Use_Mask             =0,
    AO_Multiply             =1,
    AO_Add                  =2,
    AO_Use_Alpha_From_Material1=3,
    AO_Use_Alpha_From_Material2=4,
    AO_MAX                  =5,
};
enum EColorOperation
{
    CO_Use_Color_From_Material1=0,
    CO_Use_Color_From_Material2=1,
    CO_Multiply             =2,
    CO_Add                  =3,
    CO_Subtract             =4,
    CO_AlphaBlend_With_Mask =5,
    CO_Add_With_Mask_Modulation=6,
    CO_Use_Color_From_Mask  =7,
    CO_MAX                  =8,
};

class ENGINE_API UCombiner : public UMaterial
{
public:
    INT combiner_dummy GCC_PACK(4);
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterial* Material1 GCC_PACK(4);
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1 GCC_PACK(4);
    BITFIELD Modulate2X:1;
    BITFIELD Modulate4X:1;
    DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
    #include "UCombiner.h"
};

enum EVehicleSteerType
{
    VST_Fixed               =0,
    VST_Steered             =1,
    VST_Inverted            =2,
    VST_MAX                 =3,
};

class ENGINE_API USVehicleWheel : public UObject
{
public:
    FLOAT Steer GCC_PACK(4);
    FLOAT DriveForce;
    FLOAT LongFriction;
    FLOAT LatFriction;
    FLOAT LongSlip;
    FLOAT LatSlip;
    FLOAT ChassisTorque;
    BITFIELD bPoweredWheel:1 GCC_PACK(4);
    BITFIELD bHandbrakeWheel:1;
    BITFIELD bTrackWheel:1;
    BITFIELD bLeftTrack:1;
    BYTE SteerType GCC_PACK(4);
    FName BoneName GCC_PACK(4);
    BYTE BoneRollAxis;
    BYTE BoneSteerAxis;
    FVector BoneOffset GCC_PACK(4);
    FLOAT WheelRadius;
    FLOAT Softness;
    FLOAT PenScale;
    FLOAT PenOffset;
    FLOAT Restitution;
    FLOAT Adhesion;
    FLOAT WheelInertia;
    FLOAT SuspensionTravel;
    FLOAT SuspensionOffset;
    FLOAT HandbrakeSlipFactor;
    FLOAT HandbrakeFrictionFactor;
    FLOAT SuspensionMaxRenderTravel;
    FName SupportBoneName;
    BYTE SupportBoneAxis;
    FInterpCurve LongFrictionFunc GCC_PACK(4);
    FInterpCurve LatSlipFunc;
    FVector WheelPosition;
    FLOAT SupportPivotDistance;
    BITFIELD bWheelOnGround:1 GCC_PACK(4);
    FLOAT TireLoad GCC_PACK(4);
    FVector WheelDir;
    FVector WheelAxle;
    FLOAT SpinVel;
    FLOAT TrackVel;
    FLOAT SlipAngle;
    FLOAT SlipVel;
    FLOAT SuspensionPosition;
    FLOAT CurrentRotation;
    PTRINT KContact;
    DECLARE_CLASS(USVehicleWheel,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USVehicleWheel)
};


class ENGINE_API UAnimNotify : public UObject
{
public:
    INT Revision GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner ) {};
	// UObject interface.
	virtual void PostEditChange();
};


class ENGINE_API UAnimNotify_MatSubAction : public UAnimNotify
{
public:
    class UMatSubAction* SubAction GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_MatSubAction,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


struct UAnimNotify_Scripted_eventNotify_Parms
{
    class AActor* Owner;
};
class ENGINE_API UAnimNotify_Scripted : public UAnimNotify
{
public:
    void eventNotify(class AActor* Owner)
    {
        UAnimNotify_Scripted_eventNotify_Parms Parms;
        Parms.Owner=Owner;
        ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
    }
    DECLARE_CLASS(UAnimNotify_Scripted,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Script : public UAnimNotify
{
public:
    FName NotifyName GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_Script,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Sound : public UAnimNotify
{
public:
    class USound* Sound GCC_PACK(4);
    FLOAT Volume;
    INT Radius;
    DECLARE_CLASS(UAnimNotify_Sound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_DestroyEffect : public UAnimNotify
{
public:
    FName DestroyTag GCC_PACK(4);
    BITFIELD bExpireParticles:1 GCC_PACK(4);
    DECLARE_CLASS(UAnimNotify_DestroyEffect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UAnimNotify_Effect : public UAnimNotify
{
public:
    class UClass* EffectClass GCC_PACK(4);
    FName Bone;
    FVector OffsetLocation;
    FRotator OffsetRotation;
    BITFIELD Attach:1 GCC_PACK(4);
    FName Tag GCC_PACK(4);
    FLOAT DrawScale;
    FVector DrawScale3D;
    class AActor* LastSpawnedEffect;
    DECLARE_CLASS(UAnimNotify_Effect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};


class ENGINE_API UMatObject : public UObject
{
public:
    DECLARE_CLASS(UMatObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatObject)
};

enum ESAStatus
{
    SASTATUS_Waiting        =0,
    SASTATUS_Running        =1,
    SASTATUS_Ending         =2,
    SASTATUS_Expired        =3,
    SASTATUS_MAX            =4,
};

class ENGINE_API UMatSubAction : public UMatObject
{
public:
    FLOAT Delay GCC_PACK(4);
    FLOAT Duration;
    class UTexture* Icon;
    BYTE Status;
    FStringNoInit Desc GCC_PACK(4);
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatSubAction,UMatObject,0,Engine)
    #include "UMatSubAction.h"
};


class ENGINE_API USubActionSubTitle : public UMatSubAction
{
public:
    BYTE SubTitleMode GCC_PACK(4);
    DECLARE_CLASS(USubActionSubTitle,UMatSubAction,0,Engine)
    #include "USubActionSubTitle.h"
};


class ENGINE_API USubActionSceneSpeed : public UMatSubAction
{
public:
    FRange SceneSpeed GCC_PACK(4);
    DECLARE_CLASS(USubActionSceneSpeed,UMatSubAction,0,Engine)
    #include "USubActionSceneSpeed.h"
};


class ENGINE_API USubActionGameSpeed : public UMatSubAction
{
public:
    FRange GameSpeed GCC_PACK(4);
    DECLARE_CLASS(USubActionGameSpeed,UMatSubAction,0,Engine)
    #include "USubActionGameSpeed.h"
};


class ENGINE_API USubActionOrientation : public UMatSubAction
{
public:
    FOrientation CamOrientation GCC_PACK(4);
    DECLARE_CLASS(USubActionOrientation,UMatSubAction,0,Engine)
    #include "USubActionOrientation.h"
};


class ENGINE_API USubActionCameraShake : public UMatSubAction
{
public:
    FRangeVector Shake GCC_PACK(4);
    DECLARE_CLASS(USubActionCameraShake,UMatSubAction,0,Engine)
    #include "USubActionCameraShake.h"
};


class ENGINE_API USubActionFOV : public UMatSubAction
{
public:
    FRange FOV GCC_PACK(4);
    DECLARE_CLASS(USubActionFOV,UMatSubAction,0,Engine)
    #include "USubActionFOV.h"
};


class ENGINE_API USubActionTrigger : public UMatSubAction
{
public:
    FName EventName GCC_PACK(4);
    DECLARE_CLASS(USubActionTrigger,UMatSubAction,0,Engine)
    #include "USubActionTrigger.h"
};


class ENGINE_API USubActionFade : public UMatSubAction
{
public:
    FColor FadeColor GCC_PACK(4);
    BITFIELD bFadeOut:1 GCC_PACK(4);
    DECLARE_CLASS(USubActionFade,UMatSubAction,0,Engine)
    #include "USubActionFade.h"
};


class ENGINE_API UMatAction : public UMatObject
{
public:
    class AInterpolationPoint* IntPoint GCC_PACK(4);
    FStringNoInit Comment;
    FLOAT Duration;
    TArrayNoInit<class UMatSubAction*> SubActions;
    BITFIELD bSmoothCorner:1 GCC_PACK(4);
    FVector StartControlPoint GCC_PACK(4);
    FVector EndControlPoint;
    BITFIELD bConstantPathVelocity:1 GCC_PACK(4);
    FLOAT PathVelocity GCC_PACK(4);
    FLOAT PathLength;
    TArrayNoInit<FVector> SampleLocations;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatAction,UMatObject,0,Engine)
    #include "UMatAction.h"
};


class ENGINE_API UActionPause : public UMatAction
{
public:
    DECLARE_CLASS(UActionPause,UMatAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionPause)
};

enum EPathStyle
{
    PATHSTYLE_Linear        =0,
    PATHSTYLE_Bezier        =1,
    PATHSTYLE_MAX           =2,
};

class ENGINE_API UActionMoveCamera : public UMatAction
{
public:
    BYTE PathStyle GCC_PACK(4);
    DECLARE_CLASS(UActionMoveCamera,UMatAction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionMoveCamera)
};

enum EMeshSectionMethod
{
    MSM_SmoothOnly          =0,
    MSM_RigidOnly           =1,
    MSM_Mixed               =2,
    MSM_SinglePiece         =3,
    MSM_ForcedRigid         =4,
    MSM_MAX                 =5,
};
enum EImpLightMode
{
    ILM_Unlit               =0,
    ILM_PseudoShaded        =1,
    ILM_Uniform             =2,
    ILM_MAX                 =3,
};
enum EImpDrawMode
{
    IDM_Normal              =0,
    IDM_Fading              =1,
    IDM_MAX                 =2,
};
enum EImpSpaceMode
{
    ISM_Sprite              =0,
    ISM_Fixed               =1,
    ISM_PivotVertical       =2,
    ISM_PivotHorizontal     =3,
    ISM_MAX                 =4,
};

class ENGINE_API UMeshObject : public UObject
{
public:
    DECLARE_CLASS(UMeshObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMeshObject)
};

enum EPlayInfoType
{
    PIT_Check               =0,
    PIT_Select              =1,
    PIT_Text                =2,
    PIT_Custom              =3,
    PIT_MAX                 =4,
};
struct ENGINE_API FPlayInfoData
{
    class UProperty* ThisProp GCC_PACK(4);
    class UClass* ClassFrom;
    FString SettingName;
    FString DisplayName;
    FString Description;
    FString Grouping;
    FString Data;
    FString ExtraPriv;
    FString Value;
    BYTE RenderType;
    BYTE SecLevel;
    BYTE Weight;
    BITFIELD bMPOnly:1 GCC_PACK(4);
    BITFIELD bAdvanced:1;
    BITFIELD bGlobal:1;
    BITFIELD bStruct:1;
    INT ArrayDim GCC_PACK(4);
};


class ENGINE_API UPlayInfo : public UObject
{
public:
    TArrayNoInit<FPlayInfoData> Settings GCC_PACK(4);
    TArrayNoInit<class UClass*> InfoClasses;
    TArrayNoInit<INT> ClassStack;
    TArrayNoInit<FString> Groups;
    FStringNoInit LastError;
    DECLARE_FUNCTION(execSort);
    DECLARE_FUNCTION(execFindIndex);
    DECLARE_FUNCTION(execGetSettings);
    DECLARE_FUNCTION(execStoreSetting);
    DECLARE_FUNCTION(execSaveSettings);
    DECLARE_FUNCTION(execAddSetting);
    DECLARE_FUNCTION(execPopClass);
    DECLARE_FUNCTION(execRemoveClass);
    DECLARE_FUNCTION(execAddClass);
    DECLARE_FUNCTION(execClear);
    DECLARE_CLASS(UPlayInfo,UObject,0,Engine)
	void ReturnFilteredSettings( TArray<FPlayInfoData>& PIData, const FString& GroupName );

	UBOOL NeedsValidation( const UProperty* Prop ) const;
	UBOOL ValidateRange( const UProperty* Prop, FString& NewVal, FString& DataRange ) const;
};

struct ENGINE_API FCrosshairItem
{
    FStringNoInit FriendlyName GCC_PACK(4);
    class UTexture* CrosshairTexture;
};


class ENGINE_API UCrosshairPack : public UObject
{
public:
    TArrayNoInit<FCrosshairItem> Crosshair GCC_PACK(4);
    DECLARE_CLASS(UCrosshairPack,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCrosshairPack)
};


class ENGINE_API UAdminBase : public UObject
{
public:
    BITFIELD bAdmin:1 GCC_PACK(4);
    class AAccessControl* Manager GCC_PACK(4);
    FStringNoInit Msg_PlayerList;
    FStringNoInit Msg_AllGameMaps;
    FStringNoInit Msg_AllMapLists;
    FStringNoInit Msg_MapRotationList;
    FStringNoInit Msg_NoMapsAdded;
    FStringNoInit Msg_AddedMapToList;
    FStringNoInit Msg_NoMapsRemoved;
    FStringNoInit Msg_RemovedFromList;
    FStringNoInit Msg_PlayerBanned;
    FStringNoInit Msg_SessionBanned;
    FStringNoInit Msg_PlayerKicked;
    FStringNoInit Msg_NextMapNotFound;
    FStringNoInit Msg_ChangingMapTo;
    FStringNoInit Msg_NoMapInRotation;
    FStringNoInit Msg_NoMapsFound;
    FStringNoInit Msg_MapIsInRotation;
    FStringNoInit Msg_MapNotInRotation;
    FStringNoInit Msg_UnknownParam;
    FStringNoInit Msg_NoParamsFound;
    FStringNoInit Msg_ParamModified;
    FStringNoInit Msg_ParamNotModified;
    FStringNoInit Msg_MapListAdded;
    FStringNoInit Msg_MapListRemoved;
    FStringNoInit Msg_MapIsNotInRotation;
    FStringNoInit Msg_EditingMapList;
    DECLARE_CLASS(UAdminBase,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAdminBase)
};


struct UPlayerInput_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
class ENGINE_API UPlayerInput : public UObject
{
public:
    BITFIELD bInvertMouse:1 GCC_PACK(4);
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bAdjustSampling:1;
    BYTE MouseSmoothingMode GCC_PACK(4);
    FLOAT MouseSmoothingStrength GCC_PACK(4);
    FLOAT MouseSensitivity;
    FLOAT MouseSamplingTime;
    FLOAT MouseAccelThreshold;
    FLOAT SmoothedMouse[2];
    FLOAT ZeroTime[2];
    FLOAT SamplingTime[2];
    FLOAT MaybeTime[2];
    FLOAT OldSamples[4];
    INT MouseSamples[2];
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
    BITFIELD bEnableDodging:1 GCC_PACK(4);
    void eventPlayerInput(FLOAT DeltaTime)
    {
        UPlayerInput_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};


class ENGINE_API UCheatManager : public UObject
{
public:
    FRotator LockedRotation GCC_PACK(4);
    BITFIELD bCheatsEnabled:1 GCC_PACK(4);
    DECLARE_CLASS(UCheatManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};


class ENGINE_API UI3DL2Listener : public UObject
{
public:
    FLOAT EnvironmentSize GCC_PACK(4);
    FLOAT EnvironmentDiffusion;
    INT Room;
    INT RoomHF;
    INT RoomLF;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT DecayLFRatio;
    INT Reflections;
    FLOAT ReflectionsDelay;
    FVector ReflectionsPan;
    INT Reverb;
    FLOAT ReverbDelay;
    FVector ReverbPan;
    FLOAT EchoTime;
    FLOAT EchoDepth;
    FLOAT ModulationTime;
    FLOAT ModulationDepth;
    FLOAT RoomRolloffFactor;
    FLOAT AirAbsorptionHF;
    FLOAT HFReference;
    FLOAT LFReference;
    BITFIELD bDecayTimeScale:1 GCC_PACK(4);
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bEchoTimeScale:1;
    BITFIELD bModulationTimeScale:1;
    BITFIELD bDecayHFLimit:1;
    INT Environment GCC_PACK(4);
    INT Updated;
    DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
    #include "UI3DL2Listener.h"
};

enum EPlayerPos
{
    POS_Auto                =0,
    POS_Defense             =1,
    POS_Offense             =2,
    POS_Roam                =3,
    POS_Supporting          =4,
    POS_MAX                 =5,
};
#define UCONST_NUM_LADDERS 6
#define UCONST_LINEUP_SIZE 4
#define UCONST_TEAM_SIZE 7
#define UCONST_NUM_POSITIONS 5

class ENGINE_API UGameProfile : public UObject
{
public:
    FStringNoInit PackageName GCC_PACK(4);
    INT ManifestIndex;
    FStringNoInit PositionName[5];
    BYTE PlayerPositions[7];
    TArrayNoInit<FString> PlayerTeam GCC_PACK(4);
    INT PlayerLineup[4];
    FStringNoInit EnemyTeam;
    FStringNoInit TeamName;
    FStringNoInit TeamSymbolName;
    FLOAT BaseDifficulty;
    FLOAT Difficulty;
    INT SalaryCap;
    FStringNoInit PlayerName;
    FStringNoInit PlayerCharacter;
    INT Kills;
    INT Goals;
    INT Deaths;
    INT Wins;
    INT Matches;
    INT ladderrung[6];
    FStringNoInit SpecialEvent;
    FStringNoInit GameLadderName;
    class UClass* GameLadder;
    INT CurrentLadder;
    INT CurrentMenuRung;
    class UObject* NextMatchObject;
    class UObject* ChampBorderObject;
    BITFIELD bInLadderGame:1 GCC_PACK(4);
    BITFIELD bWonMatch:1;
    DECLARE_CLASS(UGameProfile,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UGameProfile)
};


class ENGINE_API UManifest : public UObject
{
public:
    TArrayNoInit<FString> ManifestEntries GCC_PACK(4);
    DECLARE_CLASS(UManifest,UObject,0,Engine)
    #include "UManifest.h"
};


class ENGINE_API ULogEntry : public UObject
{
public:
    FStringNoInit DateTime GCC_PACK(4);
    FStringNoInit Entry;
    class ULogEntry* Next;
    DECLARE_CLASS(ULogEntry,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULogEntry)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title GCC_PACK(4);
    FStringNoInit Description;
    FStringNoInit LevelEnterText;
    FStringNoInit Author;
    FStringNoInit DecoTextName;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
    BITFIELD HideFromMenus:1 GCC_PACK(4);
    INT SinglePlayerTeamSize GCC_PACK(4);
    class UMaterial* Screenshot;
    FStringNoInit ExtraInfo;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    #include "ULevelSummary.h"
};


class ENGINE_API UReachSpec : public UObject
{
public:
    INT Distance GCC_PACK(4);
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    BITFIELD bForced:1 GCC_PACK(4);
    DECLARE_CLASS(UReachSpec,UObject,0,Engine)
    #include "UReachSpec.h"
};

struct ENGINE_API FSpeechReplacement
{
    TArrayNoInit<FString> MatchWords GCC_PACK(4);
    FStringNoInit ReplaceWord;
};


class ENGINE_API UTextToSpeechAlias : public UObject
{
public:
    TArrayNoInit<FSpeechReplacement> Aliases GCC_PACK(4);
    FStringNoInit RemoveCharacters;
    DECLARE_CLASS(UTextToSpeechAlias,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTextToSpeechAlias)
};

enum ESpreadStyle
{
    SS_None                 =0,
    SS_Random               =1,
    SS_Line                 =2,
    SS_Ring                 =3,
    SS_MAX                  =4,
};

struct UWeaponFire_eventModeHoldFire_Parms
{
};
struct UWeaponFire_eventModeDoFire_Parms
{
};
struct UWeaponFire_eventModeTick_Parms
{
    FLOAT dt;
};
struct UWeaponFire_eventSetInitialState_Parms
{
};
struct UWeaponFire_eventTimer_Parms
{
};
class ENGINE_API UWeaponFire : public UObject
{
public:
    BITFIELD bSplashDamage:1 GCC_PACK(4);
    BITFIELD bSplashJump:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bTossed:1;
    BITFIELD bLeadTarget:1;
    BITFIELD bInstantHit:1;
    BITFIELD bPawnRapidFireAnim:1;
    BITFIELD bReflective:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bFireOnRelease:1;
    BITFIELD bWaitForRelease:1;
    BITFIELD bModeExclusive:1;
    BITFIELD bIsFiring:1;
    BITFIELD bNowWaiting:1;
    BITFIELD bServerDelayStopFire:1;
    BITFIELD bServerDelayStartFire:1;
    BITFIELD bInstantStop:1;
    BITFIELD bAttachSmokeEmitter:1;
    BITFIELD bAttachFlashEmitter:1;
    FLOAT TimerInterval GCC_PACK(4);
    FLOAT NextTimerPop;
    class AWeapon* Weapon;
    class APawn* Instigator;
    class ALevelInfo* Level;
    class AActor* Owner;
    FLOAT NextFireTime;
    FLOAT PreFireTime;
    FLOAT MaxHoldTime;
    FLOAT HoldTime;
    INT ThisModeNum;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    FName PreFireAnim;
    FName FireAnim;
    FName FireLoopAnim;
    FName FireEndAnim;
    FName ReloadAnim;
    FLOAT PreFireAnimRate;
    FLOAT FireAnimRate;
    FLOAT FireLoopAnimRate;
    FLOAT FireEndAnimRate;
    FLOAT ReloadAnimRate;
    FLOAT TweenTime;
    class USound* FireSound;
    class USound* ReloadSound;
    class USound* NoAmmoSound;
    FStringNoInit FireForce;
    FStringNoInit ReloadForce;
    FStringNoInit NoAmmoForce;
    FLOAT FireRate;
    FLOAT ServerStartFireTime;
    class UClass* AmmoClass;
    INT AmmoPerFire;
    INT AmmoClipSize;
    FLOAT load;
    FVector ShakeRotMag;
    FVector ShakeRotRate;
    FLOAT ShakeRotTime;
    FVector ShakeOffsetMag;
    FVector ShakeOffsetRate;
    FLOAT ShakeOffsetTime;
    class UClass* ProjectileClass;
    FLOAT BotRefireRate;
    FLOAT WarnTargetPct;
    class UClass* FlashEmitterClass;
    class AxEmitter* FlashEmitter;
    class UClass* SmokeEmitterClass;
    class AxEmitter* SmokeEmitter;
    FLOAT aimerror;
    FLOAT Spread;
    BYTE SpreadStyle;
    INT FireCount GCC_PACK(4);
    FLOAT DamageAtten;
    FFireProperties SavedFireProperties;
    void eventModeHoldFire()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ModeHoldFire),NULL);
    }
    void eventModeDoFire()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ModeDoFire),NULL);
    }
    void eventModeTick(FLOAT dt)
    {
        UWeaponFire_eventModeTick_Parms Parms;
        Parms.dt=dt;
        ProcessEvent(FindFunctionChecked(ENGINE_ModeTick),&Parms);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    DECLARE_CLASS(UWeaponFire,UObject,0,Engine)
	UWeaponFire() {}
    void ModeTick( FLOAT DeltaSeconds );
};


class ENGINE_API UKarmaParamsCollision : public UObject
{
public:
    PTRINT KarmaData GCC_PACK(4);
    FLOAT KScale;
    FVector KScale3D;
    FVector KAcceleration;
    FLOAT KFriction;
    FLOAT KRestitution;
    FLOAT KImpactThreshold;
    BITFIELD bContactingLevel:1 GCC_PACK(4);
    FVector ContactRegionCenter GCC_PACK(4);
    FVector ContactRegionNormal;
    FLOAT ContactRegionRadius;
    FLOAT ContactRegionNormalForce;
    DECLARE_FUNCTION(execCalcContactRegion);
    DECLARE_CLASS(UKarmaParamsCollision,UObject,0,Engine)
#ifdef WITH_KARMA
	void CalcContactRegion();
#endif
};


class ENGINE_API UKarmaParams : public UKarmaParamsCollision
{
public:
    PTRINT KAng3 GCC_PACK(4);
    PTRINT KTriList;
    FLOAT KLastVel;
    FLOAT KMass;
    FLOAT KLinearDamping;
    FLOAT KAngularDamping;
    FLOAT KBuoyancy;
    BITFIELD KStartEnabled:1 GCC_PACK(4);
    FVector KStartLinVel GCC_PACK(4);
    FVector KStartAngVel;
    BITFIELD bKNonSphericalInertia:1 GCC_PACK(4);
    FLOAT KActorGravScale GCC_PACK(4);
    FLOAT KVelDropBelowThreshold;
    FLOAT KMaxSpeed;
    FLOAT KMaxAngularSpeed;
    BITFIELD bHighDetailOnly:1 GCC_PACK(4);
    BITFIELD bClientOnly:1;
    BITFIELD bKDoubleTickRate:1;
    BITFIELD bKStayUpright:1;
    BITFIELD bKAllowRotate:1;
    BITFIELD bDestroyOnSimError:1;
    BITFIELD bDestroyOnWorldPenetrate:1;
    BITFIELD bDoSafetime:1;
    FLOAT StayUprightStiffness GCC_PACK(4);
    FLOAT StayUprightDamping;
    TArrayNoInit<class AKRepulsor*> Repulsors;
    DECLARE_CLASS(UKarmaParams,UKarmaParamsCollision,0,Engine)
#ifdef WITH_KARMA
    void PostEditChange();
	void Destroy();
#endif
};


class ENGINE_API UKarmaParamsSkel : public UKarmaParams
{
public:
    FStringNoInit KSkeleton GCC_PACK(4);
    BITFIELD bKDoConvulsions:1 GCC_PACK(4);
    BITFIELD bRubbery:1;
    FRange KConvulseSpacing GCC_PACK(4);
    FVector KShotStart;
    FVector KShotEnd;
    FLOAT KShotStrength;
    BITFIELD bKImportantRagdoll:1 GCC_PACK(4);
    DECLARE_CLASS(UKarmaParamsSkel,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsSkel)
};


class ENGINE_API UKarmaParamsRBFull : public UKarmaParams
{
public:
    FLOAT KInertiaTensor[6] GCC_PACK(4);
    FVector KCOMOffset;
    DECLARE_CLASS(UKarmaParamsRBFull,UKarmaParams,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UKarmaParamsRBFull)
};

#endif

AUTOGENERATE_FUNCTION(UStreamTag,-1,execDumpTag);
AUTOGENERATE_FUNCTION(UStreamBase,-1,execIsCaseSensitive);
AUTOGENERATE_FUNCTION(UStreamBase,-1,execGetPathSeparator);
AUTOGENERATE_FUNCTION(UStreamBase,-1,execMultiplyEqual_StrStr);
AUTOGENERATE_FUNCTION(UStreamBase,-1,execMultiply_StrStr);
AUTOGENERATE_FUNCTION(UStream,-1,execLoadID3Tag);
AUTOGENERATE_FUNCTION(UStream,-1,execSaveID3Tag);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execLoadPlaylist);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execValidFile);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execCreateStream);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execValidDirectory);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execRemoveDirectory);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execCreateDirectory);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execGetDirectoryContents);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execGetDriveLetters);
AUTOGENERATE_FUNCTION(UStreamInterface,-1,execGetBaseDirectory);
AUTOGENERATE_FUNCTION(UStreamInteraction,-1,execIsPaused);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(USpline,-1,execNextSplineRot);
AUTOGENERATE_FUNCTION(USpline,-1,execNextSplinePos);
AUTOGENERATE_FUNCTION(USpline,-1,execInitSplineRot);
AUTOGENERATE_FUNCTION(USpline,-1,execInitSplinePath);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAllIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAllInt);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,-1,execResetStaticFilterState);
AUTOGENERATE_FUNCTION(AActor,-1,execSuggestFallVelocity);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execForceFeedbackSupported);
AUTOGENERATE_FUNCTION(AActor,569,execChangeBaseParamsFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,568,execChangeSpringFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,567,execStopFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,566,execPlayFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,-1,execTraceThisActor);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAllMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPauseStream);
AUTOGENERATE_FUNCTION(AActor,-1,execAdjustVolume);
AUTOGENERATE_FUNCTION(AActor,-1,execSeekStream);
AUTOGENERATE_FUNCTION(AActor,-1,execStopStream);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayStream);
AUTOGENERATE_FUNCTION(AActor,-1,execAllowMusicPlayback);
AUTOGENERATE_FUNCTION(AActor,-1,execUnClock);
AUTOGENERATE_FUNCTION(AActor,-1,execClock);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKMakeRagdollAvailable);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveAllBoneLifters);
AUTOGENERATE_FUNCTION(AActor,-1,execKRemoveLifterFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddBoneLifter);
AUTOGENERATE_FUNCTION(AActor,-1,execKScaleJointLimits);
AUTOGENERATE_FUNCTION(AActor,-1,execKFreezeRagdoll);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetSkelMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetSkelVel);
AUTOGENERATE_FUNCTION(AActor,-1,execKEnableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKDisableCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetActorGravScale);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetBlockKarma);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetStayUprightParams);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetStayUpright);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddAngularImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execKAddImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execKIsAwake);
AUTOGENERATE_FUNCTION(AActor,-1,execKWake);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetImpactThreshold);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMPosition);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetCOMOffset);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetRestitution);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetFriction);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetDampingProps);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetInertiaTensor);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetMass);
AUTOGENERATE_FUNCTION(AActor,-1,execKRBVecFromVector);
AUTOGENERATE_FUNCTION(AActor,-1,execKRBVecToVector);
AUTOGENERATE_FUNCTION(AActor,-1,execKDrawRigidBodyState);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRigidBodyState);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetRBQuaternion);
AUTOGENERATE_FUNCTION(AActor,-1,execKSetSimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execKGetSimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execOnlyAffectPawns);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugUnclock);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugClock);
AUTOGENERATE_FUNCTION(AActor,-1,execClearStayingDebugLines);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugCircle);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawStayingDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execGetUrlOption);
AUTOGENERATE_FUNCTION(AActor,-1,execUpdateURL);
AUTOGENERATE_FUNCTION(AActor,-1,execGetClosestBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,-1,execBoneRefresh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimStopLooping);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execSetAnimFrame);
AUTOGENERATE_FUNCTION(AActor,-1,execFreezeAnimAt);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMeshName);
AUTOGENERATE_FUNCTION(AActor,-1,execIsJoinedTo);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,-1,execShouldBeHidden);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execTextToSpeech);
AUTOGENERATE_FUNCTION(AActor,-1,execCopyObjectToClipboard);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UTrailEmitter,-1,execResetTrail);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execReset);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execTrigger);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(ASVehicle,-1,execUpdateVehicle);
AUTOGENERATE_FUNCTION(ASVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(APawn,-1,execForceCrouch);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedDestination);
AUTOGENERATE_FUNCTION(APawn,-1,execGet4WayDirection);
AUTOGENERATE_FUNCTION(APawn,-1,execSetTwistLook);
AUTOGENERATE_FUNCTION(APawn,-1,execSetViewPitch);
AUTOGENERATE_FUNCTION(ASecurity,-1,execLocalPerform);
AUTOGENERATE_FUNCTION(ASecurity,-1,execNativePerform);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawPortal);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawTile);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execTextSize);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawText);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execSetSize);
AUTOGENERATE_FUNCTION(ASceneManager,-1,execAbortScene);
AUTOGENERATE_FUNCTION(ASceneManager,-1,execGetTotalSceneTime);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(UPlayInfo,709,execSort);
AUTOGENERATE_FUNCTION(UPlayInfo,708,execFindIndex);
AUTOGENERATE_FUNCTION(UPlayInfo,707,execGetSettings);
AUTOGENERATE_FUNCTION(UPlayInfo,706,execStoreSetting);
AUTOGENERATE_FUNCTION(UPlayInfo,705,execSaveSettings);
AUTOGENERATE_FUNCTION(UPlayInfo,704,execAddSetting);
AUTOGENERATE_FUNCTION(UPlayInfo,703,execPopClass);
AUTOGENERATE_FUNCTION(UPlayInfo,702,execRemoveClass);
AUTOGENERATE_FUNCTION(UPlayInfo,701,execAddClass);
AUTOGENERATE_FUNCTION(UPlayInfo,700,execClear);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(ANavigationPoint,-1,execSetBaseDistance);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APlayerController,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCheckSpeedHack);
AUTOGENERATE_FUNCTION(APlayerController,-1,execServerValidationResponse);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientValidate);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetURLProtocol);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,-1,execResetInput);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetServerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerIDHash);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetNetSpeed);
AUTOGENERATE_FUNCTION(AController,-1,execCanMakePathTo);
AUTOGENERATE_FUNCTION(AController,-1,execEndClimbLadder);
AUTOGENERATE_FUNCTION(AController,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(AController,-1,execInLatentExecution);
AUTOGENERATE_FUNCTION(AController,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(AController,531,execPickTarget);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,-1,execFindBestSuperPickup);
AUTOGENERATE_FUNCTION(AController,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(AController,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(AController,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(AController,520,execactorReachable);
AUTOGENERATE_FUNCTION(AController,521,execpointReachable);
AUTOGENERATE_FUNCTION(AController,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(AController,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathTowardNearest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathToIntercept);
AUTOGENERATE_FUNCTION(AController,517,execFindPathToward);
AUTOGENERATE_FUNCTION(AController,518,execFindPathTo);
AUTOGENERATE_FUNCTION(AController,533,execCanSee);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AController,508,execFinishRotation);
AUTOGENERATE_FUNCTION(AController,502,execMoveToward);
AUTOGENERATE_FUNCTION(AController,500,execMoveTo);
AUTOGENERATE_FUNCTION(AAIController,510,execWaitToSeeEnemy);
AUTOGENERATE_FUNCTION(APickup,-1,execRemoveFromNavigation);
AUTOGENERATE_FUNCTION(APickup,-1,execAddToNavigation);
AUTOGENERATE_FUNCTION(AHUD,-1,execStaticDrawCanvasLine);
AUTOGENERATE_FUNCTION(AHUD,-1,execDrawCanvasLine);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execLoadSRGrammar);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execLoadMapList);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execDeletePackage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execSavePackage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execAllDataObjects);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execLoadDataObject);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execDeleteDataObject);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execCreateDataObject);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetSavedGames);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsPendingConnection);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsSoftwareRendering);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsDemoBuild);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execForceLoadTexture);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUpdateDistanceFogLOD);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsEntry);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execDetailChange);
AUTOGENERATE_FUNCTION(AWeapon,-1,execInitWeaponFires);
AUTOGENERATE_FUNCTION(AKVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(UKarmaParamsCollision,-1,execCalcContactRegion);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintTorque);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKGetConstraintForce);
AUTOGENERATE_FUNCTION(AKConstraint,-1,execKUpdateConstraintParams);
AUTOGENERATE_FUNCTION(AxProcMesh,-1,execProcPling);
AUTOGENERATE_FUNCTION(ASceneSubtitles,-1,execProcessEvent);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetStatsIdentifier);
AUTOGENERATE_FUNCTION(AFileLog,-1,execLogf);
AUTOGENERATE_FUNCTION(AFileLog,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AFileLog,-1,execOpenLog);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
DECLARE_NATIVE_TYPE(Engine,UStreamTag);
DECLARE_NATIVE_TYPE(Engine,UStreamBase);
DECLARE_NATIVE_TYPE(Engine,UStream);
DECLARE_NATIVE_TYPE(Engine,UStreamInterface);
DECLARE_NATIVE_TYPE(Engine,UStreamInteraction);
DECLARE_NATIVE_TYPE(Engine,UInteraction);
DECLARE_NATIVE_TYPE(Engine,UInteractions);
DECLARE_NATIVE_TYPE(Engine,USpline);
DECLARE_NATIVE_TYPE(Engine,ADecoVolumeObject);
DECLARE_NATIVE_TYPE(Engine,AActor);
DECLARE_NATIVE_TYPE(Engine,ADecorationList);
DECLARE_NATIVE_TYPE(Engine,AKeypoint);
DECLARE_NATIVE_TYPE(Engine,APlayerChatManager);
DECLARE_NATIVE_TYPE(Engine,AInfo);
DECLARE_NATIVE_TYPE(Engine,AVoiceChatRoom);
DECLARE_NATIVE_TYPE(Engine,AVoiceChatReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,UTrailEmitter);
DECLARE_NATIVE_TYPE(Engine,UParticleEmitter);
DECLARE_NATIVE_TYPE(Engine,UMaterial);
DECLARE_NATIVE_TYPE(Engine,UTerrainMaterial);
DECLARE_NATIVE_TYPE(Engine,ATerrainInfo);
DECLARE_NATIVE_TYPE(Engine,USVehicleWheel);
DECLARE_NATIVE_TYPE(Engine,ASVehicle);
DECLARE_NATIVE_TYPE(Engine,AVehicle);
DECLARE_NATIVE_TYPE(Engine,APawn);
DECLARE_NATIVE_TYPE(Engine,AStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,USpriteEmitter);
DECLARE_NATIVE_TYPE(Engine,USparkEmitter);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_MatSubAction);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Scripted);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Script);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Sound);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_DestroyEffect);
DECLARE_NATIVE_TYPE(Engine,UAnimNotify_Effect);
DECLARE_NATIVE_TYPE(Engine,UShadowBitmapMaterial);
DECLARE_NATIVE_TYPE(Engine,ASecurity);
DECLARE_NATIVE_TYPE(Engine,UScriptedTexture);
DECLARE_NATIVE_TYPE(Engine,ALookTarget);
DECLARE_NATIVE_TYPE(Engine,USubActionSubTitle);
DECLARE_NATIVE_TYPE(Engine,UMatSubAction);
DECLARE_NATIVE_TYPE(Engine,UMatObject);
DECLARE_NATIVE_TYPE(Engine,USubActionSceneSpeed);
DECLARE_NATIVE_TYPE(Engine,USubActionGameSpeed);
DECLARE_NATIVE_TYPE(Engine,USubActionOrientation);
DECLARE_NATIVE_TYPE(Engine,USubActionCameraShake);
DECLARE_NATIVE_TYPE(Engine,USubActionFOV);
DECLARE_NATIVE_TYPE(Engine,USubActionTrigger);
DECLARE_NATIVE_TYPE(Engine,USubActionFade);
DECLARE_NATIVE_TYPE(Engine,AMatDemoActor);
DECLARE_NATIVE_TYPE(Engine,UActionPause);
DECLARE_NATIVE_TYPE(Engine,UMatAction);
DECLARE_NATIVE_TYPE(Engine,UActionMoveCamera);
DECLARE_NATIVE_TYPE(Engine,UMeshObject);
DECLARE_NATIVE_TYPE(Engine,ASceneManager);
DECLARE_NATIVE_TYPE(Engine,UProjectorMaterial);
DECLARE_NATIVE_TYPE(Engine,AProjector);
DECLARE_NATIVE_TYPE(Engine,UPlayInfo);
DECLARE_NATIVE_TYPE(Engine,UParticleMaterial);
DECLARE_NATIVE_TYPE(Engine,AEmitter);
DECLARE_NATIVE_TYPE(Engine,AMover);
DECLARE_NATIVE_TYPE(Engine,UMeshEmitter);
DECLARE_NATIVE_TYPE(Engine,UOpacityModifier);
DECLARE_NATIVE_TYPE(Engine,UModifier);
DECLARE_NATIVE_TYPE(Engine,UMaterialSequence);
DECLARE_NATIVE_TYPE(Engine,UMaterialSwitch);
DECLARE_NATIVE_TYPE(Engine,UFinalBlend);
DECLARE_NATIVE_TYPE(Engine,UVertexColor);
DECLARE_NATIVE_TYPE(Engine,UTexCoordSource);
DECLARE_NATIVE_TYPE(Engine,UTexModifier);
DECLARE_NATIVE_TYPE(Engine,UTexMatrix);
DECLARE_NATIVE_TYPE(Engine,UTexEnvMap);
DECLARE_NATIVE_TYPE(Engine,UTexOscillator);
DECLARE_NATIVE_TYPE(Engine,UTexOscillatorTriggered);
DECLARE_NATIVE_TYPE(Engine,UTexRotator);
DECLARE_NATIVE_TYPE(Engine,UTexScaler);
DECLARE_NATIVE_TYPE(Engine,UVariableTexPanner);
DECLARE_NATIVE_TYPE(Engine,UTexPanner);
DECLARE_NATIVE_TYPE(Engine,UTexPannerTriggered);
DECLARE_NATIVE_TYPE(Engine,UFadeColor);
DECLARE_NATIVE_TYPE(Engine,UConstantMaterial);
DECLARE_NATIVE_TYPE(Engine,UConstantColor);
DECLARE_NATIVE_TYPE(Engine,UCombiner);
DECLARE_NATIVE_TYPE(Engine,UShader);
DECLARE_NATIVE_TYPE(Engine,UColorModifier);
DECLARE_NATIVE_TYPE(Engine,UInteractionMaster);
DECLARE_NATIVE_TYPE(Engine,UBaseGUIController);
DECLARE_NATIVE_TYPE(Engine,UConsole);
DECLARE_NATIVE_TYPE(Engine,AMaplistManagerBase);
DECLARE_NATIVE_TYPE(Engine,APrecacheHack);
DECLARE_NATIVE_TYPE(Engine,UCrosshairPack);
DECLARE_NATIVE_TYPE(Engine,AFluidSurfaceOscillator);
DECLARE_NATIVE_TYPE(Engine,AFluidSurfaceInfo);
DECLARE_NATIVE_TYPE(Engine,UAdminBase);
DECLARE_NATIVE_TYPE(Engine,UPlayerInput);
DECLARE_NATIVE_TYPE(Engine,UCheatManager);
DECLARE_NATIVE_TYPE(Engine,UCanvas);
DECLARE_NATIVE_TYPE(Engine,UCacheManager);
DECLARE_NATIVE_TYPE(Engine,UBeamEmitter);
DECLARE_NATIVE_TYPE(Engine,UI3DL2Listener);
DECLARE_NATIVE_TYPE(Engine,AAnnouncerVoice);
DECLARE_NATIVE_TYPE(Engine,ARoadPathNode);
DECLARE_NATIVE_TYPE(Engine,APathNode);
DECLARE_NATIVE_TYPE(Engine,ANavigationPoint);
DECLARE_NATIVE_TYPE(Engine,AFlyingPathNode);
DECLARE_NATIVE_TYPE(Engine,UGameProfile);
DECLARE_NATIVE_TYPE(Engine,AMutator);
DECLARE_NATIVE_TYPE(Engine,AAvoidMarker);
DECLARE_NATIVE_TYPE(Engine,ATriggers);
DECLARE_NATIVE_TYPE(Engine,UManifest);
DECLARE_NATIVE_TYPE(Engine,AJumpDest);
DECLARE_NATIVE_TYPE(Engine,AJumpPad);
DECLARE_NATIVE_TYPE(Engine,AAntiPortalActor);
DECLARE_NATIVE_TYPE(Engine,AWeaponAttachment);
DECLARE_NATIVE_TYPE(Engine,AInventoryAttachment);
DECLARE_NATIVE_TYPE(Engine,ATeamInfo);
DECLARE_NATIVE_TYPE(Engine,AAutoDoor);
DECLARE_NATIVE_TYPE(Engine,ADoor);
DECLARE_NATIVE_TYPE(Engine,AAutoLadder);
DECLARE_NATIVE_TYPE(Engine,ALadder);
DECLARE_NATIVE_TYPE(Engine,ASmallNavigationPoint);
DECLARE_NATIVE_TYPE(Engine,ABlockingVolume);
DECLARE_NATIVE_TYPE(Engine,AVolume);
DECLARE_NATIVE_TYPE(Engine,ABrush);
DECLARE_NATIVE_TYPE(Engine,APotentialClimbWatcher);
DECLARE_NATIVE_TYPE(Engine,ALadderVolume);
DECLARE_NATIVE_TYPE(Engine,APhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,ADefaultPhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,ALineOfSightTrigger);
DECLARE_NATIVE_TYPE(Engine,AAIScript);
DECLARE_NATIVE_TYPE(Engine,ADamageType);
DECLARE_NATIVE_TYPE(Engine,ASVehicleTrigger);
DECLARE_NATIVE_TYPE(Engine,ASVehicleFactory);
DECLARE_NATIVE_TYPE(Engine,AVehiclePart);
DECLARE_NATIVE_TYPE(Engine,APlayerController);
DECLARE_NATIVE_TYPE(Engine,AController);
DECLARE_NATIVE_TYPE(Engine,AAIController);
DECLARE_NATIVE_TYPE(Engine,AAmmunition);
DECLARE_NATIVE_TYPE(Engine,AInventory);
DECLARE_NATIVE_TYPE(Engine,APowerups);
DECLARE_NATIVE_TYPE(Engine,APickup);
DECLARE_NATIVE_TYPE(Engine,AAmmo);
DECLARE_NATIVE_TYPE(Engine,ULogEntry);
DECLARE_NATIVE_TYPE(Engine,ULevelSummary);
DECLARE_NATIVE_TYPE(Engine,AGameReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AInternetInfo);
DECLARE_NATIVE_TYPE(Engine,ALinkedReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,APlayerReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,ALiftExit);
DECLARE_NATIVE_TYPE(Engine,ALiftCenter);
DECLARE_NATIVE_TYPE(Engine,ASavedMove);
DECLARE_NATIVE_TYPE(Engine,AHUD);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneMarker);
DECLARE_NATIVE_TYPE(Engine,ATrigger);
DECLARE_NATIVE_TYPE(Engine,AAIMarker);
DECLARE_NATIVE_TYPE(Engine,AInventorySpot);
DECLARE_NATIVE_TYPE(Engine,APlayerStart);
DECLARE_NATIVE_TYPE(Engine,ATeleporter);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AProjectile);
DECLARE_NATIVE_TYPE(Engine,ADecoration);
DECLARE_NATIVE_TYPE(Engine,AInterpolationPoint);
DECLARE_NATIVE_TYPE(Engine,AScout);
DECLARE_NATIVE_TYPE(Engine,UReachSpec);
DECLARE_NATIVE_TYPE(Engine,ASkyZoneInfo);
DECLARE_NATIVE_TYPE(Engine,ACamera);
DECLARE_NATIVE_TYPE(Engine,AGameInfo);
DECLARE_NATIVE_TYPE(Engine,ALevelInfo);
DECLARE_NATIVE_TYPE(Engine,UTextToSpeechAlias);
DECLARE_NATIVE_TYPE(Engine,AAmbientSound);
DECLARE_NATIVE_TYPE(Engine,AVignette);
DECLARE_NATIVE_TYPE(Engine,ANote);
DECLARE_NATIVE_TYPE(Engine,UWeaponFire);
DECLARE_NATIVE_TYPE(Engine,AWeapon);
DECLARE_NATIVE_TYPE(Engine,APolyMarker);
DECLARE_NATIVE_TYPE(Engine,AClipMarker);
DECLARE_NATIVE_TYPE(Engine,ALight);
DECLARE_NATIVE_TYPE(Engine,AKRepulsor);
DECLARE_NATIVE_TYPE(Engine,AKVehicle);
DECLARE_NATIVE_TYPE(Engine,AKTire);
DECLARE_NATIVE_TYPE(Engine,AKActor);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsSkel);
DECLARE_NATIVE_TYPE(Engine,UKarmaParams);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsCollision);
DECLARE_NATIVE_TYPE(Engine,UKarmaParamsRBFull);
DECLARE_NATIVE_TYPE(Engine,AKCarWheelJoint);
DECLARE_NATIVE_TYPE(Engine,AKConstraint);
DECLARE_NATIVE_TYPE(Engine,AKConeLimit);
DECLARE_NATIVE_TYPE(Engine,AKHinge);
DECLARE_NATIVE_TYPE(Engine,AKBSJoint);
DECLARE_NATIVE_TYPE(Engine,AxWeatherEffect);
DECLARE_NATIVE_TYPE(Engine,AxProcMesh);
DECLARE_NATIVE_TYPE(Engine,AxPickUpBase);
DECLARE_NATIVE_TYPE(Engine,AxEmitter);
DECLARE_NATIVE_TYPE(Engine,ASceneSubtitles);
DECLARE_NATIVE_TYPE(Engine,AGameStats);
DECLARE_NATIVE_TYPE(Engine,AFileLog);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE \
	UEngine::StaticClass(); \
	UStreamTag::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUStreamTagNative; \
	UStreamBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUStreamBaseNative; \
	UStream::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUStreamNative; \
	UStreamInterface::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUStreamInterfaceNative; \
	UStreamInteraction::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUStreamInteractionNative; \
	UInteraction::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionNative; \
	UInteractions::StaticClass(); \
	USpline::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUSplineNative; \
	ADecoVolumeObject::StaticClass(); \
	AActor::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAActorNative; \
	ADecorationList::StaticClass(); \
	AKeypoint::StaticClass(); \
	APlayerChatManager::StaticClass(); \
	AInfo::StaticClass(); \
	AVoiceChatRoom::StaticClass(); \
	AVoiceChatReplicationInfo::StaticClass(); \
	AReplicationInfo::StaticClass(); \
	UVertMeshInstance::StaticClass(); \
	ULodMeshInstance::StaticClass(); \
	UMeshInstance::StaticClass(); \
	UPrimitive::StaticClass(); \
	UVertMesh::StaticClass(); \
	ULodMesh::StaticClass(); \
	UMesh::StaticClass(); \
	UTrailEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUTrailEmitterNative; \
	UParticleEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUParticleEmitterNative; \
	UCubemap::StaticClass(); \
	UTexture::StaticClass(); \
	UBitmapMaterial::StaticClass(); \
	URenderedMaterial::StaticClass(); \
	UMaterial::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUMaterialNative; \
	UPalette::StaticClass(); \
	UTerrainMaterial::StaticClass(); \
	ATerrainInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineATerrainInfoNative; \
	UTerrainPrimitive::StaticClass(); \
	UTerrainSector::StaticClass(); \
	USVehicleWheel::StaticClass(); \
	ASVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASVehicleNative; \
	AVehicle::StaticClass(); \
	APawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPawnNative; \
	AStaticMeshActor::StaticClass(); \
	UStaticMeshInstance::StaticClass(); \
	UStaticMesh::StaticClass(); \
	USpriteEmitter::StaticClass(); \
	USparkEmitter::StaticClass(); \
	UAnimNotify_MatSubAction::StaticClass(); \
	UAnimNotify::StaticClass(); \
	UAnimNotify_Scripted::StaticClass(); \
	UAnimNotify_Script::StaticClass(); \
	UAnimNotify_Sound::StaticClass(); \
	UAnimNotify_DestroyEffect::StaticClass(); \
	UAnimNotify_Effect::StaticClass(); \
	USkeletalMeshInstance::StaticClass(); \
	USkeletalMesh::StaticClass(); \
	UAnimation::StaticClass(); \
	UMeshAnimation::StaticClass(); \
	UShadowBitmapMaterial::StaticClass(); \
	ASecurity::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASecurityNative; \
	UScriptedTexture::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUScriptedTextureNative; \
	ALookTarget::StaticClass(); \
	USubActionSubTitle::StaticClass(); \
	UMatSubAction::StaticClass(); \
	UMatObject::StaticClass(); \
	USubActionSceneSpeed::StaticClass(); \
	USubActionGameSpeed::StaticClass(); \
	USubActionOrientation::StaticClass(); \
	USubActionCameraShake::StaticClass(); \
	USubActionFOV::StaticClass(); \
	USubActionTrigger::StaticClass(); \
	USubActionFade::StaticClass(); \
	AMatDemoActor::StaticClass(); \
	UActionPause::StaticClass(); \
	UMatAction::StaticClass(); \
	UActionMoveCamera::StaticClass(); \
	UMeshObject::StaticClass(); \
	ASceneManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASceneManagerNative; \
	USkinVertexBuffer::StaticClass(); \
	URenderResource::StaticClass(); \
	UIndexBuffer::StaticClass(); \
	UVertexBuffer::StaticClass(); \
	UVertexStreamBase::StaticClass(); \
	UVertexStreamPosNormTex::StaticClass(); \
	UVertexStreamUV::StaticClass(); \
	UVertexStreamCOLOR::StaticClass(); \
	UVertexStreamVECTOR::StaticClass(); \
	UProjectorMaterial::StaticClass(); \
	AProjector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAProjectorNative; \
	UProjectorPrimitive::StaticClass(); \
	UPlayInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUPlayInfoNative; \
	UPlayer::StaticClass(); \
	UNetPendingLevel::StaticClass(); \
	UPendingLevel::StaticClass(); \
	UParticleMaterial::StaticClass(); \
	AEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAEmitterNative; \
	UPackageCheckInfo::StaticClass(); \
	UNetDriver::StaticClass(); \
	UPackageMapLevel::StaticClass(); \
	AMover::StaticClass(); \
	UModel::StaticClass(); \
	UMeshEmitter::StaticClass(); \
	UOpacityModifier::StaticClass(); \
	UModifier::StaticClass(); \
	UMaterialSequence::StaticClass(); \
	UMaterialSwitch::StaticClass(); \
	UFinalBlend::StaticClass(); \
	UVertexColor::StaticClass(); \
	UTexCoordSource::StaticClass(); \
	UTexModifier::StaticClass(); \
	UTexMatrix::StaticClass(); \
	UTexEnvMap::StaticClass(); \
	UTexOscillator::StaticClass(); \
	UTexOscillatorTriggered::StaticClass(); \
	UTexRotator::StaticClass(); \
	UTexScaler::StaticClass(); \
	UVariableTexPanner::StaticClass(); \
	UTexPanner::StaticClass(); \
	UTexPannerTriggered::StaticClass(); \
	UFadeColor::StaticClass(); \
	UConstantMaterial::StaticClass(); \
	UConstantColor::StaticClass(); \
	UCombiner::StaticClass(); \
	UShader::StaticClass(); \
	UColorModifier::StaticClass(); \
	UTexCoordMaterial::StaticClass(); \
	UProxyBitmapMaterial::StaticClass(); \
	ULevel::StaticClass(); \
	ULevelBase::StaticClass(); \
	UInteractionMaster::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionMasterNative; \
	UBaseGUIController::StaticClass(); \
	UConsole::StaticClass(); \
	UInput::StaticClass(); \
	AMaplistManagerBase::StaticClass(); \
	APrecacheHack::StaticClass(); \
	UCrosshairPack::StaticClass(); \
	UGameEngine::StaticClass(); \
	UPolys::StaticClass(); \
	UFont::StaticClass(); \
	AFluidSurfaceOscillator::StaticClass(); \
	UFluidSurfacePrimitive::StaticClass(); \
	AFluidSurfaceInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAFluidSurfaceInfoNative; \
	UGlobalTempObjects::StaticClass(); \
	UMasterMD5Commandlet::StaticClass(); \
	UUModUnpackCommandlet::StaticClass(); \
	UServerCommandlet::StaticClass(); \
	URenderDevice::StaticClass(); \
	UChannelDownload::StaticClass(); \
	UDownload::StaticClass(); \
	UDemoRecDriver::StaticClass(); \
	UDemoRecConnection::StaticClass(); \
	UNetConnection::StaticClass(); \
	UDemoPlayPendingLevel::StaticClass(); \
	UConvexVolume::StaticClass(); \
	UAdminBase::StaticClass(); \
	UPlayerInput::StaticClass(); \
	UCheatManager::StaticClass(); \
	UVoiceChannel::StaticClass(); \
	UChannel::StaticClass(); \
	UFileChannel::StaticClass(); \
	UActorChannel::StaticClass(); \
	UControlChannel::StaticClass(); \
	UCanvas::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCanvasNative; \
	UClient::StaticClass(); \
	UCameraOverlay::StaticClass(); \
	UCameraEffect::StaticClass(); \
	UMotionBlur::StaticClass(); \
	USubActionCameraEffect::StaticClass(); \
	UViewport::StaticClass(); \
	UCacheManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCacheManagerNative; \
	UBeamEmitter::StaticClass(); \
	UI3DL2Listener::StaticClass(); \
	UAudioSubsystem::StaticClass(); \
	USoundGroup::StaticClass(); \
	USound::StaticClass(); \
	UProceduralSound::StaticClass(); \
	AAnnouncerVoice::StaticClass(); \
	ARoadPathNode::StaticClass(); \
	APathNode::StaticClass(); \
	ANavigationPoint::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineANavigationPointNative; \
	AFlyingPathNode::StaticClass(); \
	UGameProfile::StaticClass(); \
	AMutator::StaticClass(); \
	AAvoidMarker::StaticClass(); \
	ATriggers::StaticClass(); \
	UManifest::StaticClass(); \
	AJumpDest::StaticClass(); \
	AJumpPad::StaticClass(); \
	AAntiPortalActor::StaticClass(); \
	AWeaponAttachment::StaticClass(); \
	AInventoryAttachment::StaticClass(); \
	ATeamInfo::StaticClass(); \
	AAutoDoor::StaticClass(); \
	ADoor::StaticClass(); \
	AAutoLadder::StaticClass(); \
	ALadder::StaticClass(); \
	ASmallNavigationPoint::StaticClass(); \
	ABlockingVolume::StaticClass(); \
	AVolume::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAVolumeNative; \
	ABrush::StaticClass(); \
	APotentialClimbWatcher::StaticClass(); \
	ALadderVolume::StaticClass(); \
	APhysicsVolume::StaticClass(); \
	ADefaultPhysicsVolume::StaticClass(); \
	ALineOfSightTrigger::StaticClass(); \
	AAIScript::StaticClass(); \
	ADamageType::StaticClass(); \
	ASVehicleTrigger::StaticClass(); \
	ASVehicleFactory::StaticClass(); \
	AVehiclePart::StaticClass(); \
	APlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPlayerControllerNative; \
	AController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAControllerNative; \
	AAIController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAAIControllerNative; \
	AAmmunition::StaticClass(); \
	AInventory::StaticClass(); \
	APowerups::StaticClass(); \
	APickup::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPickupNative; \
	AAmmo::StaticClass(); \
	ULogEntry::StaticClass(); \
	ULevelSummary::StaticClass(); \
	AGameReplicationInfo::StaticClass(); \
	AInternetInfo::StaticClass(); \
	ALinkedReplicationInfo::StaticClass(); \
	APlayerReplicationInfo::StaticClass(); \
	ALiftExit::StaticClass(); \
	ALiftCenter::StaticClass(); \
	ASavedMove::StaticClass(); \
	AHUD::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAHUDNative; \
	AWarpZoneMarker::StaticClass(); \
	ATrigger::StaticClass(); \
	AAIMarker::StaticClass(); \
	AInventorySpot::StaticClass(); \
	APlayerStart::StaticClass(); \
	ATeleporter::StaticClass(); \
	AWarpZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWarpZoneInfoNative; \
	AZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAZoneInfoNative; \
	AProjectile::StaticClass(); \
	ADecoration::StaticClass(); \
	AInterpolationPoint::StaticClass(); \
	AScout::StaticClass(); \
	UReachSpec::StaticClass(); \
	ASkyZoneInfo::StaticClass(); \
	ACamera::StaticClass(); \
	AGameInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameInfoNative; \
	ALevelInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineALevelInfoNative; \
	UTextToSpeechAlias::StaticClass(); \
	AAmbientSound::StaticClass(); \
	AVignette::StaticClass(); \
	ANote::StaticClass(); \
	UWeaponFire::StaticClass(); \
	AWeapon::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWeaponNative; \
	APolyMarker::StaticClass(); \
	AClipMarker::StaticClass(); \
	ALight::StaticClass(); \
	UExportCacheCommandlet::StaticClass(); \
	UNullRenderDevice::StaticClass(); \
	AKRepulsor::StaticClass(); \
	AKVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKVehicleNative; \
	AKTire::StaticClass(); \
	AKActor::StaticClass(); \
	UKarmaParamsSkel::StaticClass(); \
	UKarmaParams::StaticClass(); \
	UKarmaParamsCollision::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUKarmaParamsCollisionNative; \
	UKarmaParamsRBFull::StaticClass(); \
	UKMeshProps::StaticClass(); \
	AKCarWheelJoint::StaticClass(); \
	AKConstraint::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAKConstraintNative; \
	AKConeLimit::StaticClass(); \
	AKHinge::StaticClass(); \
	AKBSJoint::StaticClass(); \
	AxWeatherEffect::StaticClass(); \
	AxProcMesh::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAxProcMeshNative; \
	AxPickUpBase::StaticClass(); \
	AxEmitter::StaticClass(); \
	ASceneSubtitles::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineASceneSubtitlesNative; \
	AGameStats::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameStatsNative; \
	AFileLog::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAFileLogNative; \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
NATIVE_INFO(UStreamTag) GEngineUStreamTagNatives[] = 
{ 
	MAP_NATIVE(UStreamTag,execDumpTag)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UStreamTag);

NATIVE_INFO(UStreamBase) GEngineUStreamBaseNatives[] = 
{ 
	MAP_NATIVE(UStreamBase,execIsCaseSensitive)
	MAP_NATIVE(UStreamBase,execGetPathSeparator)
	MAP_NATIVE(UStreamBase,execMultiplyEqual_StrStr)
	MAP_NATIVE(UStreamBase,execMultiply_StrStr)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UStreamBase);

NATIVE_INFO(UStream) GEngineUStreamNatives[] = 
{ 
	MAP_NATIVE(UStream,execLoadID3Tag)
	MAP_NATIVE(UStream,execSaveID3Tag)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UStream);

NATIVE_INFO(UStreamInterface) GEngineUStreamInterfaceNatives[] = 
{ 
	MAP_NATIVE(UStreamInterface,execLoadPlaylist)
	MAP_NATIVE(UStreamInterface,execValidFile)
	MAP_NATIVE(UStreamInterface,execCreateStream)
	MAP_NATIVE(UStreamInterface,execValidDirectory)
	MAP_NATIVE(UStreamInterface,execRemoveDirectory)
	MAP_NATIVE(UStreamInterface,execCreateDirectory)
	MAP_NATIVE(UStreamInterface,execGetDirectoryContents)
	MAP_NATIVE(UStreamInterface,execGetDriveLetters)
	MAP_NATIVE(UStreamInterface,execGetBaseDirectory)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UStreamInterface);

NATIVE_INFO(UStreamInteraction) GEngineUStreamInteractionNatives[] = 
{ 
	MAP_NATIVE(UStreamInteraction,execIsPaused)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UStreamInteraction);

NATIVE_INFO(UInteraction) GEngineUInteractionNatives[] = 
{ 
	MAP_NATIVE(UInteraction,execScreenToWorld)
	MAP_NATIVE(UInteraction,execWorldToScreen)
	MAP_NATIVE(UInteraction,execConsoleCommand)
	MAP_NATIVE(UInteraction,execInitialize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteraction);

NATIVE_INFO(USpline) GEngineUSplineNatives[] = 
{ 
	MAP_NATIVE(USpline,execNextSplineRot)
	MAP_NATIVE(USpline,execNextSplinePos)
	MAP_NATIVE(USpline,execInitSplineRot)
	MAP_NATIVE(USpline,execInitSplinePath)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,USpline);

NATIVE_INFO(AActor) GEngineAActorNatives[] = 
{ 
	MAP_NATIVE(AActor,execMultiply_ColorFloat)
	MAP_NATIVE(AActor,execAdd_ColorColor)
	MAP_NATIVE(AActor,execMultiply_FloatColor)
	MAP_NATIVE(AActor,execSubtract_ColorColor)
	MAP_NATIVE(AActor,execCollidingActors)
	MAP_NATIVE(AActor,execVisibleCollidingActors)
	MAP_NATIVE(AActor,execVisibleActors)
	MAP_NATIVE(AActor,execRadiusActors)
	MAP_NATIVE(AActor,execTraceActors)
	MAP_NATIVE(AActor,execTouchingActors)
	MAP_NATIVE(AActor,execBasedActors)
	MAP_NATIVE(AActor,execChildActors)
	MAP_NATIVE(AActor,execDynamicActors)
	MAP_NATIVE(AActor,execAllActors)
	MAP_NATIVE(AActor,execMoveCacheEntry)
	MAP_NATIVE(AActor,execGetCacheEntry)
	MAP_NATIVE(AActor,execGetAllIntDesc)
	MAP_NATIVE(AActor,execGetAllInt)
	MAP_NATIVE(AActor,execGetNextIntDesc)
	MAP_NATIVE(AActor,execGetNextInt)
	MAP_NATIVE(AActor,execGetURLMap)
	MAP_NATIVE(AActor,execGetNextSkin)
	MAP_NATIVE(AActor,execGetMapName)
	MAP_NATIVE(AActor,execResetStaticFilterState)
	MAP_NATIVE(AActor,execSuggestFallVelocity)
	MAP_NATIVE(AActor,execPlayerCanSeeMe)
	MAP_NATIVE(AActor,execMakeNoise)
	MAP_NATIVE(AActor,execForceFeedbackSupported)
	MAP_NATIVE(AActor,execChangeBaseParamsFeedbackEffect)
	MAP_NATIVE(AActor,execChangeSpringFeedbackEffect)
	MAP_NATIVE(AActor,execStopFeedbackEffect)
	MAP_NATIVE(AActor,execPlayFeedbackEffect)
	MAP_NATIVE(AActor,execGetSoundDuration)
	MAP_NATIVE(AActor,execDemoPlaySound)
	MAP_NATIVE(AActor,execPlayOwnedSound)
	MAP_NATIVE(AActor,execPlaySound)
	MAP_NATIVE(AActor,execSetTimer)
	MAP_NATIVE(AActor,execDestroy)
	MAP_NATIVE(AActor,execSpawn)
	MAP_NATIVE(AActor,execTraceThisActor)
	MAP_NATIVE(AActor,execFastTrace)
	MAP_NATIVE(AActor,execTrace)
	MAP_NATIVE(AActor,execStopAllMusic)
	MAP_NATIVE(AActor,execStopMusic)
	MAP_NATIVE(AActor,execPlayMusic)
	MAP_NATIVE(AActor,execPauseStream)
	MAP_NATIVE(AActor,execAdjustVolume)
	MAP_NATIVE(AActor,execSeekStream)
	MAP_NATIVE(AActor,execStopStream)
	MAP_NATIVE(AActor,execPlayStream)
	MAP_NATIVE(AActor,execAllowMusicPlayback)
	MAP_NATIVE(AActor,execUnClock)
	MAP_NATIVE(AActor,execClock)
	MAP_NATIVE(AActor,execKIsRagdollAvailable)
	MAP_NATIVE(AActor,execKMakeRagdollAvailable)
	MAP_NATIVE(AActor,execKRemoveAllBoneLifters)
	MAP_NATIVE(AActor,execKRemoveLifterFromBone)
	MAP_NATIVE(AActor,execKAddBoneLifter)
	MAP_NATIVE(AActor,execKScaleJointLimits)
	MAP_NATIVE(AActor,execKFreezeRagdoll)
	MAP_NATIVE(AActor,execKGetSkelMass)
	MAP_NATIVE(AActor,execKSetSkelVel)
	MAP_NATIVE(AActor,execKEnableCollision)
	MAP_NATIVE(AActor,execKDisableCollision)
	MAP_NATIVE(AActor,execKGetActorGravScale)
	MAP_NATIVE(AActor,execKSetActorGravScale)
	MAP_NATIVE(AActor,execKSetBlockKarma)
	MAP_NATIVE(AActor,execKSetStayUprightParams)
	MAP_NATIVE(AActor,execKSetStayUpright)
	MAP_NATIVE(AActor,execKAddAngularImpulse)
	MAP_NATIVE(AActor,execKAddImpulse)
	MAP_NATIVE(AActor,execKIsAwake)
	MAP_NATIVE(AActor,execKWake)
	MAP_NATIVE(AActor,execKGetImpactThreshold)
	MAP_NATIVE(AActor,execKSetImpactThreshold)
	MAP_NATIVE(AActor,execKGetCOMPosition)
	MAP_NATIVE(AActor,execKGetCOMOffset)
	MAP_NATIVE(AActor,execKSetCOMOffset)
	MAP_NATIVE(AActor,execKGetRestitution)
	MAP_NATIVE(AActor,execKSetRestitution)
	MAP_NATIVE(AActor,execKGetFriction)
	MAP_NATIVE(AActor,execKSetFriction)
	MAP_NATIVE(AActor,execKGetDampingProps)
	MAP_NATIVE(AActor,execKSetDampingProps)
	MAP_NATIVE(AActor,execKGetInertiaTensor)
	MAP_NATIVE(AActor,execKSetInertiaTensor)
	MAP_NATIVE(AActor,execKGetMass)
	MAP_NATIVE(AActor,execKSetMass)
	MAP_NATIVE(AActor,execKRBVecFromVector)
	MAP_NATIVE(AActor,execKRBVecToVector)
	MAP_NATIVE(AActor,execKDrawRigidBodyState)
	MAP_NATIVE(AActor,execKGetRigidBodyState)
	MAP_NATIVE(AActor,execKGetRBQuaternion)
	MAP_NATIVE(AActor,execKSetSimParams)
	MAP_NATIVE(AActor,execKGetSimParams)
	MAP_NATIVE(AActor,execOnlyAffectPawns)
	MAP_NATIVE(AActor,execSetPhysics)
	MAP_NATIVE(AActor,execFinishInterpolation)
	MAP_NATIVE(AActor,execDebugUnclock)
	MAP_NATIVE(AActor,execDebugClock)
	MAP_NATIVE(AActor,execClearStayingDebugLines)
	MAP_NATIVE(AActor,execDrawDebugSphere)
	MAP_NATIVE(AActor,execDrawDebugCircle)
	MAP_NATIVE(AActor,execDrawStayingDebugLine)
	MAP_NATIVE(AActor,execDrawDebugLine)
	MAP_NATIVE(AActor,execGetRenderBoundingSphere)
	MAP_NATIVE(AActor,execGetUrlOption)
	MAP_NATIVE(AActor,execUpdateURL)
	MAP_NATIVE(AActor,execGetClosestBone)
	MAP_NATIVE(AActor,execAnimIsInGroup)
	MAP_NATIVE(AActor,execGetAnimParams)
	MAP_NATIVE(AActor,execSetBoneRotation)
	MAP_NATIVE(AActor,execSetBoneLocation)
	MAP_NATIVE(AActor,execSetBoneDirection)
	MAP_NATIVE(AActor,execSetBoneScale)
	MAP_NATIVE(AActor,execLockRootMotion)
	MAP_NATIVE(AActor,execDetachFromBone)
	MAP_NATIVE(AActor,execAttachToBone)
	MAP_NATIVE(AActor,execGetRootRotationDelta)
	MAP_NATIVE(AActor,execGetRootLocationDelta)
	MAP_NATIVE(AActor,execGetRootRotation)
	MAP_NATIVE(AActor,execGetRootLocation)
	MAP_NATIVE(AActor,execGetBoneRotation)
	MAP_NATIVE(AActor,execGetBoneCoords)
	MAP_NATIVE(AActor,execAnimBlendToAlpha)
	MAP_NATIVE(AActor,execAnimBlendParams)
	MAP_NATIVE(AActor,execBoneRefresh)
	MAP_NATIVE(AActor,execLinkMesh)
	MAP_NATIVE(AActor,execLinkSkelAnim)
	MAP_NATIVE(AActor,execGetNotifyChannel)
	MAP_NATIVE(AActor,execEnableChannelNotify)
	MAP_NATIVE(AActor,execAnimStopLooping)
	MAP_NATIVE(AActor,execIsTweening)
	MAP_NATIVE(AActor,execSetAnimFrame)
	MAP_NATIVE(AActor,execFreezeAnimAt)
	MAP_NATIVE(AActor,execStopAnimating)
	MAP_NATIVE(AActor,execHasAnim)
	MAP_NATIVE(AActor,execFinishAnim)
	MAP_NATIVE(AActor,execIsAnimating)
	MAP_NATIVE(AActor,execTweenAnim)
	MAP_NATIVE(AActor,execLoopAnim)
	MAP_NATIVE(AActor,execPlayAnim)
	MAP_NATIVE(AActor,execGetMeshName)
	MAP_NATIVE(AActor,execIsJoinedTo)
	MAP_NATIVE(AActor,execSetOwner)
	MAP_NATIVE(AActor,execSetBase)
	MAP_NATIVE(AActor,execAutonomousPhysics)
	MAP_NATIVE(AActor,execMoveSmooth)
	MAP_NATIVE(AActor,execSetRelativeLocation)
	MAP_NATIVE(AActor,execSetRelativeRotation)
	MAP_NATIVE(AActor,execSetRotation)
	MAP_NATIVE(AActor,execSetLocation)
	MAP_NATIVE(AActor,execMove)
	MAP_NATIVE(AActor,execSetDrawType)
	MAP_NATIVE(AActor,execSetStaticMesh)
	MAP_NATIVE(AActor,execSetDrawScale3D)
	MAP_NATIVE(AActor,execSetDrawScale)
	MAP_NATIVE(AActor,execSetCollisionSize)
	MAP_NATIVE(AActor,execSetCollision)
	MAP_NATIVE(AActor,execSleep)
	MAP_NATIVE(AActor,execShouldBeHidden)
	MAP_NATIVE(AActor,execError)
	MAP_NATIVE(AActor,execTextToSpeech)
	MAP_NATIVE(AActor,execCopyObjectToClipboard)
	MAP_NATIVE(AActor,execConsoleCommand)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AActor);

NATIVE_INFO(UTrailEmitter) GEngineUTrailEmitterNatives[] = 
{ 
	MAP_NATIVE(UTrailEmitter,execResetTrail)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UTrailEmitter);

NATIVE_INFO(UParticleEmitter) GEngineUParticleEmitterNatives[] = 
{ 
	MAP_NATIVE(UParticleEmitter,execReset)
	MAP_NATIVE(UParticleEmitter,execTrigger)
	MAP_NATIVE(UParticleEmitter,execSpawnParticle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UParticleEmitter);

NATIVE_INFO(UMaterial) GEngineUMaterialNatives[] = 
{ 
	MAP_NATIVE(UMaterial,execMaterialVSize)
	MAP_NATIVE(UMaterial,execMaterialUSize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UMaterial);

NATIVE_INFO(ATerrainInfo) GEngineATerrainInfoNatives[] = 
{ 
	MAP_NATIVE(ATerrainInfo,execPokeTerrain)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ATerrainInfo);

NATIVE_INFO(ASVehicle) GEngineASVehicleNatives[] = 
{ 
	MAP_NATIVE(ASVehicle,execUpdateVehicle)
	MAP_NATIVE(ASVehicle,execGraphData)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASVehicle);

NATIVE_INFO(APawn) GEngineAPawnNatives[] = 
{ 
	MAP_NATIVE(APawn,execForceCrouch)
	MAP_NATIVE(APawn,execReachedDestination)
	MAP_NATIVE(APawn,execGet4WayDirection)
	MAP_NATIVE(APawn,execSetTwistLook)
	MAP_NATIVE(APawn,execSetViewPitch)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APawn);

NATIVE_INFO(ASecurity) GEngineASecurityNatives[] = 
{ 
	MAP_NATIVE(ASecurity,execLocalPerform)
	MAP_NATIVE(ASecurity,execNativePerform)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASecurity);

NATIVE_INFO(UScriptedTexture) GEngineUScriptedTextureNatives[] = 
{ 
	MAP_NATIVE(UScriptedTexture,execDrawPortal)
	MAP_NATIVE(UScriptedTexture,execDrawTile)
	MAP_NATIVE(UScriptedTexture,execTextSize)
	MAP_NATIVE(UScriptedTexture,execDrawText)
	MAP_NATIVE(UScriptedTexture,execSetSize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UScriptedTexture);

NATIVE_INFO(ASceneManager) GEngineASceneManagerNatives[] = 
{ 
	MAP_NATIVE(ASceneManager,execAbortScene)
	MAP_NATIVE(ASceneManager,execGetTotalSceneTime)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASceneManager);

NATIVE_INFO(AProjector) GEngineAProjectorNatives[] = 
{ 
	MAP_NATIVE(AProjector,execDetachActor)
	MAP_NATIVE(AProjector,execAttachActor)
	MAP_NATIVE(AProjector,execAbandonProjector)
	MAP_NATIVE(AProjector,execDetachProjector)
	MAP_NATIVE(AProjector,execAttachProjector)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AProjector);

NATIVE_INFO(UPlayInfo) GEngineUPlayInfoNatives[] = 
{ 
	MAP_NATIVE(UPlayInfo,execSort)
	MAP_NATIVE(UPlayInfo,execFindIndex)
	MAP_NATIVE(UPlayInfo,execGetSettings)
	MAP_NATIVE(UPlayInfo,execStoreSetting)
	MAP_NATIVE(UPlayInfo,execSaveSettings)
	MAP_NATIVE(UPlayInfo,execAddSetting)
	MAP_NATIVE(UPlayInfo,execPopClass)
	MAP_NATIVE(UPlayInfo,execRemoveClass)
	MAP_NATIVE(UPlayInfo,execAddClass)
	MAP_NATIVE(UPlayInfo,execClear)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UPlayInfo);

NATIVE_INFO(AEmitter) GEngineAEmitterNatives[] = 
{ 
	MAP_NATIVE(AEmitter,execKill)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AEmitter);

NATIVE_INFO(UInteractionMaster) GEngineUInteractionMasterNatives[] = 
{ 
	MAP_NATIVE(UInteractionMaster,execTravel)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteractionMaster);

NATIVE_INFO(AFluidSurfaceInfo) GEngineAFluidSurfaceInfoNatives[] = 
{ 
	MAP_NATIVE(AFluidSurfaceInfo,execPling)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AFluidSurfaceInfo);

NATIVE_INFO(UCanvas) GEngineUCanvasNatives[] = 
{ 
	MAP_NATIVE(UCanvas,execDrawActorClipped)
	MAP_NATIVE(UCanvas,execDrawTextJustified)
	MAP_NATIVE(UCanvas,execDrawTileScaled)
	MAP_NATIVE(UCanvas,execDrawTileJustified)
	MAP_NATIVE(UCanvas,execDrawTileStretched)
	MAP_NATIVE(UCanvas,execDrawTilePartialStretched)
	MAP_NATIVE(UCanvas,execWrapText)
	MAP_NATIVE(UCanvas,execWrapStringToArray)
	MAP_NATIVE(UCanvas,execClear)
	MAP_NATIVE(UCanvas,execDrawScreenActor)
	MAP_NATIVE(UCanvas,execSetScreenProjector)
	MAP_NATIVE(UCanvas,execSetScreenLight)
	MAP_NATIVE(UCanvas,execGetCameraLocation)
	MAP_NATIVE(UCanvas,execWorldToScreen)
	MAP_NATIVE(UCanvas,execDrawPortal)
	MAP_NATIVE(UCanvas,execTextSize)
	MAP_NATIVE(UCanvas,execDrawTextClipped)
	MAP_NATIVE(UCanvas,execDrawTileClipped)
	MAP_NATIVE(UCanvas,execDrawActor)
	MAP_NATIVE(UCanvas,execDrawTile)
	MAP_NATIVE(UCanvas,execDrawText)
	MAP_NATIVE(UCanvas,execStrLen)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCanvas);

NATIVE_INFO(UCacheManager) GEngineUCacheManagerNatives[] = 
{ 
	MAP_NATIVE(UCacheManager,execGetMapRecord)
	MAP_NATIVE(UCacheManager,execGetGameRecord)
	MAP_NATIVE(UCacheManager,execGetTeamSymbolList)
	MAP_NATIVE(UCacheManager,execGetAnnouncerList)
	MAP_NATIVE(UCacheManager,execGetMutatorList)
	MAP_NATIVE(UCacheManager,execGetCrosshairList)
	MAP_NATIVE(UCacheManager,execGetVehicleList)
	MAP_NATIVE(UCacheManager,execGetWeaponList)
	MAP_NATIVE(UCacheManager,execGetMapList)
	MAP_NATIVE(UCacheManager,execGetGameTypeList)
	MAP_NATIVE(UCacheManager,execIsDefaultContent)
	MAP_NATIVE(UCacheManager,execIsBPContent)
	MAP_NATIVE(UCacheManager,execIs2004Content)
	MAP_NATIVE(UCacheManager,execIs2003Content)
	MAP_NATIVE(UCacheManager,execInitCache)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCacheManager);

NATIVE_INFO(ANavigationPoint) GEngineANavigationPointNatives[] = 
{ 
	MAP_NATIVE(ANavigationPoint,execSetBaseDistance)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ANavigationPoint);

NATIVE_INFO(AVolume) GEngineAVolumeNatives[] = 
{ 
	MAP_NATIVE(AVolume,execEncompasses)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AVolume);

NATIVE_INFO(APlayerController) GEngineAPlayerControllerNatives[] = 
{ 
	MAP_NATIVE(APlayerController,execClientHearSound)
	MAP_NATIVE(APlayerController,execFindStairRotation)
	MAP_NATIVE(APlayerController,execCheckSpeedHack)
	MAP_NATIVE(APlayerController,execServerValidationResponse)
	MAP_NATIVE(APlayerController,execClientValidate)
	MAP_NATIVE(APlayerController,execPasteFromClipboard)
	MAP_NATIVE(APlayerController,execCopyToClipboard)
	MAP_NATIVE(APlayerController,execGetDefaultURL)
	MAP_NATIVE(APlayerController,execGetURLProtocol)
	MAP_NATIVE(APlayerController,execClientTravel)
	MAP_NATIVE(APlayerController,execSetViewTarget)
	MAP_NATIVE(APlayerController,execResetInput)
	MAP_NATIVE(APlayerController,execResetKeyboard)
	MAP_NATIVE(APlayerController,execGetEntryLevel)
	MAP_NATIVE(APlayerController,execConsoleCommand)
	MAP_NATIVE(APlayerController,execGetServerNetworkAddress)
	MAP_NATIVE(APlayerController,execGetPlayerNetworkAddress)
	MAP_NATIVE(APlayerController,execGetPlayerIDHash)
	MAP_NATIVE(APlayerController,execSetNetSpeed)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APlayerController);

NATIVE_INFO(AController) GEngineAControllerNatives[] = 
{ 
	MAP_NATIVE(AController,execCanMakePathTo)
	MAP_NATIVE(AController,execEndClimbLadder)
	MAP_NATIVE(AController,execStopWaiting)
	MAP_NATIVE(AController,execInLatentExecution)
	MAP_NATIVE(AController,execPickAnyTarget)
	MAP_NATIVE(AController,execPickTarget)
	MAP_NATIVE(AController,execRemoveController)
	MAP_NATIVE(AController,execAddController)
	MAP_NATIVE(AController,execFindBestSuperPickup)
	MAP_NATIVE(AController,execFindBestInventoryPath)
	MAP_NATIVE(AController,execWaitForLanding)
	MAP_NATIVE(AController,execPickWallAdjust)
	MAP_NATIVE(AController,execactorReachable)
	MAP_NATIVE(AController,execpointReachable)
	MAP_NATIVE(AController,execEAdjustJump)
	MAP_NATIVE(AController,execFindRandomDest)
	MAP_NATIVE(AController,execFindPathTowardNearest)
	MAP_NATIVE(AController,execFindPathToIntercept)
	MAP_NATIVE(AController,execFindPathToward)
	MAP_NATIVE(AController,execFindPathTo)
	MAP_NATIVE(AController,execCanSee)
	MAP_NATIVE(AController,execLineOfSightTo)
	MAP_NATIVE(AController,execFinishRotation)
	MAP_NATIVE(AController,execMoveToward)
	MAP_NATIVE(AController,execMoveTo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AController);

NATIVE_INFO(AAIController) GEngineAAIControllerNatives[] = 
{ 
	MAP_NATIVE(AAIController,execWaitToSeeEnemy)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AAIController);

NATIVE_INFO(APickup) GEngineAPickupNatives[] = 
{ 
	MAP_NATIVE(APickup,execRemoveFromNavigation)
	MAP_NATIVE(APickup,execAddToNavigation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APickup);

NATIVE_INFO(AHUD) GEngineAHUDNatives[] = 
{ 
	MAP_NATIVE(AHUD,execStaticDrawCanvasLine)
	MAP_NATIVE(AHUD,execDrawCanvasLine)
	MAP_NATIVE(AHUD,execDraw3DLine)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AHUD);

NATIVE_INFO(AWarpZoneInfo) GEngineAWarpZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AWarpZoneInfo,execUnWarp)
	MAP_NATIVE(AWarpZoneInfo,execWarp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWarpZoneInfo);

NATIVE_INFO(AZoneInfo) GEngineAZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AZoneInfo,execZoneActors)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AZoneInfo);

NATIVE_INFO(AGameInfo) GEngineAGameInfoNatives[] = 
{ 
	MAP_NATIVE(AGameInfo,execLoadSRGrammar)
	MAP_NATIVE(AGameInfo,execParseKillMessage)
	MAP_NATIVE(AGameInfo,execGetNetworkNumber)
	MAP_NATIVE(AGameInfo,execLoadMapList)
	MAP_NATIVE(AGameInfo,execDeletePackage)
	MAP_NATIVE(AGameInfo,execSavePackage)
	MAP_NATIVE(AGameInfo,execAllDataObjects)
	MAP_NATIVE(AGameInfo,execLoadDataObject)
	MAP_NATIVE(AGameInfo,execDeleteDataObject)
	MAP_NATIVE(AGameInfo,execCreateDataObject)
	MAP_NATIVE(AGameInfo,execGetSavedGames)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameInfo);

NATIVE_INFO(ALevelInfo) GEngineALevelInfoNatives[] = 
{ 
	MAP_NATIVE(ALevelInfo,execIsPendingConnection)
	MAP_NATIVE(ALevelInfo,execGetAddressURL)
	MAP_NATIVE(ALevelInfo,execIsSoftwareRendering)
	MAP_NATIVE(ALevelInfo,execIsDemoBuild)
	MAP_NATIVE(ALevelInfo,execGetLocalURL)
	MAP_NATIVE(ALevelInfo,execForceLoadTexture)
	MAP_NATIVE(ALevelInfo,execUpdateDistanceFogLOD)
	MAP_NATIVE(ALevelInfo,execIsEntry)
	MAP_NATIVE(ALevelInfo,execDetailChange)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ALevelInfo);

NATIVE_INFO(AWeapon) GEngineAWeaponNatives[] = 
{ 
	MAP_NATIVE(AWeapon,execInitWeaponFires)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWeapon);

NATIVE_INFO(AKVehicle) GEngineAKVehicleNatives[] = 
{ 
	MAP_NATIVE(AKVehicle,execGraphData)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKVehicle);

NATIVE_INFO(UKarmaParamsCollision) GEngineUKarmaParamsCollisionNatives[] = 
{ 
	MAP_NATIVE(UKarmaParamsCollision,execCalcContactRegion)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UKarmaParamsCollision);

NATIVE_INFO(AKConstraint) GEngineAKConstraintNatives[] = 
{ 
	MAP_NATIVE(AKConstraint,execKGetConstraintTorque)
	MAP_NATIVE(AKConstraint,execKGetConstraintForce)
	MAP_NATIVE(AKConstraint,execKUpdateConstraintParams)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AKConstraint);

NATIVE_INFO(AxProcMesh) GEngineAxProcMeshNatives[] = 
{ 
	MAP_NATIVE(AxProcMesh,execProcPling)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AxProcMesh);

NATIVE_INFO(ASceneSubtitles) GEngineASceneSubtitlesNatives[] = 
{ 
	MAP_NATIVE(ASceneSubtitles,execProcessEvent)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ASceneSubtitles);

NATIVE_INFO(AGameStats) GEngineAGameStatsNatives[] = 
{ 
	MAP_NATIVE(AGameStats,execGetMapFileName)
	MAP_NATIVE(AGameStats,execGetStatsIdentifier)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameStats);

NATIVE_INFO(AFileLog) GEngineAFileLogNatives[] = 
{ 
	MAP_NATIVE(AFileLog,execLogf)
	MAP_NATIVE(AFileLog,execCloseLog)
	MAP_NATIVE(AFileLog,execOpenLog)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AFileLog);

#endif // NATIVES_ONLY

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UEngine)
VERIFY_CLASS_SIZE_NODIE(UStreamTag)
VERIFY_CLASS_SIZE_NODIE(UStreamBase)
VERIFY_CLASS_SIZE_NODIE(UStream)
VERIFY_CLASS_SIZE_NODIE(UStreamInterface)
VERIFY_CLASS_SIZE_NODIE(UStreamInteraction)
VERIFY_CLASS_SIZE_NODIE(UInteraction)
VERIFY_CLASS_SIZE_NODIE(UInteractions)
VERIFY_CLASS_SIZE_NODIE(USpline)
VERIFY_CLASS_SIZE_NODIE(ADecoVolumeObject)
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_SIZE_NODIE(ADecorationList)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_SIZE_NODIE(APlayerChatManager)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_SIZE_NODIE(AVoiceChatRoom)
VERIFY_CLASS_SIZE_NODIE(AVoiceChatReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(UTrailEmitter)
VERIFY_CLASS_SIZE_NODIE(UParticleEmitter)
VERIFY_CLASS_SIZE_NODIE(UCubemap)
VERIFY_CLASS_SIZE_NODIE(UTexture)
VERIFY_CLASS_SIZE_NODIE(UBitmapMaterial)
VERIFY_CLASS_SIZE_NODIE(URenderedMaterial)
VERIFY_CLASS_SIZE_NODIE(UMaterial)
VERIFY_CLASS_SIZE_NODIE(UPalette)
VERIFY_CLASS_SIZE_NODIE(UTerrainMaterial)
VERIFY_CLASS_SIZE_NODIE(ATerrainInfo)
VERIFY_CLASS_SIZE_NODIE(USVehicleWheel)
VERIFY_CLASS_SIZE_NODIE(ASVehicle)
VERIFY_CLASS_SIZE_NODIE(AVehicle)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_SIZE_NODIE(AStaticMeshActor)
VERIFY_CLASS_SIZE_NODIE(USpriteEmitter)
VERIFY_CLASS_SIZE_NODIE(USparkEmitter)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_MatSubAction)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Scripted)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Script)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Sound)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_DestroyEffect)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Effect)
VERIFY_CLASS_SIZE_NODIE(UShadowBitmapMaterial)
VERIFY_CLASS_SIZE_NODIE(ASecurity)
VERIFY_CLASS_SIZE_NODIE(UScriptedTexture)
VERIFY_CLASS_SIZE_NODIE(ALookTarget)
VERIFY_CLASS_SIZE_NODIE(USubActionSubTitle)
VERIFY_CLASS_SIZE_NODIE(UMatSubAction)
VERIFY_CLASS_SIZE_NODIE(UMatObject)
VERIFY_CLASS_SIZE_NODIE(USubActionSceneSpeed)
VERIFY_CLASS_SIZE_NODIE(USubActionGameSpeed)
VERIFY_CLASS_SIZE_NODIE(USubActionOrientation)
VERIFY_CLASS_SIZE_NODIE(USubActionCameraShake)
VERIFY_CLASS_SIZE_NODIE(USubActionFOV)
VERIFY_CLASS_SIZE_NODIE(USubActionTrigger)
VERIFY_CLASS_SIZE_NODIE(USubActionFade)
VERIFY_CLASS_SIZE_NODIE(AMatDemoActor)
VERIFY_CLASS_SIZE_NODIE(UActionPause)
VERIFY_CLASS_SIZE_NODIE(UMatAction)
VERIFY_CLASS_SIZE_NODIE(UActionMoveCamera)
VERIFY_CLASS_SIZE_NODIE(UMeshObject)
VERIFY_CLASS_SIZE_NODIE(ASceneManager)
VERIFY_CLASS_SIZE_NODIE(UProjectorMaterial)
VERIFY_CLASS_SIZE_NODIE(AProjector)
VERIFY_CLASS_SIZE_NODIE(UPlayInfo)
VERIFY_CLASS_SIZE_NODIE(UPlayer)
VERIFY_CLASS_SIZE_NODIE(UParticleMaterial)
VERIFY_CLASS_SIZE_NODIE(AEmitter)
VERIFY_CLASS_SIZE_NODIE(AMover)
VERIFY_CLASS_SIZE_NODIE(UMeshEmitter)
VERIFY_CLASS_SIZE_NODIE(UOpacityModifier)
VERIFY_CLASS_SIZE_NODIE(UModifier)
VERIFY_CLASS_SIZE_NODIE(UMaterialSequence)
VERIFY_CLASS_SIZE_NODIE(UMaterialSwitch)
VERIFY_CLASS_SIZE_NODIE(UFinalBlend)
VERIFY_CLASS_SIZE_NODIE(UVertexColor)
VERIFY_CLASS_SIZE_NODIE(UTexCoordSource)
VERIFY_CLASS_SIZE_NODIE(UTexModifier)
VERIFY_CLASS_SIZE_NODIE(UTexMatrix)
VERIFY_CLASS_SIZE_NODIE(UTexEnvMap)
VERIFY_CLASS_SIZE_NODIE(UTexOscillator)
VERIFY_CLASS_SIZE_NODIE(UTexOscillatorTriggered)
VERIFY_CLASS_SIZE_NODIE(UTexRotator)
VERIFY_CLASS_SIZE_NODIE(UTexScaler)
VERIFY_CLASS_SIZE_NODIE(UVariableTexPanner)
VERIFY_CLASS_SIZE_NODIE(UTexPanner)
VERIFY_CLASS_SIZE_NODIE(UTexPannerTriggered)
VERIFY_CLASS_SIZE_NODIE(UFadeColor)
VERIFY_CLASS_SIZE_NODIE(UConstantMaterial)
VERIFY_CLASS_SIZE_NODIE(UConstantColor)
VERIFY_CLASS_SIZE_NODIE(UCombiner)
VERIFY_CLASS_SIZE_NODIE(UShader)
VERIFY_CLASS_SIZE_NODIE(UColorModifier)
VERIFY_CLASS_SIZE_NODIE(UInteractionMaster)
VERIFY_CLASS_SIZE_NODIE(UBaseGUIController)
VERIFY_CLASS_SIZE_NODIE(UConsole)
VERIFY_CLASS_SIZE_NODIE(AMaplistManagerBase)
VERIFY_CLASS_SIZE_NODIE(APrecacheHack)
VERIFY_CLASS_SIZE_NODIE(UCrosshairPack)
VERIFY_CLASS_SIZE_NODIE(UGameEngine)
VERIFY_CLASS_SIZE_NODIE(AFluidSurfaceOscillator)
VERIFY_CLASS_SIZE_NODIE(AFluidSurfaceInfo)
VERIFY_CLASS_SIZE_NODIE(UAdminBase)
VERIFY_CLASS_SIZE_NODIE(UPlayerInput)
VERIFY_CLASS_SIZE_NODIE(UCheatManager)
VERIFY_CLASS_SIZE_NODIE(UCanvas)
VERIFY_CLASS_SIZE_NODIE(UCameraOverlay)
VERIFY_CLASS_SIZE_NODIE(UCameraEffect)
VERIFY_CLASS_SIZE_NODIE(UMotionBlur)
VERIFY_CLASS_SIZE_NODIE(USubActionCameraEffect)
VERIFY_CLASS_SIZE_NODIE(UCacheManager)
VERIFY_CLASS_SIZE_NODIE(UBeamEmitter)
VERIFY_CLASS_SIZE_NODIE(UI3DL2Listener)
VERIFY_CLASS_SIZE_NODIE(USoundGroup)
VERIFY_CLASS_SIZE_NODIE(USound)
VERIFY_CLASS_SIZE_NODIE(UProceduralSound)
VERIFY_CLASS_SIZE_NODIE(AAnnouncerVoice)
VERIFY_CLASS_SIZE_NODIE(ARoadPathNode)
VERIFY_CLASS_SIZE_NODIE(APathNode)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_SIZE_NODIE(AFlyingPathNode)
VERIFY_CLASS_SIZE_NODIE(UGameProfile)
VERIFY_CLASS_SIZE_NODIE(AMutator)
VERIFY_CLASS_SIZE_NODIE(AAvoidMarker)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_SIZE_NODIE(UManifest)
VERIFY_CLASS_SIZE_NODIE(AJumpDest)
VERIFY_CLASS_SIZE_NODIE(AJumpPad)
VERIFY_CLASS_SIZE_NODIE(AAntiPortalActor)
VERIFY_CLASS_SIZE_NODIE(AWeaponAttachment)
VERIFY_CLASS_SIZE_NODIE(AInventoryAttachment)
VERIFY_CLASS_SIZE_NODIE(ATeamInfo)
VERIFY_CLASS_SIZE_NODIE(AAutoDoor)
VERIFY_CLASS_SIZE_NODIE(ADoor)
VERIFY_CLASS_SIZE_NODIE(AAutoLadder)
VERIFY_CLASS_SIZE_NODIE(ALadder)
VERIFY_CLASS_SIZE_NODIE(ASmallNavigationPoint)
VERIFY_CLASS_SIZE_NODIE(ABlockingVolume)
VERIFY_CLASS_SIZE_NODIE(AVolume)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_SIZE_NODIE(APotentialClimbWatcher)
VERIFY_CLASS_SIZE_NODIE(ALadderVolume)
VERIFY_CLASS_SIZE_NODIE(APhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(ADefaultPhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(ALineOfSightTrigger)
VERIFY_CLASS_SIZE_NODIE(AAIScript)
VERIFY_CLASS_SIZE_NODIE(ADamageType)
VERIFY_CLASS_SIZE_NODIE(ASVehicleTrigger)
VERIFY_CLASS_SIZE_NODIE(ASVehicleFactory)
VERIFY_CLASS_SIZE_NODIE(AVehiclePart)
VERIFY_CLASS_SIZE_NODIE(APlayerController)
VERIFY_CLASS_SIZE_NODIE(AController)
VERIFY_CLASS_SIZE_NODIE(AAIController)
VERIFY_CLASS_SIZE_NODIE(AAmmunition)
VERIFY_CLASS_SIZE_NODIE(AInventory)
VERIFY_CLASS_SIZE_NODIE(APowerups)
VERIFY_CLASS_SIZE_NODIE(APickup)
VERIFY_CLASS_SIZE_NODIE(AAmmo)
VERIFY_CLASS_SIZE_NODIE(ULogEntry)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_SIZE_NODIE(ALinkedReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(ALiftExit)
VERIFY_CLASS_SIZE_NODIE(ALiftCenter)
VERIFY_CLASS_SIZE_NODIE(ASavedMove)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneMarker)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_SIZE_NODIE(AAIMarker)
VERIFY_CLASS_SIZE_NODIE(AInventorySpot)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_SIZE_NODIE(AInterpolationPoint)
VERIFY_CLASS_SIZE_NODIE(AScout)
VERIFY_CLASS_SIZE_NODIE(UReachSpec)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_SIZE_NODIE(UTextToSpeechAlias)
VERIFY_CLASS_SIZE_NODIE(AAmbientSound)
VERIFY_CLASS_SIZE_NODIE(AVignette)
VERIFY_CLASS_SIZE_NODIE(ANote)
VERIFY_CLASS_SIZE_NODIE(UWeaponFire)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_SIZE_NODIE(APolyMarker)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_SIZE_NODIE(ALight)
VERIFY_CLASS_SIZE_NODIE(AKRepulsor)
VERIFY_CLASS_SIZE_NODIE(AKVehicle)
VERIFY_CLASS_SIZE_NODIE(AKTire)
VERIFY_CLASS_SIZE_NODIE(AKActor)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsSkel)
VERIFY_CLASS_SIZE_NODIE(UKarmaParams)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsCollision)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsRBFull)
VERIFY_CLASS_SIZE_NODIE(AKCarWheelJoint)
VERIFY_CLASS_SIZE_NODIE(AKConstraint)
VERIFY_CLASS_SIZE_NODIE(AKConeLimit)
VERIFY_CLASS_SIZE_NODIE(AKHinge)
VERIFY_CLASS_SIZE_NODIE(AKBSJoint)
VERIFY_CLASS_SIZE_NODIE(AxWeatherEffect)
VERIFY_CLASS_SIZE_NODIE(AxProcMesh)
VERIFY_CLASS_SIZE_NODIE(AxPickUpBase)
VERIFY_CLASS_SIZE_NODIE(AxEmitter)
VERIFY_CLASS_SIZE_NODIE(ASceneSubtitles)
VERIFY_CLASS_SIZE_NODIE(AGameStats)
VERIFY_CLASS_SIZE_NODIE(AFileLog)
#endif // VERIFY_CLASS_SIZES
