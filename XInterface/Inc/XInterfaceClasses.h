/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef XINTERFACE_API
#define XINTERFACE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern XINTERFACE_API FName XINTERFACE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AddBuddy)
AUTOGENERATE_NAME(AddComponent)
AUTOGENERATE_NAME(AddComponentClass)
AUTOGENERATE_NAME(AdditionalDebugString)
AUTOGENERATE_NAME(AlignThumb)
AUTOGENERATE_NAME(AppendComponent)
AUTOGENERATE_NAME(BeginAnimation)
AUTOGENERATE_NAME(CalculateIndex)
AUTOGENERATE_NAME(CanAcceptFocus)
AUTOGENERATE_NAME(CanFocusElement)
AUTOGENERATE_NAME(CanShowHints)
AUTOGENERATE_NAME(ChangeFocus)
AUTOGENERATE_NAME(ChangeHint)
AUTOGENERATE_NAME(CheckLinkedObjects)
AUTOGENERATE_NAME(Closed)
AUTOGENERATE_NAME(CompareItem)
AUTOGENERATE_NAME(CreateMenu)
AUTOGENERATE_NAME(DropStateChange)
AUTOGENERATE_NAME(ElementVisible)
AUTOGENERATE_NAME(EndAnimation)
AUTOGENERATE_NAME(EnterArea)
AUTOGENERATE_NAME(FindMenuIndex)
AUTOGENERATE_NAME(FindMenuIndexByName)
AUTOGENERATE_NAME(FindPersistentMenuByName)
AUTOGENERATE_NAME(FindPersistentMenuIndex)
AUTOGENERATE_NAME(FocusFirst)
AUTOGENERATE_NAME(FocusLast)
AUTOGENERATE_NAME(Free)
AUTOGENERATE_NAME(GetFont)
AUTOGENERATE_NAME(GetHeight)
AUTOGENERATE_NAME(GetItemHeight)
AUTOGENERATE_NAME(GetLeft)
AUTOGENERATE_NAME(GetMarkerPosition)
AUTOGENERATE_NAME(GetMenuFont)
AUTOGENERATE_NAME(GetSortString)
AUTOGENERATE_NAME(GetStyle)
AUTOGENERATE_NAME(GetTop)
AUTOGENERATE_NAME(GetWidth)
AUTOGENERATE_NAME(HandleContextMenuClose)
AUTOGENERATE_NAME(HandleContextMenuOpen)
AUTOGENERATE_NAME(HandleParameters)
AUTOGENERATE_NAME(HasChildren)
AUTOGENERATE_NAME(Hide)
AUTOGENERATE_NAME(HideToolTip)
AUTOGENERATE_NAME(InitComponent)
AUTOGENERATE_NAME(Initialize)
AUTOGENERATE_NAME(InitializeColumns)
AUTOGENERATE_NAME(InsertComponent)
AUTOGENERATE_NAME(IsExpanded)
AUTOGENERATE_NAME(IsMultiSelect)
AUTOGENERATE_NAME(LeaveArea)
AUTOGENERATE_NAME(LoseFocus)
AUTOGENERATE_NAME(MakeTabActive)
AUTOGENERATE_NAME(MenuStateChange)
AUTOGENERATE_NAME(MoveFocused)
AUTOGENERATE_NAME(MoveGripBy)
AUTOGENERATE_NAME(NextControl)
AUTOGENERATE_NAME(NextPage)
AUTOGENERATE_NAME(NotifyContextSelect)
AUTOGENERATE_NAME(OnActivate)
AUTOGENERATE_NAME(OnAdjustTop)
AUTOGENERATE_NAME(OnArrival)
AUTOGENERATE_NAME(OnBeginDrag)
AUTOGENERATE_NAME(OnBeginTooltip)
AUTOGENERATE_NAME(OnCanClose)
AUTOGENERATE_NAME(OnCapturedMouseMove)
AUTOGENERATE_NAME(OnChange)
AUTOGENERATE_NAME(OnClick)
AUTOGENERATE_NAME(OnClose)
AUTOGENERATE_NAME(OnColumnSized)
AUTOGENERATE_NAME(OnContextHitTest)
AUTOGENERATE_NAME(OnCreateComponent)
AUTOGENERATE_NAME(OnDblClick)
AUTOGENERATE_NAME(OnDeActivate)
AUTOGENERATE_NAME(OnDesignModeKeyEvent)
AUTOGENERATE_NAME(OnDragDrop)
AUTOGENERATE_NAME(OnDragEnter)
AUTOGENERATE_NAME(OnDragLeave)
AUTOGENERATE_NAME(OnDragOver)
AUTOGENERATE_NAME(OnDraw)
AUTOGENERATE_NAME(OnDrawCaption)
AUTOGENERATE_NAME(OnDrawItem)
AUTOGENERATE_NAME(OnDrawText)
AUTOGENERATE_NAME(OnEndAnimation)
AUTOGENERATE_NAME(OnEndDrag)
AUTOGENERATE_NAME(OnEndOfLine)
AUTOGENERATE_NAME(OnEndTooltip)
AUTOGENERATE_NAME(OnHide)
AUTOGENERATE_NAME(OnHideList)
AUTOGENERATE_NAME(OnHitTest)
AUTOGENERATE_NAME(OnHover)
AUTOGENERATE_NAME(OnInvalidate)
AUTOGENERATE_NAME(OnKeyEvent)
AUTOGENERATE_NAME(OnKeyType)
AUTOGENERATE_NAME(OnLoadINI)
AUTOGENERATE_NAME(OnMessage)
AUTOGENERATE_NAME(OnMinusClick)
AUTOGENERATE_NAME(OnMousePressed)
AUTOGENERATE_NAME(OnMouseRelease)
AUTOGENERATE_NAME(OnMultiSelect)
AUTOGENERATE_NAME(OnNeedRawKeyPress)
AUTOGENERATE_NAME(OnOpen)
AUTOGENERATE_NAME(OnPlusClick)
AUTOGENERATE_NAME(OnPostDraw)
AUTOGENERATE_NAME(OnPreDraw)
AUTOGENERATE_NAME(OnPreDrawCaption)
AUTOGENERATE_NAME(OnReleaseSplitter)
AUTOGENERATE_NAME(OnRender)
AUTOGENERATE_NAME(OnRendered)
AUTOGENERATE_NAME(OnReOpen)
AUTOGENERATE_NAME(OnRightClick)
AUTOGENERATE_NAME(OnSaveINI)
AUTOGENERATE_NAME(OnScrollBy)
AUTOGENERATE_NAME(OnScrollZoneClick)
AUTOGENERATE_NAME(OnSelect)
AUTOGENERATE_NAME(OnShow)
AUTOGENERATE_NAME(OnShowList)
AUTOGENERATE_NAME(OnSortChanged)
AUTOGENERATE_NAME(OnTimer)
AUTOGENERATE_NAME(OnTrack)
AUTOGENERATE_NAME(OnWatch)
AUTOGENERATE_NAME(Opened)
AUTOGENERATE_NAME(OwnerPage)
AUTOGENERATE_NAME(PopMenu)
AUTOGENERATE_NAME(PositionChanged)
AUTOGENERATE_NAME(PrevControl)
AUTOGENERATE_NAME(PrevPage)
AUTOGENERATE_NAME(PushMenu)
AUTOGENERATE_NAME(RemoveComponent)
AUTOGENERATE_NAME(RemoveMenu)
AUTOGENERATE_NAME(ResetItem)
AUTOGENERATE_NAME(ResolutionChanged)
AUTOGENERATE_NAME(SetFocus)
AUTOGENERATE_NAME(SetText)
AUTOGENERATE_NAME(SetVisibility)
AUTOGENERATE_NAME(Show)
AUTOGENERATE_NAME(ShowToolTip)
AUTOGENERATE_NAME(Swap)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(UpdatePosition)
AUTOGENERATE_NAME(Validate)
AUTOGENERATE_NAME(ValidIndex)
AUTOGENERATE_NAME(ValidSelection)
AUTOGENERATE_NAME(ValidSelectionAt)

#ifndef NAMES_ONLY

struct XINTERFACE_API FProfileStruct
{
    FStringNoInit ProfileName GCC_PACK(4);
    FLOAT ProfileSeconds;
};

struct XINTERFACE_API FeOwnageMap
{
    INT RLevel GCC_PACK(4);
    FStringNoInit MapName;
    FStringNoInit MapDesc;
    FStringNoInit MapURL;
};

struct XINTERFACE_API FAutoLoadMenu
{
    FStringNoInit MenuClassName GCC_PACK(4);
    BITFIELD bPreInitialize:1 GCC_PACK(4);
};

struct XINTERFACE_API FRestoreMenuItem
{
    FString MenuClassName GCC_PACK(4);
    FString Param1;
    FString Param2;
};

struct XINTERFACE_API FDesignModeHint
{
    FStringNoInit Key GCC_PACK(4);
    FStringNoInit Description;
};

#define UCONST_DoCounter 1

struct UGUIController_eventValidate_Parms
{
};
struct UGUIController_eventCanShowHints_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIController_eventMoveFocused_Parms
{
    class UGUIComponent* C;
    INT bmLeft;
    INT bmTop;
    INT bmWidth;
    INT bmHeight;
    FLOAT ClipX;
    FLOAT ClipY;
    FLOAT Val;
};
struct UGUIController_eventChangeFocus_Parms
{
    class UGUIComponent* Who;
};
struct UGUIController_eventRemoveMenu_Parms
{
    class UGUIPage* Menu;
    BITFIELD bCancelled;
    BITFIELD ReturnValue;
};
struct UGUIController_eventPopMenu_Parms
{
    INT Index;
    class UGUIPage* CurMenu;
    BITFIELD bCancelled;
};
struct UGUIController_eventPushMenu_Parms
{
    INT Index;
    class UGUIPage* NewMenu;
    FString Param1;
    FString Param2;
};
struct UGUIController_eventCreateMenu_Parms
{
    FString NewMenuName;
    class UGUIPage* ReturnValue;
};
struct UGUIController_eventFindPersistentMenuIndex_Parms
{
    class UGUIPage* Menu;
    INT ReturnValue;
};
struct UGUIController_eventFindMenuIndex_Parms
{
    class UGUIPage* Menu;
    INT ReturnValue;
};
struct UGUIController_eventFindMenuIndexByName_Parms
{
    FString MenuClass;
    INT ReturnValue;
};
struct UGUIController_eventFindPersistentMenuByName_Parms
{
    FString MenuClass;
    class UGUIPage* ReturnValue;
};
struct UGUIController_eventAddComponentClass_Parms
{
    FString ClassName;
    class UClass* ReturnValue;
};
struct UGUIController_eventGetStyle_Parms
{
    FString StyleName;
    BYTE FontScale;
    class UGUIStyles* ReturnValue;
};
struct UGUIController_eventGetMenuFont_Parms
{
    FString FontName;
    class UGUIFont* ReturnValue;
};
struct UGUIController_eventAddBuddy_Parms
{
    FString NewBuddyName;
};
struct UGUIController_eventOnNeedRawKeyPress_Parms
{
    BYTE NewKey;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUIController : public UBaseGUIController
{
public:
    INT FONT_NUM GCC_PACK(4);
    INT STYLE_NUM;
    INT CURSOR_NUM;
    TArrayNoInit<FProfileStruct> Profilers;
    FFloatBox MouseCursorBounds;
    TArrayNoInit<FVector> MouseCursorOffset;
    TArrayNoInit<class UGUIPage*> MenuStack;
    TArrayNoInit<class UGUIPage*> PersistentStack;
    TArrayNoInit<class UGUIFont*> FontStack;
    TArrayNoInit<class UGUIStyles*> StyleStack;
    TArrayNoInit<class UMaterial*> MouseCursors;
    TArrayNoInit<class UMaterial*> ImageList;
    TArrayNoInit<FString> DefaultStyleNames;
    TArrayNoInit<FString> StyleNames;
    TArrayNoInit<FAutoLoadMenu> AutoLoad;
    TArrayNoInit<FRestoreMenuItem> RestoreMenus;
    TArrayNoInit<FDesignModeHint> DesignModeHints;
    FLOAT MenuMouseSens;
    FLOAT MouseX;
    FLOAT MouseY;
    FLOAT LastMouseX;
    FLOAT LastMouseY;
    FLOAT DblClickWindow;
    FLOAT LastClickTime;
    FLOAT ButtonRepeatDelay;
    FLOAT RepeatDelta;
    FLOAT RepeatTime;
    FLOAT CursorFade;
    FLOAT FastCursorFade;
    INT MaxSimultaneousPings;
    INT FastCursorStep;
    INT ResX;
    INT ResY;
    INT LastClickX;
    INT LastClickY;
    INT CursorStep;
    PTRINT Designer;
    class USound* MouseOverSound;
    class USound* ClickSound;
    class USound* EditSound;
    class USound* UpSound;
    class USound* DownSound;
    class USound* DragSound;
    class USound* FadeSound;
    class UGUIPage* ActivePage;
    class UGUIComponent* FocusedControl;
    class UGUIComponent* ActiveControl;
    class UGUIComponent* SkipControl;
    class UGUIComponent* MoveControl;
    class UGUIComponent* DropSource;
    class UGUIComponent* DropTarget;
    class UGUIContextMenu* ContextMenu;
    class UGUIToolTip* MouseOver;
    class UMaterial* WhiteBorder;
    FStringNoInit GameResolution;
    FStringNoInit LastGameType;
    FStringNoInit RequestDataMenu;
    FStringNoInit ArrayPropertyMenu;
    FStringNoInit DynArrayPropertyMenu;
    FStringNoInit FilterMenu;
    FStringNoInit MapVotingMenu;
    FStringNoInit KickVotingMenu;
    FStringNoInit MatchSetupMenu;
    FStringNoInit EditFavoriteMenu;
    TArrayNoInit<FString> MainMenuOptions;
    FStringNoInit DesignerMenu;
    BYTE RepeatKey;
    BITFIELD bIgnoreNextRelease:1 GCC_PACK(4);
    BITFIELD ShiftPressed:1;
    BITFIELD AltPressed:1;
    BITFIELD CtrlPressed:1;
    BITFIELD bModulateStackedMenus:1;
    BITFIELD bQuietMenu:1;
    BITFIELD bNoToolTips:1;
    BITFIELD bDesignModeToolTips:1;
    BITFIELD bAutoRefreshBrowser:1;
    BITFIELD bModAuthor:1;
    BITFIELD bExpertMode:1;
    BITFIELD bDesignMode:1;
    BITFIELD bInteractiveMode:1;
    BITFIELD bHighlightCurrent:1;
    BITFIELD bDrawFullPaths:1;
    BITFIELD MainNotWanted:1;
    BITFIELD bCurMenuInitialized:1;
    BITFIELD bForceMouseCheck:1;
    BITFIELD bIgnoreUntilPress:1;
    BITFIELD bSnapCursor:1;
    FLOAT RenderDelta GCC_PACK(4);
    FLOAT LastRenderTime;
    BYTE KeyDown[255];
    TArrayNoInit<class UClass*> RegisteredClasses GCC_PACK(4);
    FScriptDelegate __OnNeedRawKeyPress__Delegate;
    FScriptDelegate __AddBuddy__Delegate;
    DECLARE_FUNCTION(execGetMainMenuClass);
    DECLARE_FUNCTION(execLaunchURL);
    DECLARE_FUNCTION(execGetMapList);
    DECLARE_FUNCTION(execGetWeaponList);
    DECLARE_FUNCTION(execSaveOwnageList);
    DECLARE_FUNCTION(execGetOwnageList);
    DECLARE_FUNCTION(execGetDEMHeader);
    DECLARE_FUNCTION(execGetDEMList);
    DECLARE_FUNCTION(execProfile);
    DECLARE_FUNCTION(execSetMoveControl);
    DECLARE_FUNCTION(execPlayInterfaceSound);
    DECLARE_FUNCTION(execGetOGGList);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetProfileList);
    DECLARE_FUNCTION(execResetInput);
    DECLARE_FUNCTION(execResetDesigner);
    DECLARE_FUNCTION(execSetRenderDevice);
    DECLARE_FUNCTION(execGetCurrentRes);
    DECLARE_FUNCTION(execGetStyle);
    DECLARE_FUNCTION(execGetMenuFont);
    void eventValidate()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Validate),NULL);
    }
    BITFIELD eventCanShowHints()
    {
        UGUIController_eventCanShowHints_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_CanShowHints),&Parms);
        return Parms.ReturnValue;
    }
    void eventMoveFocused(class UGUIComponent* C, INT bmLeft, INT bmTop, INT bmWidth, INT bmHeight, FLOAT ClipX, FLOAT ClipY, FLOAT Val)
    {
        UGUIController_eventMoveFocused_Parms Parms;
        Parms.C=C;
        Parms.bmLeft=bmLeft;
        Parms.bmTop=bmTop;
        Parms.bmWidth=bmWidth;
        Parms.bmHeight=bmHeight;
        Parms.ClipX=ClipX;
        Parms.ClipY=ClipY;
        Parms.Val=Val;
        ProcessEvent(FindFunctionChecked(XINTERFACE_MoveFocused),&Parms);
    }
    void eventChangeFocus(class UGUIComponent* Who)
    {
        UGUIController_eventChangeFocus_Parms Parms;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ChangeFocus),&Parms);
    }
    BITFIELD eventRemoveMenu(class UGUIPage* Menu, BITFIELD bCancelled)
    {
        UGUIController_eventRemoveMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Menu=Menu;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_RemoveMenu),&Parms);
        return Parms.ReturnValue;
    }
    void eventPopMenu(INT Index, class UGUIPage* CurMenu, BITFIELD bCancelled)
    {
        UGUIController_eventPopMenu_Parms Parms;
        Parms.Index=Index;
        Parms.CurMenu=CurMenu;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_PopMenu),&Parms);
    }
    void eventPushMenu(INT Index, class UGUIPage* NewMenu, const FString& Param1, const FString& Param2)
    {
        UGUIController_eventPushMenu_Parms Parms;
        Parms.Index=Index;
        Parms.NewMenu=NewMenu;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(XINTERFACE_PushMenu),&Parms);
    }
    class UGUIPage* eventCreateMenu(const FString& NewMenuName)
    {
        UGUIController_eventCreateMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMenuName=NewMenuName;
        ProcessEvent(FindFunctionChecked(XINTERFACE_CreateMenu),&Parms);
        return Parms.ReturnValue;
    }
    INT eventFindPersistentMenuIndex(class UGUIPage* Menu)
    {
        UGUIController_eventFindPersistentMenuIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Menu=Menu;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FindPersistentMenuIndex),&Parms);
        return Parms.ReturnValue;
    }
    INT eventFindMenuIndex(class UGUIPage* Menu)
    {
        UGUIController_eventFindMenuIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Menu=Menu;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FindMenuIndex),&Parms);
        return Parms.ReturnValue;
    }
    INT eventFindMenuIndexByName(const FString& MenuClass)
    {
        UGUIController_eventFindMenuIndexByName_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MenuClass=MenuClass;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FindMenuIndexByName),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIPage* eventFindPersistentMenuByName(const FString& MenuClass)
    {
        UGUIController_eventFindPersistentMenuByName_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MenuClass=MenuClass;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FindPersistentMenuByName),&Parms);
        return Parms.ReturnValue;
    }
    class UClass* eventAddComponentClass(const FString& ClassName)
    {
        UGUIController_eventAddComponentClass_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ClassName=ClassName;
        ProcessEvent(FindFunctionChecked(XINTERFACE_AddComponentClass),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIStyles* eventGetStyle(const FString& StyleName, BYTE& FontScale)
    {
        UGUIController_eventGetStyle_Parms Parms;
        Parms.ReturnValue=0;
        Parms.StyleName=StyleName;
        Parms.FontScale=FontScale;
        ProcessEvent(FindFunctionChecked(XINTERFACE_GetStyle),&Parms);
        FontScale=Parms.FontScale;
        return Parms.ReturnValue;
    }
    class UGUIFont* eventGetMenuFont(const FString& FontName)
    {
        UGUIController_eventGetMenuFont_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FontName=FontName;
        ProcessEvent(FindFunctionChecked(XINTERFACE_GetMenuFont),&Parms);
        return Parms.ReturnValue;
    }
    void delegateAddBuddy(const FString& NewBuddyName)
    {
        UGUIController_eventAddBuddy_Parms Parms;
        Parms.NewBuddyName=NewBuddyName;
        ProcessDelegate(XINTERFACE_AddBuddy,&__AddBuddy__Delegate,&Parms);
    }
    BITFIELD delegateOnNeedRawKeyPress(BYTE NewKey)
    {
        UGUIController_eventOnNeedRawKeyPress_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewKey=NewKey;
        ProcessDelegate(XINTERFACE_OnNeedRawKeyPress,&__OnNeedRawKeyPress__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIController,UBaseGUIController,0|CLASS_Config,XInterface)
		void GetCursorPos( INT& ptX, INT& ptY );
        void  NativeMessage(const FString Msg, FLOAT MsgLife);
        UBOOL NativeKeyType(BYTE& iKey, TCHAR Unicode );
        UBOOL NativeKeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta );
        void  NativeTick(FLOAT DeltaTime);
        void  NativePreRender(UCanvas* Canvas);
        void  NativePostRender(UCanvas* Canvas);
        void ResolutionChanged( INT NewX, INT NewY );

		void ResetInput();

		UBOOL DesignKeyEvent( BYTE iKey, BYTE State, FLOAT Delta );
        void  RenderDesignMode( UCanvas* Canvas );

        virtual void LookUnderCursor(FLOAT dX, FLOAT dY);
        UGUIComponent* UnderCursor(FLOAT MouseX, FLOAT MouseY);

        UBOOL virtual MousePressed(UBOOL IsRepeat);
        UBOOL virtual MouseReleased();

        UBOOL HasMouseMoved( FLOAT ErrorMargin = 0.f );

        void PlayInterfaceSound(USound* sound);
        void PlayComponentSound(BYTE SoundNum);

        void Profile(FString& ProfileName);
        void Destroy();

        // Design mode
        void CreatePropertyWindow();
        void HidePropertyWindow();
        void  SetMoveControl( UGUIComponent* C );
        UBOOL DesignerVisible();

        UBOOL ShowProperties( UGUIComponent* Comp );
		void ResetDesigner();
};

enum EScaleMode
{
    SM_None                 =0,
    SM_Up                   =1,
    SM_Down                 =2,
    SM_Left                 =3,
    SM_Right                =4,
    SM_MAX                  =5,
};
struct XINTERFACE_API FDigitSet
{
    class UMaterial* DigitTexture GCC_PACK(4);
    FIntBox TextureCoords[11];
};

struct XINTERFACE_API FSpriteWidget
{
    class UMaterial* WidgetTexture GCC_PACK(4);
    BYTE RenderStyle;
    FIntBox TextureCoords GCC_PACK(4);
    FLOAT TextureScale;
    BYTE DrawPivot;
    FLOAT PosX GCC_PACK(4);
    FLOAT PosY;
    INT OffsetX;
    INT OffsetY;
    BYTE ScaleMode;
    FLOAT Scale GCC_PACK(4);
    FColor Tints[2];
};

struct XINTERFACE_API FNumericWidget
{
    BYTE RenderStyle GCC_PACK(4);
    INT MinDigitCount GCC_PACK(4);
    FLOAT TextureScale;
    BYTE DrawPivot;
    FLOAT PosX GCC_PACK(4);
    FLOAT PosY;
    INT OffsetX;
    INT OffsetY;
    FColor Tints[2];
    INT bPadWithZeroes;
    INT Value;
};

struct XINTERFACE_API FHudLocalizedMessage
{
    class UClass* Message GCC_PACK(4);
    FStringNoInit StringMessage;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI;
    class APlayerReplicationInfo* RelatedPRI2;
    class UObject* OptionalObject;
    FLOAT EndOfLife;
    FLOAT Lifetime;
    class UFont* StringFont;
    FColor DrawColor;
    BYTE DrawPivot;
    BYTE StackMode;
    FLOAT PosX GCC_PACK(4);
    FLOAT PosY;
    FLOAT dx;
    FLOAT dy;
    BITFIELD Drawn:1 GCC_PACK(4);
};


class XINTERFACE_API AHudBase : public AHUD
{
public:
    INT TeamIndex GCC_PACK(4);
    BYTE PassStyle;
    FHudLocalizedMessage LocalMessages[8] GCC_PACK(4);
    class UClass* VoteMenuClass;
    class UMaterial* TargetMaterial;
    BITFIELD bShowTargeting:1 GCC_PACK(4);
    FVector TargetingLocation GCC_PACK(4);
    FLOAT TargetingSize;
    FStringNoInit InstructionText;
    FStringNoInit InstructionKeyText;
    FLOAT InstructTextBorderX;
    FLOAT InstructTextBorderY;
    FLOAT InstrDelta;
    FLOAT InstrRate;
    FStringNoInit InstructionFontName;
    class UFont* InstructionFontFont;
    BITFIELD bUsingCustomHUDColor:1 GCC_PACK(4);
    BITFIELD DoCropping:1;
    BITFIELD bIsCinematic:1;
    BYTE FontsPrecached GCC_PACK(4);
    BITFIELD bHideWeaponName:1 GCC_PACK(4);
    FLOAT CroppingAmount GCC_PACK(4);
    class UMaterial* CroppingMaterial;
    FStringNoInit LastWeaponName;
    FLOAT WeaponDrawTimer;
    FColor WeaponDrawColor;
    FStringNoInit Text;
    FStringNoInit LevelActionLoading;
    FStringNoInit LevelActionPaused;
    FStringNoInit LevelActionFontName;
    FStringNoInit WonMatchPrefix;
    FStringNoInit WonMatchPostFix;
    FStringNoInit WaitingToSpawn;
    FStringNoInit AtMenus;
    FStringNoInit YouveWonTheMatch;
    FStringNoInit YouveLostTheMatch;
    FStringNoInit NowViewing;
    FStringNoInit ScoreText;
    FStringNoInit InitialViewingString;
    class UMaterial* LocationDot;
    FColor DamageFlash[4];
    FLOAT DamageTime[4];
    BYTE Emphasized[4];
    TArrayNoInit<FSpriteWidget> Crosshairs GCC_PACK(4);
    FColor CustomHUDColor;
    BITFIELD bUseCustomWeaponCrosshairs:1 GCC_PACK(4);
    DECLARE_FUNCTION(execDrawNumericWidget);
    DECLARE_FUNCTION(execDrawSpriteWidget);
    DECLARE_CLASS(AHudBase,AHUD,0|CLASS_Transient|CLASS_Config,XInterface)

	void	CalcPivotCoords( EDrawPivot DrawPivot, FLOAT& ScreenX, FLOAT& ScreenY, FLOAT ScreenDX, FLOAT ScreenDY );
	UBOOL	MemoryIsZero( const void* Memory, size_t Size );

	void DrawSpriteWidget( UCanvas* Canvas, FSpriteWidget* Widget );
	void DrawNumericWidget( UCanvas* Canvas, FNumericWidget* Widget, FDigitSet* D );
};


class XINTERFACE_API UPropertyManagerBase : public UObject
{
public:
    class UGUIController* Parent GCC_PACK(4);
    DECLARE_CLASS(UPropertyManagerBase,UObject,0,XInterface)
	virtual void SetParent( UGUIController* InParent ) {}
	virtual void SetCurrent( UObject** InCurrent )     {}
	virtual void SetWindow( void* InWindow )           {}

	virtual void Show(UBOOL bVisible) {         }
	virtual UBOOL IsVisible()         {return 0;}

	virtual void* GetSnoop() {return NULL;}
	virtual void* GetHook()  {return NULL;}
	virtual void* GetWindow(){return NULL;}
};

enum EAnimationType
{
    AT_Position             =0,
    AT_Dimension            =1,
    AT_MAX                  =2,
};
enum EOrientation
{
    ORIENT_Vertical         =0,
    ORIENT_Horizontal       =1,
    ORIENT_MAX              =2,
};
enum eCellStyle
{
    CELL_FixedSize          =0,
    CELL_FixedCount         =1,
    CELL_MAX                =2,
};
enum eDrawDirection
{
    DRD_LeftToRight         =0,
    DRD_RightToLeft         =1,
    DRD_TopToBottom         =2,
    DRD_BottomToTop         =3,
    DRD_MAX                 =4,
};
enum ePageAlign
{
    PGA_None                =0,
    PGA_Client              =1,
    PGA_Left                =2,
    PGA_Right               =3,
    PGA_Top                 =4,
    PGA_Bottom              =5,
    PGA_MAX                 =6,
};
enum eIconPosition
{
    ICP_Normal              =0,
    ICP_Center              =1,
    ICP_Scaled              =2,
    ICP_Stretched           =3,
    ICP_Bound               =4,
    ICP_MAX                 =5,
};
enum EMenuRenderStyle
{
    MSTY_None               =0,
    MSTY_Normal             =1,
    MSTY_Masked             =2,
    MSTY_Translucent        =3,
    MSTY_Modulated          =4,
    MSTY_Alpha              =5,
    MSTY_Additive           =6,
    MSTY_Subtractive        =7,
    MSTY_Particle           =8,
    MSTY_AlphaZ             =9,
    MSTY_MAX                =10,
};
enum eEditMask
{
    EDM_None                =0,
    EDM_Alpha               =1,
    EDM_Numeric             =2,
    EDM_MAX                 =3,
};
enum eImgAlign
{
    IMGA_TopLeft            =0,
    IMGA_Center             =1,
    IMGA_BottomRight        =2,
    IMGA_MAX                =3,
};
enum eImgStyle
{
    ISTY_Normal             =0,
    ISTY_Stretched          =1,
    ISTY_Scaled             =2,
    ISTY_Bound              =3,
    ISTY_Justified          =4,
    ISTY_PartialScaled      =5,
    ISTY_Tiled              =6,
    ISTY_MAX                =7,
};
enum eTextCase
{
    TXTC_None               =0,
    TXTC_Upper              =1,
    TXTC_Lower              =2,
    TXTC_MAX                =3,
};
enum eTextAlign
{
    TXTA_Left               =0,
    TXTA_Center             =1,
    TXTA_Right              =2,
    TXTA_MAX                =3,
};
enum eFontScale
{
    FNS_Small               =0,
    FNS_Medium              =1,
    FNS_Large               =2,
    FNS_MAX                 =3,
};
enum eDropState
{
    DRP_None                =0,
    DRP_Source              =1,
    DRP_Target              =2,
    DRP_Accept              =3,
    DRP_Reject              =4,
    DRP_MAX                 =5,
};
enum eMenuState
{
    MSAT_Blurry             =0,
    MSAT_Watched            =1,
    MSAT_Focused            =2,
    MSAT_Pressed            =3,
    MSAT_Disabled           =4,
    MSAT_MAX                =5,
};
struct XINTERFACE_API FGUIListElem
{
    FString Item GCC_PACK(4);
    class UObject* ExtraData;
    FString ExtraStrData;
    BITFIELD bSection:1 GCC_PACK(4);
};

struct XINTERFACE_API FMultiSelectListElem
{
    FString Item GCC_PACK(4);
    class UObject* ExtraData;
    FString ExtraStrData;
    BITFIELD bSelected:1 GCC_PACK(4);
    INT SelectionIndex GCC_PACK(4);
    BITFIELD bSection:1 GCC_PACK(4);
};

struct XINTERFACE_API FImageListElem
{
    INT Item GCC_PACK(4);
    class UMaterial* Image;
    INT Locked;
};

struct XINTERFACE_API FGUITreeNode
{
    FString Caption GCC_PACK(4);
    FString Value;
    FString ParentCaption;
    FString ExtraInfo;
    INT Level;
    BITFIELD bEnabled:1 GCC_PACK(4);

	UBOOL operator==( const FGUITreeNode& Other ) const;

};

#define UCONST_QBTN_YesNoCancel 50
#define UCONST_QBTN_YesNo 48
#define UCONST_QBTN_AbortRetry 68
#define UCONST_QBTN_OkCancel 3
#define UCONST_QBTN_Ignore 128
#define UCONST_QBTN_Abort 64
#define UCONST_QBTN_No 32
#define UCONST_QBTN_Yes 16
#define UCONST_QBTN_Continue 8
#define UCONST_QBTN_Retry 4
#define UCONST_QBTN_Cancel 2
#define UCONST_QBTN_Ok 1
#define UCONST_Counter 0

class XINTERFACE_API UGUI : public UObject
{
public:
    class UGUIController* Controller GCC_PACK(4);
    FPlane SaveModulation;
    FLOAT SaveX;
    FLOAT SaveY;
    FColor SaveColor;
    class UFont* SaveFont;
    BYTE SaveStyle;
    DECLARE_FUNCTION(execGetModLogo);
    DECLARE_FUNCTION(execGetModValue);
    DECLARE_FUNCTION(execGetModList);
    DECLARE_FUNCTION(execProfile);
    DECLARE_CLASS(UGUI,UObject,0,XInterface)
    virtual void  SaveCanvasState(UCanvas* Canvas);                         // Save the current state of the canvas
    virtual void  RestoreCanvasState(UCanvas* Canvas);                      // Restores the state of the canvas
};

enum EParentScaleType
{
    SCALE_All               =0,
    SCALE_X                 =1,
    SCALE_Y                 =2,
    SCALE_MAX               =3,
};
enum EClickSound
{
    CS_None                 =0,
    CS_Click                =1,
    CS_Edit                 =2,
    CS_Up                   =3,
    CS_Down                 =4,
    CS_Drag                 =5,
    CS_Fade                 =6,
    CS_Hover                =7,
    CS_Slide                =8,
    CS_MAX                  =9,
};

struct UGUIComponent_eventEndAnimation_Parms
{
    class UGUIComponent* Animating;
    BYTE Type;
};
struct UGUIComponent_eventBeginAnimation_Parms
{
    class UGUIComponent* Animating;
};
struct UGUIComponent_eventOwnerPage_Parms
{
    class UGUIPage* ReturnValue;
};
struct UGUIComponent_eventShow_Parms
{
};
struct UGUIComponent_eventHide_Parms
{
};
struct UGUIComponent_eventSetVisibility_Parms
{
    BITFIELD bIsVisible;
};
struct UGUIComponent_eventPrevPage_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventNextPage_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventPrevControl_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventNextControl_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventFocusLast_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventFocusFirst_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventLoseFocus_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventSetFocus_Parms
{
    class UGUIComponent* Who;
};
struct UGUIComponent_eventCanAcceptFocus_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventInitComponent_Parms
{
    class UGUIController* MyController;
    class UGUIComponent* MyOwner;
};
struct UGUIComponent_eventDropStateChange_Parms
{
    BYTE NewState;
};
struct UGUIComponent_eventIsMultiSelect_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventMenuStateChange_Parms
{
    BYTE NewState;
};
struct UGUIComponent_eventFree_Parms
{
};
struct UGUIComponent_eventClosed_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bCancelled;
};
struct UGUIComponent_eventOpened_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventTimer_Parms
{
};
struct UGUIComponent_eventAdditionalDebugString_Parms
{
    FString ReturnValue;
};
struct UGUIComponent_eventResolutionChanged_Parms
{
    INT ResX;
    INT ResY;
};
struct UGUIComponent_eventOnDragOver_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnDragLeave_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnDragEnter_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnDragDrop_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnEndDrag_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bAccepted;
};
struct UGUIComponent_eventOnBeginDrag_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnMultiSelect_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnSaveINI_Parms
{
    class UGUIComponent* Sender;
    FString ReturnValue;
};
struct UGUIComponent_eventOnLoadINI_Parms
{
    class UGUIComponent* Sender;
    FString S;
};
struct UGUIComponent_eventOnCapturedMouseMove_Parms
{
    FLOAT deltaX;
    FLOAT deltaY;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnDesignModeKeyEvent_Parms
{
    BYTE Key;
    BYTE State;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnKeyEvent_Parms
{
    BYTE Key;
    BYTE State;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnKeyType_Parms
{
    BYTE Key;
    FString Unicode;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnChange_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnTimer_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnMouseRelease_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnMousePressed_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bRepeat;
};
struct UGUIComponent_eventOnRightClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnDblClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnHover_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnInvalidate_Parms
{
    class UGUIComponent* Who;
};
struct UGUIComponent_eventOnEndTooltip_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnBeginTooltip_Parms
{
    class UGUIToolTip* ReturnValue;
};
struct UGUIComponent_eventOnShow_Parms
{
};
struct UGUIComponent_eventOnHide_Parms
{
};
struct UGUIComponent_eventOnMessage_Parms
{
    FString Msg;
    FLOAT MsgLife;
};
struct UGUIComponent_eventOnHitTest_Parms
{
    FLOAT MouseX;
    FLOAT MouseY;
};
struct UGUIComponent_eventOnWatch_Parms
{
};
struct UGUIComponent_eventOnDeActivate_Parms
{
};
struct UGUIComponent_eventOnActivate_Parms
{
};
struct UGUIComponent_eventOnRendered_Parms
{
    class UCanvas* Canvas;
};
struct UGUIComponent_eventOnRender_Parms
{
    class UCanvas* Canvas;
};
struct UGUIComponent_eventOnDraw_Parms
{
    class UCanvas* Canvas;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnPreDraw_Parms
{
    class UCanvas* Canvas;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnEndAnimation_Parms
{
    class UGUIComponent* Sender;
    BYTE Type;
};
struct UGUIComponent_eventOnArrival_Parms
{
    class UGUIComponent* Sender;
    BYTE Type;
};
class XINTERFACE_API UGUIComponent : public UGUI
{
public:
    class UGUIPage* PageOwner GCC_PACK(4);
    class UGUIComponent* MenuOwner;
    class UGUIComponent* FocusInstead;
    BYTE MenuState;
    BYTE LastMenuState;
    BYTE DropState;
    BYTE FontScale;
    FStringNoInit IniOption GCC_PACK(4);
    FStringNoInit IniDefault;
    FStringNoInit StyleName;
    FStringNoInit Hint;
    class UGUILabel* FriendlyLabel;
    FLOAT WinTop;
    FLOAT WinLeft;
    FLOAT WinWidth;
    FLOAT WinHeight;
    FLOAT RenderWeight;
    INT MouseCursorIndex;
    INT TabOrder;
    INT Tag;
    BITFIELD bDebugging:1 GCC_PACK(4);
    BITFIELD bTabStop:1;
    BITFIELD bFocusOnWatch:1;
    BITFIELD bBoundToParent:1;
    BITFIELD bScaleToParent:1;
    BITFIELD bHasFocus:1;
    BITFIELD bVisible:1;
    BITFIELD bAcceptsInput:1;
    BITFIELD bCaptureTabs:1;
    BITFIELD bCaptureMouse:1;
    BITFIELD bNeverFocus:1;
    BITFIELD bRepeatClick:1;
    BITFIELD bRequireReleaseClick:1;
    BITFIELD bMouseOverSound:1;
    BITFIELD bDropSource:1;
    BITFIELD bDropTarget:1;
    BITFIELD bPendingFocus:1;
    BITFIELD bInit:1;
    BITFIELD bNeverScale:1;
    BITFIELD bRequiresStyle:1;
    BITFIELD bPositioned:1;
    BITFIELD bAnimating:1;
    BITFIELD bTravelling:1;
    BITFIELD bSizing:1;
    TArrayNoInit<FVector> MotionFrame GCC_PACK(4);
    TArrayNoInit<FVector> SizeFrame;
    FLOAT Bounds[4];
    FLOAT ClientBounds[4];
    BITFIELD bTimerRepeat:1 GCC_PACK(4);
    INT TimerIndex GCC_PACK(4);
    FLOAT TimerCountdown;
    FLOAT TimerInterval;
    FLOAT MouseOffset[4];
    class UGUIContextMenu* ContextMenu;
    class UGUIToolTip* ToolTip;
    FColor WhiteColor;
    class UGUIStyles* Style;
    BYTE OnClickSound;
    BYTE BoundingType;
    BYTE ScalingType;
    BITFIELD bStandardized:1 GCC_PACK(4);
    FLOAT StandardHeight GCC_PACK(4);
    INT PreDrawCount;
    INT DrawCount;
    INT OnRenderCount;
    INT OnRenderedCount;
    INT OnPreDrawCount;
    INT OnDrawCount;
    FScriptDelegate __OnArrival__Delegate;
    FScriptDelegate __OnEndAnimation__Delegate;
    FScriptDelegate __OnPreDraw__Delegate;
    FScriptDelegate __OnDraw__Delegate;
    FScriptDelegate __OnRender__Delegate;
    FScriptDelegate __OnRendered__Delegate;
    FScriptDelegate __OnActivate__Delegate;
    FScriptDelegate __OnDeActivate__Delegate;
    FScriptDelegate __OnWatch__Delegate;
    FScriptDelegate __OnHitTest__Delegate;
    FScriptDelegate __OnMessage__Delegate;
    FScriptDelegate __OnHide__Delegate;
    FScriptDelegate __OnShow__Delegate;
    FScriptDelegate __OnBeginTooltip__Delegate;
    FScriptDelegate __OnEndTooltip__Delegate;
    FScriptDelegate __OnInvalidate__Delegate;
    FScriptDelegate __OnHover__Delegate;
    FScriptDelegate __OnClick__Delegate;
    FScriptDelegate __OnDblClick__Delegate;
    FScriptDelegate __OnRightClick__Delegate;
    FScriptDelegate __OnMousePressed__Delegate;
    FScriptDelegate __OnMouseRelease__Delegate;
    FScriptDelegate __OnTimer__Delegate;
    FScriptDelegate __OnChange__Delegate;
    FScriptDelegate __OnKeyType__Delegate;
    FScriptDelegate __OnKeyEvent__Delegate;
    FScriptDelegate __OnDesignModeKeyEvent__Delegate;
    FScriptDelegate __OnCapturedMouseMove__Delegate;
    FScriptDelegate __OnLoadINI__Delegate;
    FScriptDelegate __OnSaveINI__Delegate;
    FScriptDelegate __OnMultiSelect__Delegate;
    FScriptDelegate __OnBeginDrag__Delegate;
    FScriptDelegate __OnEndDrag__Delegate;
    FScriptDelegate __OnDragDrop__Delegate;
    FScriptDelegate __OnDragEnter__Delegate;
    FScriptDelegate __OnDragLeave__Delegate;
    FScriptDelegate __OnDragOver__Delegate;
    DECLARE_FUNCTION(execSpecialHit);
    DECLARE_FUNCTION(execGetMenuPath);
    DECLARE_FUNCTION(execRelativeHeight);
    DECLARE_FUNCTION(execRelativeWidth);
    DECLARE_FUNCTION(execRelativeTop);
    DECLARE_FUNCTION(execRelativeLeft);
    DECLARE_FUNCTION(execActualTop);
    DECLARE_FUNCTION(execActualLeft);
    DECLARE_FUNCTION(execActualHeight);
    DECLARE_FUNCTION(execActualWidth);
    DECLARE_FUNCTION(execUpdateOffset);
    DECLARE_FUNCTION(execAutoPositionOn);
    DECLARE_FUNCTION(execAutoPosition);
    DECLARE_FUNCTION(execKillTimer);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execPlayerOwner);
    void eventEndAnimation(class UGUIComponent* Animating, BYTE Type)
    {
        UGUIComponent_eventEndAnimation_Parms Parms;
        Parms.Animating=Animating;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(XINTERFACE_EndAnimation),&Parms);
    }
    void eventBeginAnimation(class UGUIComponent* Animating)
    {
        UGUIComponent_eventBeginAnimation_Parms Parms;
        Parms.Animating=Animating;
        ProcessEvent(FindFunctionChecked(XINTERFACE_BeginAnimation),&Parms);
    }
    class UGUIPage* eventOwnerPage()
    {
        UGUIComponent_eventOwnerPage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_OwnerPage),&Parms);
        return Parms.ReturnValue;
    }
    void eventShow()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Show),NULL);
    }
    void eventHide()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Hide),NULL);
    }
    void eventSetVisibility(BITFIELD bIsVisible)
    {
        UGUIComponent_eventSetVisibility_Parms Parms;
        Parms.bIsVisible=((bIsVisible) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_SetVisibility),&Parms);
    }
    BITFIELD eventPrevPage()
    {
        UGUIComponent_eventPrevPage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_PrevPage),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventNextPage()
    {
        UGUIComponent_eventNextPage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_NextPage),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventPrevControl(class UGUIComponent* Sender)
    {
        UGUIComponent_eventPrevControl_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_PrevControl),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventNextControl(class UGUIComponent* Sender)
    {
        UGUIComponent_eventNextControl_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_NextControl),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFocusLast(class UGUIComponent* Sender)
    {
        UGUIComponent_eventFocusLast_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FocusLast),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFocusFirst(class UGUIComponent* Sender)
    {
        UGUIComponent_eventFocusFirst_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_FocusFirst),&Parms);
        return Parms.ReturnValue;
    }
    void eventLoseFocus(class UGUIComponent* Sender)
    {
        UGUIComponent_eventLoseFocus_Parms Parms;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_LoseFocus),&Parms);
    }
    void eventSetFocus(class UGUIComponent* Who)
    {
        UGUIComponent_eventSetFocus_Parms Parms;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(XINTERFACE_SetFocus),&Parms);
    }
    BITFIELD eventCanAcceptFocus()
    {
        UGUIComponent_eventCanAcceptFocus_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_CanAcceptFocus),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitComponent(class UGUIController* MyController, class UGUIComponent* MyOwner)
    {
        UGUIComponent_eventInitComponent_Parms Parms;
        Parms.MyController=MyController;
        Parms.MyOwner=MyOwner;
        ProcessEvent(FindFunctionChecked(XINTERFACE_InitComponent),&Parms);
    }
    void eventDropStateChange(BYTE NewState)
    {
        UGUIComponent_eventDropStateChange_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(XINTERFACE_DropStateChange),&Parms);
    }
    BITFIELD eventIsMultiSelect()
    {
        UGUIComponent_eventIsMultiSelect_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_IsMultiSelect),&Parms);
        return Parms.ReturnValue;
    }
    void eventMenuStateChange(BYTE NewState)
    {
        UGUIComponent_eventMenuStateChange_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(XINTERFACE_MenuStateChange),&Parms);
    }
    void eventFree()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Free),NULL);
    }
    void eventClosed(class UGUIComponent* Sender, BITFIELD bCancelled)
    {
        UGUIComponent_eventClosed_Parms Parms;
        Parms.Sender=Sender;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_Closed),&Parms);
    }
    void eventOpened(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOpened_Parms Parms;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(XINTERFACE_Opened),&Parms);
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Timer),NULL);
        }
    }
    FString eventAdditionalDebugString()
    {
        UGUIComponent_eventAdditionalDebugString_Parms Parms;
        ProcessEvent(FindFunctionChecked(XINTERFACE_AdditionalDebugString),&Parms);
        return Parms.ReturnValue;
    }
    void eventResolutionChanged(INT ResX, INT ResY)
    {
        UGUIComponent_eventResolutionChanged_Parms Parms;
        Parms.ResX=ResX;
        Parms.ResY=ResY;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ResolutionChanged),&Parms);
    }
    void delegateOnDragOver(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDragOver_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnDragOver,&__OnDragOver__Delegate,&Parms);
    }
    void delegateOnDragLeave(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDragLeave_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnDragLeave,&__OnDragLeave__Delegate,&Parms);
    }
    void delegateOnDragEnter(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDragEnter_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnDragEnter,&__OnDragEnter__Delegate,&Parms);
    }
    BITFIELD delegateOnDragDrop(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDragDrop_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnDragDrop,&__OnDragDrop__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnEndDrag(class UGUIComponent* Sender, BITFIELD bAccepted)
    {
        UGUIComponent_eventOnEndDrag_Parms Parms;
        Parms.Sender=Sender;
        Parms.bAccepted=((bAccepted) ? FIRST_BITFIELD : 0);
        ProcessDelegate(XINTERFACE_OnEndDrag,&__OnEndDrag__Delegate,&Parms);
    }
    BITFIELD delegateOnBeginDrag(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnBeginDrag_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnBeginDrag,&__OnBeginDrag__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnMultiSelect(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnMultiSelect_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnMultiSelect,&__OnMultiSelect__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    FString delegateOnSaveINI(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnSaveINI_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnSaveINI,&__OnSaveINI__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnLoadINI(class UGUIComponent* Sender, const FString& S)
    {
        UGUIComponent_eventOnLoadINI_Parms Parms;
        Parms.Sender=Sender;
        Parms.S=S;
        ProcessDelegate(XINTERFACE_OnLoadINI,&__OnLoadINI__Delegate,&Parms);
    }
    BITFIELD delegateOnCapturedMouseMove(FLOAT deltaX, FLOAT deltaY)
    {
        UGUIComponent_eventOnCapturedMouseMove_Parms Parms;
        Parms.ReturnValue=0;
        Parms.deltaX=deltaX;
        Parms.deltaY=deltaY;
        ProcessDelegate(XINTERFACE_OnCapturedMouseMove,&__OnCapturedMouseMove__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnDesignModeKeyEvent(BYTE Key, BYTE State)
    {
        UGUIComponent_eventOnDesignModeKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.State=State;
        ProcessDelegate(XINTERFACE_OnDesignModeKeyEvent,&__OnDesignModeKeyEvent__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnKeyEvent(BYTE& Key, BYTE& State, FLOAT Delta)
    {
        UGUIComponent_eventOnKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.State=State;
        Parms.Delta=Delta;
        ProcessDelegate(XINTERFACE_OnKeyEvent,&__OnKeyEvent__Delegate,&Parms);
        Key=Parms.Key;
        State=Parms.State;
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnKeyType(BYTE& Key, const FString& Unicode)
    {
        UGUIComponent_eventOnKeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.Unicode=Unicode;
        ProcessDelegate(XINTERFACE_OnKeyType,&__OnKeyType__Delegate,&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void delegateOnChange(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnChange_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnChange,&__OnChange__Delegate,&Parms);
    }
    void delegateOnTimer(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnTimer_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnTimer,&__OnTimer__Delegate,&Parms);
    }
    void delegateOnMouseRelease(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnMouseRelease_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnMouseRelease,&__OnMouseRelease__Delegate,&Parms);
    }
    void delegateOnMousePressed(class UGUIComponent* Sender, BITFIELD bRepeat)
    {
        UGUIComponent_eventOnMousePressed_Parms Parms;
        Parms.Sender=Sender;
        Parms.bRepeat=((bRepeat) ? FIRST_BITFIELD : 0);
        ProcessDelegate(XINTERFACE_OnMousePressed,&__OnMousePressed__Delegate,&Parms);
    }
    BITFIELD delegateOnRightClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnRightClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnRightClick,&__OnRightClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnDblClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDblClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnDblClick,&__OnDblClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnClick,&__OnClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnHover(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnHover_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnHover,&__OnHover__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnInvalidate(class UGUIComponent* Who)
    {
        UGUIComponent_eventOnInvalidate_Parms Parms;
        Parms.Who=Who;
        ProcessDelegate(XINTERFACE_OnInvalidate,&__OnInvalidate__Delegate,&Parms);
    }
    BITFIELD delegateOnEndTooltip()
    {
        UGUIComponent_eventOnEndTooltip_Parms Parms;
        Parms.ReturnValue=0;
        ProcessDelegate(XINTERFACE_OnEndTooltip,&__OnEndTooltip__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    class UGUIToolTip* delegateOnBeginTooltip()
    {
        UGUIComponent_eventOnBeginTooltip_Parms Parms;
        Parms.ReturnValue=0;
        ProcessDelegate(XINTERFACE_OnBeginTooltip,&__OnBeginTooltip__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnShow()
    {
        ProcessDelegate(XINTERFACE_OnShow,&__OnShow__Delegate,NULL);
    }
    void delegateOnHide()
    {
        ProcessDelegate(XINTERFACE_OnHide,&__OnHide__Delegate,NULL);
    }
    void delegateOnMessage(const FString& Msg, FLOAT MsgLife)
    {
        UGUIComponent_eventOnMessage_Parms Parms;
        Parms.Msg=Msg;
        Parms.MsgLife=MsgLife;
        ProcessDelegate(XINTERFACE_OnMessage,&__OnMessage__Delegate,&Parms);
    }
    void delegateOnHitTest(FLOAT MouseX, FLOAT MouseY)
    {
        UGUIComponent_eventOnHitTest_Parms Parms;
        Parms.MouseX=MouseX;
        Parms.MouseY=MouseY;
        ProcessDelegate(XINTERFACE_OnHitTest,&__OnHitTest__Delegate,&Parms);
    }
    void delegateOnWatch()
    {
        ProcessDelegate(XINTERFACE_OnWatch,&__OnWatch__Delegate,NULL);
    }
    void delegateOnDeActivate()
    {
        ProcessDelegate(XINTERFACE_OnDeActivate,&__OnDeActivate__Delegate,NULL);
    }
    void delegateOnActivate()
    {
        ProcessDelegate(XINTERFACE_OnActivate,&__OnActivate__Delegate,NULL);
    }
    void delegateOnRendered(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnRendered_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessDelegate(XINTERFACE_OnRendered,&__OnRendered__Delegate,&Parms);
    }
    void delegateOnRender(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessDelegate(XINTERFACE_OnRender,&__OnRender__Delegate,&Parms);
    }
    BITFIELD delegateOnDraw(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        ProcessDelegate(XINTERFACE_OnDraw,&__OnDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnPreDraw(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnPreDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        ProcessDelegate(XINTERFACE_OnPreDraw,&__OnPreDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnEndAnimation(class UGUIComponent* Sender, BYTE Type)
    {
        UGUIComponent_eventOnEndAnimation_Parms Parms;
        Parms.Sender=Sender;
        Parms.Type=Type;
        ProcessDelegate(XINTERFACE_OnEndAnimation,&__OnEndAnimation__Delegate,&Parms);
    }
    void delegateOnArrival(class UGUIComponent* Sender, BYTE Type)
    {
        UGUIComponent_eventOnArrival_Parms Parms;
        Parms.Sender=Sender;
        Parms.Type=Type;
        ProcessDelegate(XINTERFACE_OnArrival,&__OnArrival__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIComponent,UGUI,0,XInterface)
	TCHAR* GetMenuPath( TCHAR* Str = NULL ) const;
    virtual void PreDraw(UCanvas *Canvas);  // Should be overridden in a subclass
    virtual void Draw(UCanvas* Canvas);     // Should be overridden in a subclass

	UBOOL   WithinBounds( FLOAT PosX, FLOAT PosY ) const { return PosX >= Bounds[0] && PosX <= Bounds[2] && PosY >= Bounds[1] && PosY <= Bounds[3]; }
    virtual UBOOL PerformHitTest(INT MouseX, INT MouseY);                   // Check to see if a mouse press affects the control
    virtual void  UpdateBounds();                                           // Updates the Bounds for hit tests and such
    FLOAT ActualWidth( FLOAT Val = INDEX_NONE, UBOOL bForce = 0 )   const;                      // Returns the actual width (including scaling) of a component
    FLOAT ActualHeight( FLOAT Val = INDEX_NONE, UBOOL bForce = 0 ) const;                      // Returns the actual height (including scaling) of a component
    FLOAT ActualLeft( FLOAT Val = INDEX_NONE, UBOOL bForce = 0 )     const;                      // Returns the actual left (including scaling) of a component
    FLOAT ActualTop( FLOAT Val = INDEX_NONE, UBOOL bForce = 0 )       const;                      // Returns the actual top (including scaling) of a component
    FLOAT RelativeWidth( FLOAT RealWidth = INDEX_NONE, UBOOL bForce = 0 )    const;
    FLOAT RelativeHeight( FLOAT RealHeight = INDEX_NONE, UBOOL bForce = 0) const;
    FLOAT RelativeLeft( FLOAT RealLeft = INDEX_NONE, UBOOL bForce = 0 )       const;
    FLOAT RelativeTop( FLOAT RealTop = INDEX_NONE, UBOOL bForce = 0 )          const;
    virtual UGUIComponent* UnderCursor(FLOAT MouseX, FLOAT MouseY);

	// Focusing stubs
    virtual UGUIComponent* GetFocused()                     const { return NULL; }
    virtual UBOOL IsFocusedOn( const UGUIComponent* Comp )  const { return 0; }

    virtual UBOOL MouseMove(INT XDelta, INT YDelta);            // The Mouse has moved
    virtual UBOOL MousePressed(UBOOL IsRepeat);                 // The Mouse was pressed
    virtual UBOOL MouseReleased();                              // The Mouse was released
    virtual UBOOL MouseHover();                                 // The Mouse is over a non-pressed thing

    virtual UBOOL NativeKeyType(BYTE& iKey, TCHAR Unicode );                // Handle key presses
    virtual UBOOL NativeKeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta); // Handle key events
	virtual UBOOL PerformDoubleClick();

	virtual void  SetAdjustedDims(FLOAT Width, FLOAT Height, FLOAT Left, FLOAT Top); // Smarter version of SetDims that takes into account scaling and bounding
    virtual void  SetDims(FLOAT Width, FLOAT Height, FLOAT Left, FLOAT Top); // Set the dims quickly
    virtual void  CloneDims(UGUIComponent* From);   // Clones the Width,Height, Top, Left settings
	virtual UBOOL IsAnimating()
	{
		for ( UGUIComponent* Comp = this; Comp; Comp = Comp->MenuOwner )
			if ( Comp->bAnimating )
				return true;

		return false;
	}

    virtual UBOOL SpecialHit( UBOOL bForce );
    virtual void  NativeInvalidate(UGUIComponent* Who);

    virtual void  UpdateOffset(FLOAT PosX, FLOAT PosY, FLOAT PosW, FLOAT PosH);
    virtual void AutoPosition( TArray<UGUIComponent*>& Components, FLOAT PosL, FLOAT PosT, FLOAT PosR, FLOAT PosB, INT Col = 1, FLOAT ColSpace = 0.f );
    virtual void AutoPositionOn( TArray<UGUIComponent*>& Components, UGUIComponent* Frame, FLOAT LPerc, FLOAT TPerc, FLOAT RPerc, FLOAT BPerc, INT Col = 1, FLOAT ColSpace = 0.f );
    virtual void NotifyResolutionChange( INT NewResX, INT NewResY );

	#ifdef UCONST_Counter
    virtual void ResetCounter();
    #endif
};


struct UGUIMultiComponent_eventRemoveComponent_Parms
{
    class UGUIComponent* Comp;
    BITFIELD SkipRemap;
    BITFIELD ReturnValue;
};
struct UGUIMultiComponent_eventAppendComponent_Parms
{
    class UGUIComponent* NewComp;
    BITFIELD SkipRemap;
    class UGUIComponent* ReturnValue;
};
struct UGUIMultiComponent_eventInsertComponent_Parms
{
    class UGUIComponent* NewComp;
    INT Index;
    BITFIELD SkipRemap;
    class UGUIComponent* ReturnValue;
};
struct UGUIMultiComponent_eventAddComponent_Parms
{
    FString ComponentClass;
    BITFIELD SkipRemap;
    class UGUIComponent* ReturnValue;
};
struct UGUIMultiComponent_eventOnCreateComponent_Parms
{
    class UGUIComponent* NewComponent;
    class UGUIComponent* Sender;
};
struct UGUIMultiComponent_eventNotifyContextSelect_Parms
{
    class UGUIContextMenu* Sender;
    INT ClickIndex;
    BITFIELD ReturnValue;
};
struct UGUIMultiComponent_eventHandleContextMenuClose_Parms
{
    class UGUIContextMenu* Sender;
    BITFIELD ReturnValue;
};
struct UGUIMultiComponent_eventHandleContextMenuOpen_Parms
{
    class UGUIComponent* Sender;
    class UGUIContextMenu* Menu;
    class UGUIComponent* ContextMenuOwner;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUIMultiComponent : public UGUIComponent
{
public:
    TArrayNoInit<class UGUIComponent*> Controls GCC_PACK(4);
    class UGUIComponent* FocusedControl;
    TArrayNoInit<class UGUIComponent*> Components;
    INT AnimationCount;
    BITFIELD PropagateVisibility:1 GCC_PACK(4);
    BITFIELD bOldStyleMenus:1;
    BITFIELD bDrawFocusedLast:1;
    BITFIELD bAlwaysAutomate:1;
    FScriptDelegate __HandleContextMenuOpen__Delegate GCC_PACK(4);
    FScriptDelegate __HandleContextMenuClose__Delegate;
    FScriptDelegate __NotifyContextSelect__Delegate;
    FScriptDelegate __OnCreateComponent__Delegate;
    DECLARE_FUNCTION(execFindComponentIndex);
    DECLARE_FUNCTION(execRemapComponents);
    DECLARE_FUNCTION(execInitializeControls);
    BITFIELD eventRemoveComponent(class UGUIComponent* Comp, BITFIELD SkipRemap)
    {
        UGUIMultiComponent_eventRemoveComponent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Comp=Comp;
        Parms.SkipRemap=((SkipRemap) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_RemoveComponent),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIComponent* eventAppendComponent(class UGUIComponent* NewComp, BITFIELD SkipRemap)
    {
        UGUIMultiComponent_eventAppendComponent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewComp=NewComp;
        Parms.SkipRemap=((SkipRemap) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_AppendComponent),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIComponent* eventInsertComponent(class UGUIComponent* NewComp, INT Index, BITFIELD SkipRemap)
    {
        UGUIMultiComponent_eventInsertComponent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewComp=NewComp;
        Parms.Index=Index;
        Parms.SkipRemap=((SkipRemap) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_InsertComponent),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIComponent* eventAddComponent(const FString& ComponentClass, BITFIELD SkipRemap)
    {
        UGUIMultiComponent_eventAddComponent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ComponentClass=ComponentClass;
        Parms.SkipRemap=((SkipRemap) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_AddComponent),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnCreateComponent(class UGUIComponent* NewComponent, class UGUIComponent* Sender)
    {
        UGUIMultiComponent_eventOnCreateComponent_Parms Parms;
        Parms.NewComponent=NewComponent;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnCreateComponent,&__OnCreateComponent__Delegate,&Parms);
    }
    BITFIELD delegateNotifyContextSelect(class UGUIContextMenu* Sender, INT ClickIndex)
    {
        UGUIMultiComponent_eventNotifyContextSelect_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        Parms.ClickIndex=ClickIndex;
        ProcessDelegate(XINTERFACE_NotifyContextSelect,&__NotifyContextSelect__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateHandleContextMenuClose(class UGUIContextMenu* Sender)
    {
        UGUIMultiComponent_eventHandleContextMenuClose_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_HandleContextMenuClose,&__HandleContextMenuClose__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateHandleContextMenuOpen(class UGUIComponent* Sender, class UGUIContextMenu* Menu, class UGUIComponent* ContextMenuOwner)
    {
        UGUIMultiComponent_eventHandleContextMenuOpen_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        Parms.Menu=Menu;
        Parms.ContextMenuOwner=ContextMenuOwner;
        ProcessDelegate(XINTERFACE_HandleContextMenuOpen,&__HandleContextMenuOpen__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIMultiComponent,UGUIComponent,0,XInterface)
		void PreDraw(UCanvas* Canvas);		// Do any size/postitioning
		void Draw(UCanvas* Canvas);			// Draw the component
		void PreDrawControls(UCanvas* Canvas);
		void DrawControls(UCanvas* Canvas);

		virtual void InitializeControls();	// Takes all GUIComponent members and assigns them to the controls array
		virtual void RemapComponents();

		UGUIComponent* UnderCursor(FLOAT MouseX, FLOAT MouseY);

		UBOOL NativeKeyType(BYTE& iKey, TCHAR Unicode );					// A Key or Mouse button has pressed
		UBOOL NativeKeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta );		// A Key/Mouse event occured

		void NativeInvalidate(UGUIComponent* Who);
		UBOOL SpecialHit( UBOOL bForce );

		UBOOL PerformHitTest(INT MouseX, INT MouseY);

		UBOOL MousePressed(UBOOL IsRepeat);					// The left mouse button was pressed
		UBOOL MouseReleased();								// The mouse button was released

		UGUIComponent* GetFocused()                             const { return FocusedControl; }
		UBOOL          IsFocusedOn( const UGUIComponent* Comp ) const { return Comp && Comp == GetFocused(); }

        void NotifyResolutionChange( INT NewResX, INT NewResY );
		#ifdef UCONST_Counter
	    virtual void ResetCounter();
	    #endif
};


struct UGUIPanel_eventOnPostDraw_Parms
{
    class UCanvas* Canvas;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUIPanel : public UGUIMultiComponent
{
public:
    class UMaterial* Background GCC_PACK(4);
    FScriptDelegate __OnPostDraw__Delegate;
    BITFIELD delegateOnPostDraw(class UCanvas* Canvas)
    {
        UGUIPanel_eventOnPostDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        ProcessDelegate(XINTERFACE_OnPostDraw,&__OnPostDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIPanel,UGUIMultiComponent,0,XInterface)
		void Draw(UCanvas* Canvas);
		UBOOL PerformHitTest(INT MouseX, INT MouseY);

};

enum EGUISplitterType
{
    SPLIT_Vertical          =0,
    SPLIT_Horizontal        =1,
    SPLIT_MAX               =2,
};

struct UGUISplitter_eventOnReleaseSplitter_Parms
{
    class UGUIComponent* Sender;
    FLOAT NewPosition;
};
class XINTERFACE_API UGUISplitter : public UGUIPanel
{
public:
    BYTE SplitOrientation GCC_PACK(4);
    FLOAT SplitPosition GCC_PACK(4);
    BITFIELD bFixedSplitter:1 GCC_PACK(4);
    BITFIELD bDrawSplitter:1;
    FLOAT SplitAreaSize GCC_PACK(4);
    FStringNoInit DefaultPanels[2];
    class UGUIComponent* Panels[2];
    FLOAT MaxPercentage;
    FScriptDelegate __OnReleaseSplitter__Delegate;
    DECLARE_FUNCTION(execSplitterUpdatePositions);
    void delegateOnReleaseSplitter(class UGUIComponent* Sender, FLOAT NewPosition)
    {
        UGUISplitter_eventOnReleaseSplitter_Parms Parms;
        Parms.Sender=Sender;
        Parms.NewPosition=NewPosition;
        ProcessDelegate(XINTERFACE_OnReleaseSplitter,&__OnReleaseSplitter__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUISplitter,UGUIPanel,0,XInterface)
		void PreDraw(UCanvas* Canvas);
		void Draw(UCanvas* Canvas);
		UBOOL MouseMove(INT XDelta, INT YDelta);
		UBOOL MousePressed(UBOOL IsRepeat);
        UBOOL MouseReleased();
		UBOOL MouseHover();
		void SplitterUpdatePositions();
};


class XINTERFACE_API UGUITabPanel : public UGUIPanel
{
public:
    FStringNoInit PanelCaption GCC_PACK(4);
    BITFIELD bFillHeight:1 GCC_PACK(4);
    FLOAT FadeInTime GCC_PACK(4);
    class UGUITabButton* MyButton;
    DECLARE_CLASS(UGUITabPanel,UGUIPanel,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUITabPanel)
};


class XINTERFACE_API UGUIMenuOption : public UGUIMultiComponent
{
public:
    BITFIELD bIgnoreChange:1 GCC_PACK(4);
    BITFIELD bValueReadOnly:1;
    BITFIELD bAutoSizeCaption:1;
    BITFIELD bHeightFromComponent:1;
    BITFIELD bFlipped:1;
    BITFIELD bSquare:1;
    BITFIELD bVerticalLayout:1;
    BYTE LabelJustification GCC_PACK(4);
    BYTE ComponentJustification;
    FLOAT CaptionWidth GCC_PACK(4);
    FLOAT ComponentWidth;
    FStringNoInit Caption;
    FStringNoInit ComponentClassName;
    FStringNoInit LabelFont;
    FStringNoInit LabelStyleName;
    FColor LabelColor;
    class UGUILabel* MyLabel;
    class UGUIComponent* MyComponent;
    DECLARE_CLASS(UGUIMenuOption,UGUIMultiComponent,0,XInterface)
        void PreDraw(UCanvas* Canvas);
        UBOOL MousePressed(UBOOL IsRepeat);
        UBOOL MouseReleased();
};


struct UGUIComboBox_eventOnHideList_Parms
{
};
struct UGUIComboBox_eventOnShowList_Parms
{
};
class XINTERFACE_API UGUIComboBox : public UGUIMultiComponent
{
public:
    BITFIELD bReadOnly:1 GCC_PACK(4);
    BITFIELD bValueReadOnly:1;
    BITFIELD bIgnoreChangeWhenTyping:1;
    BITFIELD bShowListOnFocus:1;
    INT MaxVisibleItems GCC_PACK(4);
    INT Index;
    FStringNoInit TextStr;
    class UGUIList* List;
    class UGUIEditBox* Edit;
    class UGUIScrollButtonBase* MyShowListBtn;
    class UGUIListBox* MyListBox;
    FScriptDelegate __OnShowList__Delegate;
    FScriptDelegate __OnHideList__Delegate;
    void delegateOnHideList()
    {
        ProcessDelegate(XINTERFACE_OnHideList,&__OnHideList__Delegate,NULL);
    }
    void delegateOnShowList()
    {
        ProcessDelegate(XINTERFACE_OnShowList,&__OnShowList__Delegate,NULL);
    }
    DECLARE_CLASS(UGUIComboBox,UGUIMultiComponent,0,XInterface)
        void PreDraw(UCanvas* Canvas);

};


struct UGUIScrollBarBase_eventAlignThumb_Parms
{
};
struct UGUIScrollBarBase_eventMoveGripBy_Parms
{
    INT items;
};
struct UGUIScrollBarBase_eventPositionChanged_Parms
{
    INT NewPos;
};
class XINTERFACE_API UGUIScrollBarBase : public UGUIMultiComponent
{
public:
    BYTE Orientation GCC_PACK(4);
    INT Step GCC_PACK(4);
    FLOAT GripPos;
    FLOAT GripSize;
    FLOAT GrabOffset;
    INT MinGripPixels;
    class UGUIListBase* MyList;
    INT BigStep;
    INT ItemCount;
    INT ItemsPerPage;
    INT CurPos;
    class UGUIScrollZoneBase* MyScrollZone;
    class UGUIScrollButtonBase* MyIncreaseButton;
    class UGUIScrollButtonBase* MyDecreaseButton;
    class UGUIGripButtonBase* MyGripButton;
    FScriptDelegate __PositionChanged__Delegate;
    FScriptDelegate __MoveGripBy__Delegate;
    FScriptDelegate __AlignThumb__Delegate;
    void delegateAlignThumb()
    {
        ProcessDelegate(XINTERFACE_AlignThumb,&__AlignThumb__Delegate,NULL);
    }
    void delegateMoveGripBy(INT items)
    {
        UGUIScrollBarBase_eventMoveGripBy_Parms Parms;
        Parms.items=items;
        ProcessDelegate(XINTERFACE_MoveGripBy,&__MoveGripBy__Delegate,&Parms);
    }
    void delegatePositionChanged(INT NewPos)
    {
        UGUIScrollBarBase_eventPositionChanged_Parms Parms;
        Parms.NewPos=NewPos;
        ProcessDelegate(XINTERFACE_PositionChanged,&__PositionChanged__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIScrollBarBase,UGUIMultiComponent,0,XInterface)
	void PreDraw( UCanvas* Canvas );
};


class XINTERFACE_API UGUIFloatEdit : public UGUIMultiComponent
{
public:
    class UGUIEditBox* MyEditBox GCC_PACK(4);
    class UGUISpinnerButton* MySpinner;
    FStringNoInit Value;
    BITFIELD bLeftJustified:1 GCC_PACK(4);
    FLOAT MinValue GCC_PACK(4);
    FLOAT MaxValue;
    FLOAT Step;
    BITFIELD bReadOnly:1 GCC_PACK(4);
    DECLARE_CLASS(UGUIFloatEdit,UGUIMultiComponent,0,XInterface)
		void PreDraw(UCanvas* Canvas);
};


class XINTERFACE_API UGUINumericEdit : public UGUIMultiComponent
{
public:
    class UGUIEditBox* MyEditBox GCC_PACK(4);
    class UGUISpinnerButton* MySpinner;
    FStringNoInit Value;
    BITFIELD bLeftJustified:1 GCC_PACK(4);
    INT MinValue GCC_PACK(4);
    INT MaxValue;
    INT Step;
    BITFIELD bReadOnly:1 GCC_PACK(4);
    DECLARE_CLASS(UGUINumericEdit,UGUIMultiComponent,0,XInterface)
		void PreDraw(UCanvas* Canvas);
};


struct UGUITabControl_eventMakeTabActive_Parms
{
    class UGUITabButton* Who;
};
class XINTERFACE_API UGUITabControl : public UGUIMultiComponent
{
public:
    BITFIELD bFillSpace:1 GCC_PACK(4);
    BITFIELD bDockPanels:1;
    BITFIELD bDrawTabAbove:1;
    BITFIELD bFillBackground:1;
    FColor FillColor GCC_PACK(4);
    FLOAT FadeInTime;
    FLOAT TabHeight;
    FStringNoInit BackgroundStyleName;
    class UMaterial* BackgroundImage;
    TArrayNoInit<class UGUITabButton*> TabStack;
    class UGUITabButton* ActiveTab;
    class UGUITabButton* PendingTab;
    class UGUIStyles* BackgroundStyle;
    class UGUIBorder* MyFooter;
    void eventMakeTabActive(class UGUITabButton* Who)
    {
        UGUITabControl_eventMakeTabActive_Parms Parms;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(XINTERFACE_MakeTabActive),&Parms);
    }
    DECLARE_CLASS(UGUITabControl,UGUIMultiComponent,0,XInterface)
        void PreDraw(UCanvas* Canvas);
        void Draw(UCanvas* Canvas);

        UGUIComponent* UnderCursor(FLOAT MouseX, FLOAT MouseY);
        UBOOL SpecialHit( UBOOL bForce );
        UBOOL MousePressed(UBOOL IsRepeat);                 // The Mouse was pressed
        UBOOL MouseReleased();                              // The Mouse was released

		UBOOL IsFocusedOn( const UGUIComponent* Comp ) const;

		#ifdef UCONST_Counter
	    virtual void ResetCounter();
	    #endif
};


class XINTERFACE_API UGUIBorder : public UGUIMultiComponent
{
public:
    FStringNoInit Caption GCC_PACK(4);
    BYTE Justification;
    INT TextIndent GCC_PACK(4);
    DECLARE_CLASS(UGUIBorder,UGUIMultiComponent,0,XInterface)
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUITitleBar : public UGUIBorder
{
public:
    class UGUITabControl* DockedTabs GCC_PACK(4);
    BYTE DockAlign;
    BITFIELD bUseTextHeight:1 GCC_PACK(4);
    BITFIELD bDockTop:1;
    class UMaterial* Effect GCC_PACK(4);
    DECLARE_CLASS(UGUITitleBar,UGUIBorder,0,XInterface)
	void PreDraw(UCanvas* Canvas);
};


struct UGUIPage_eventHandleParameters_Parms
{
    FString Param1;
    FString Param2;
};
struct UGUIPage_eventChangeHint_Parms
{
    FString NewHint;
};
struct UGUIPage_eventOnCanClose_Parms
{
    BITFIELD bCancelled;
    BITFIELD ReturnValue;
};
struct UGUIPage_eventOnClose_Parms
{
    BITFIELD bCancelled;
};
struct UGUIPage_eventOnReOpen_Parms
{
};
struct UGUIPage_eventOnOpen_Parms
{
};
class XINTERFACE_API UGUIPage : public UGUIMultiComponent
{
public:
    BITFIELD bRenderWorld:1 GCC_PACK(4);
    BITFIELD bPauseIfPossible:1;
    BITFIELD bCheckResolution:1;
    BITFIELD bCaptureInput:1;
    BITFIELD bRequire640x480:1;
    BITFIELD bPersistent:1;
    BITFIELD bDisconnectOnOpen:1;
    BITFIELD bAllowedAsLast:1;
    BITFIELD bRestorable:1;
    class UGUIPage* ParentPage GCC_PACK(4);
    class UMaterial* Background;
    FColor BackgroundColor;
    FColor InactiveFadeColor;
    class USound* OpenSound;
    class USound* CloseSound;
    TArrayNoInit<class UGUIComponent*> Timers;
    BYTE BackgroundRStyle;
    FScriptDelegate __OnOpen__Delegate GCC_PACK(4);
    FScriptDelegate __OnReOpen__Delegate;
    FScriptDelegate __OnClose__Delegate;
    FScriptDelegate __OnCanClose__Delegate;
    void eventHandleParameters(const FString& Param1, const FString& Param2)
    {
        UGUIPage_eventHandleParameters_Parms Parms;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(XINTERFACE_HandleParameters),&Parms);
    }
    void eventChangeHint(const FString& NewHint)
    {
        UGUIPage_eventChangeHint_Parms Parms;
        Parms.NewHint=NewHint;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ChangeHint),&Parms);
    }
    BITFIELD delegateOnCanClose(BITFIELD bCancelled)
    {
        UGUIPage_eventOnCanClose_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessDelegate(XINTERFACE_OnCanClose,&__OnCanClose__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnClose(BITFIELD bCancelled)
    {
        UGUIPage_eventOnClose_Parms Parms;
        Parms.bCancelled=((bCancelled) ? FIRST_BITFIELD : 0);
        ProcessDelegate(XINTERFACE_OnClose,&__OnClose__Delegate,&Parms);
    }
    void delegateOnReOpen()
    {
        ProcessDelegate(XINTERFACE_OnReOpen,&__OnReOpen__Delegate,NULL);
    }
    void delegateOnOpen()
    {
        ProcessDelegate(XINTERFACE_OnOpen,&__OnOpen__Delegate,NULL);
    }
    DECLARE_CLASS(UGUIPage,UGUIMultiComponent,0,XInterface)
    void Draw(UCanvas* Canvas);
    UBOOL NativeKeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta );
    void UpdateTimers(float DeltaTime);
    UGUIComponent* UnderCursor( FLOAT MouseX, FLOAT MouseY );
    UBOOL MousePressed(UBOOL IsRepeat);                 // The Mouse was pressed
    UBOOL MouseReleased();                              // The Mouse was released
    UBOOL MouseHover();
};


class XINTERFACE_API UGUIListBoxBase : public UGUIMultiComponent
{
public:
    FStringNoInit SelectedStyleName GCC_PACK(4);
    FStringNoInit SectionStyleName;
    FStringNoInit OutlineStyleName;
    FStringNoInit DefaultListClass;
    class UGUIScrollBarBase* MyScrollBar;
    class UGUIListBase* MyList;
    BITFIELD bVisibleWhenEmpty:1 GCC_PACK(4);
    BITFIELD bSorted:1;
    BITFIELD bInitializeList:1;
    DECLARE_CLASS(UGUIListBoxBase,UGUIMultiComponent,0,XInterface)
    void PreDraw(UCanvas* Canvas);
    void Draw(UCanvas* Canvas);                             // Handle drawing of the component natively
};


class XINTERFACE_API UGUITreeListBox : public UGUIListBoxBase
{
public:
    class UGUITreeList* List GCC_PACK(4);
    DECLARE_CLASS(UGUITreeListBox,UGUIListBoxBase,0,XInterface)
	void PreDraw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIMultiColumnListBox : public UGUIListBoxBase
{
public:
    class UGUIMultiColumnListHeader* Header GCC_PACK(4);
    BITFIELD bDisplayHeader:1 GCC_PACK(4);
    class UGUIMultiColumnList* List GCC_PACK(4);
    TArrayNoInit<FLOAT> HeaderColumnPerc;
    TArrayNoInit<FString> ColumnHeadings;
    BITFIELD bFullHeightStyle:1 GCC_PACK(4);
    DECLARE_CLASS(UGUIMultiColumnListBox,UGUIListBoxBase,0,XInterface)
	void PreDraw(UCanvas* Canvas);
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIScrollTextBox : public UGUIListBoxBase
{
public:
    class UGUIScrollText* MyScrollText GCC_PACK(4);
    BITFIELD bRepeat:1 GCC_PACK(4);
    BITFIELD bNoTeletype:1;
    BITFIELD bStripColors:1;
    FLOAT InitialDelay GCC_PACK(4);
    FLOAT CharDelay;
    FLOAT EOLDelay;
    FLOAT RepeatDelay;
    BYTE TextAlign;
    FStringNoInit Separator GCC_PACK(4);
    FStringNoInit ESC;
    FStringNoInit COMMA;
    DECLARE_CLASS(UGUIScrollTextBox,UGUIListBoxBase,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUIScrollTextBox)
};


class XINTERFACE_API UGUIListBox : public UGUIListBoxBase
{
public:
    class UGUIList* List GCC_PACK(4);
    DECLARE_CLASS(UGUIListBox,UGUIListBoxBase,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUIListBox)
};

struct XINTERFACE_API FPaddingPercent
{
    FLOAT HorzPerc GCC_PACK(4);
    FLOAT VertPerc;
};


class XINTERFACE_API UGUIButton : public UGUIComponent
{
public:
    BYTE CaptionAlign GCC_PACK(4);
    class UGUIStyles* CaptionEffectStyle GCC_PACK(4);
    FStringNoInit CaptionEffectStyleName;
    FStringNoInit Caption;
    FPaddingPercent AutoSizePadding;
    FStringNoInit SizingCaption;
    BITFIELD bAutoSize:1 GCC_PACK(4);
    BITFIELD bAutoShrink:1;
    BITFIELD bWrapCaption:1;
    BITFIELD bUseCaptionHeight:1;
    DECLARE_CLASS(UGUIButton,UGUIComponent,0,XInterface)
	void PreDraw(UCanvas* Canvas);
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UStateButton : public UGUIButton
{
public:
    class UMaterial* Images[5] GCC_PACK(4);
    BYTE ImageStyle;
    DECLARE_CLASS(UStateButton,UGUIButton,0,XInterface)
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIGFXButton : public UGUIButton
{
public:
    INT ImageIndex GCC_PACK(4);
    class UMaterial* Graphic;
    BYTE Position;
    BITFIELD bCheckBox:1 GCC_PACK(4);
    BITFIELD bClientBound:1;
    BITFIELD bChecked:1;
    DECLARE_CLASS(UGUIGFXButton,UGUIButton,0,XInterface)
		void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIGripButtonBase : public UGUIGFXButton
{
public:
    DECLARE_CLASS(UGUIGripButtonBase,UGUIGFXButton,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUIGripButtonBase)
};


class XINTERFACE_API UGUIScrollButtonBase : public UGUIGFXButton
{
public:
    BITFIELD bIncreaseButton:1 GCC_PACK(4);
    DECLARE_CLASS(UGUIScrollButtonBase,UGUIGFXButton,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUIScrollButtonBase)
};


class XINTERFACE_API UGUICheckBoxButton : public UGUIGFXButton
{
public:
    class UMaterial* CheckedOverlay[10] GCC_PACK(4);
    BITFIELD bAllOverlay:1 GCC_PACK(4);
    DECLARE_CLASS(UGUICheckBoxButton,UGUIGFXButton,0,XInterface)
		void Draw(UCanvas* Canvas);
};


struct UGUIEditBox_eventSetText_Parms
{
    FString NewText;
};
class XINTERFACE_API UGUIEditBox : public UGUIButton
{
public:
    FStringNoInit TextStr GCC_PACK(4);
    FStringNoInit AllowedCharSet;
    BITFIELD bMaskText:1 GCC_PACK(4);
    BITFIELD bIntOnly:1;
    BITFIELD bFloatOnly:1;
    BITFIELD bIncludeSign:1;
    BITFIELD bConvertSpaces:1;
    INT MaxWidth GCC_PACK(4);
    BYTE TextCase;
    INT BorderOffsets[4] GCC_PACK(4);
    BITFIELD bReadOnly:1 GCC_PACK(4);
    BITFIELD bAlwaysNotify:1;
    INT CaretPos GCC_PACK(4);
    INT FirstVis;
    INT LastSizeX;
    INT LastCaret;
    INT LastLength;
    BITFIELD bAllSelected:1 GCC_PACK(4);
    BYTE LastKey GCC_PACK(4);
    FLOAT DelayTime GCC_PACK(4);
    void eventSetText(const FString& NewText)
    {
        UGUIEditBox_eventSetText_Parms Parms;
        Parms.NewText=NewText;
        ProcessEvent(FindFunctionChecked(XINTERFACE_SetText),&Parms);
    }
    DECLARE_CLASS(UGUIEditBox,UGUIButton,0,XInterface)
		void Draw(UCanvas* Canvas);
};


struct UGUISpinnerButton_eventOnMinusClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUISpinnerButton_eventOnPlusClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUISpinnerButton : public UGUIButton
{
public:
    FScriptDelegate __OnPlusClick__Delegate GCC_PACK(4);
    FScriptDelegate __OnMinusClick__Delegate;
    BITFIELD delegateOnMinusClick(class UGUIComponent* Sender)
    {
        UGUISpinnerButton_eventOnMinusClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnMinusClick,&__OnMinusClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnPlusClick(class UGUIComponent* Sender)
    {
        UGUISpinnerButton_eventOnPlusClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnPlusClick,&__OnPlusClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUISpinnerButton,UGUIButton,0,XInterface)
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUITabButton : public UGUIButton
{
public:
    BITFIELD bForceFlash:1 GCC_PACK(4);
    BITFIELD bActive:1;
    class UGUITabPanel* MyPanel GCC_PACK(4);
    DECLARE_CLASS(UGUITabButton,UGUIButton,0,XInterface)
		UBOOL MousePressed(UBOOL IsRepeat);					// The Mouse was pressed
		UBOOL MouseReleased();								// The Mouse was released
		void  Draw(UCanvas* Canvas);
		UGUIComponent* UnderCursor(FLOAT MouseX, FLOAT MouseY);
};


struct UGUIToolTip_eventGetHeight_Parms
{
    class UCanvas* C;
    FLOAT ReturnValue;
};
struct UGUIToolTip_eventGetWidth_Parms
{
    class UCanvas* C;
    FLOAT ReturnValue;
};
struct UGUIToolTip_eventGetTop_Parms
{
    class UCanvas* C;
    FLOAT ReturnValue;
};
struct UGUIToolTip_eventGetLeft_Parms
{
    class UCanvas* C;
    FLOAT ReturnValue;
};
struct UGUIToolTip_eventUpdatePosition_Parms
{
    class UCanvas* C;
};
struct UGUIToolTip_eventHideToolTip_Parms
{
};
struct UGUIToolTip_eventShowToolTip_Parms
{
};
struct UGUIToolTip_eventTick_Parms
{
    FLOAT RealSeconds;
};
struct UGUIToolTip_eventLeaveArea_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIToolTip_eventEnterArea_Parms
{
    class UGUIToolTip* ReturnValue;
};
class XINTERFACE_API UGUIToolTip : public UGUIComponent
{
public:
    BITFIELD bResetPosition:1 GCC_PACK(4);
    BITFIELD bTrackMouse:1;
    BITFIELD bMultiline:1;
    BITFIELD bTrackInput:1;
    FStringNoInit Text GCC_PACK(4);
    TArrayNoInit<FString> Lines;
    FLOAT StartTime;
    FLOAT CurrentTime;
    FLOAT MaxWidth;
    FLOAT InitialDelay;
    FLOAT ExpirationSeconds;
    FScriptDelegate __EnterArea__Delegate;
    FScriptDelegate __LeaveArea__Delegate;
    FScriptDelegate __Tick__Delegate;
    FScriptDelegate __ShowToolTip__Delegate;
    FScriptDelegate __HideToolTip__Delegate;
    FScriptDelegate __GetLeft__Delegate;
    FScriptDelegate __GetTop__Delegate;
    FScriptDelegate __GetWidth__Delegate;
    FScriptDelegate __GetHeight__Delegate;
    DECLARE_FUNCTION(execSetTip);
    FLOAT delegateGetHeight(class UCanvas* C)
    {
        UGUIToolTip_eventGetHeight_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        ProcessDelegate(XINTERFACE_GetHeight,&__GetHeight__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    FLOAT delegateGetWidth(class UCanvas* C)
    {
        UGUIToolTip_eventGetWidth_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        ProcessDelegate(XINTERFACE_GetWidth,&__GetWidth__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    FLOAT delegateGetTop(class UCanvas* C)
    {
        UGUIToolTip_eventGetTop_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        ProcessDelegate(XINTERFACE_GetTop,&__GetTop__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    FLOAT delegateGetLeft(class UCanvas* C)
    {
        UGUIToolTip_eventGetLeft_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        ProcessDelegate(XINTERFACE_GetLeft,&__GetLeft__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void eventUpdatePosition(class UCanvas* C)
    {
        UGUIToolTip_eventUpdatePosition_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(XINTERFACE_UpdatePosition),&Parms);
    }
    void delegateHideToolTip()
    {
        ProcessDelegate(XINTERFACE_HideToolTip,&__HideToolTip__Delegate,NULL);
    }
    void delegateShowToolTip()
    {
        ProcessDelegate(XINTERFACE_ShowToolTip,&__ShowToolTip__Delegate,NULL);
    }
    void delegateTick(FLOAT RealSeconds)
    {
        UGUIToolTip_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.RealSeconds=RealSeconds;
        ProcessDelegate(XINTERFACE_Tick,&__Tick__Delegate,&Parms);
        }
    }
    BITFIELD delegateLeaveArea()
    {
        UGUIToolTip_eventLeaveArea_Parms Parms;
        Parms.ReturnValue=0;
        ProcessDelegate(XINTERFACE_LeaveArea,&__LeaveArea__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    class UGUIToolTip* delegateEnterArea()
    {
        UGUIToolTip_eventEnterArea_Parms Parms;
        Parms.ReturnValue=0;
        ProcessDelegate(XINTERFACE_EnterArea,&__EnterArea__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIToolTip,UGUIComponent,0|CLASS_Config,XInterface)
	void PreDraw( UCanvas* C );
	void Draw( UCanvas* C );
	void SetTip( FString& NewTip );
};


struct UGUIContextMenu_eventOnContextHitTest_Parms
{
    FLOAT MouseX;
    FLOAT MouseY;
    BITFIELD ReturnValue;
};
struct UGUIContextMenu_eventOnSelect_Parms
{
    class UGUIContextMenu* Sender;
    INT ClickIndex;
};
struct UGUIContextMenu_eventOnClose_Parms
{
    class UGUIContextMenu* Sender;
    BITFIELD ReturnValue;
};
struct UGUIContextMenu_eventOnOpen_Parms
{
    class UGUIContextMenu* Sender;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUIContextMenu : public UGUIComponent
{
public:
    TArrayNoInit<FString> ContextItems GCC_PACK(4);
    INT ItemIndex;
    FStringNoInit SelectionStyleName;
    class UGUIStyles* SelectionStyle;
    INT ItemHeight;
    FScriptDelegate __OnOpen__Delegate;
    FScriptDelegate __OnClose__Delegate;
    FScriptDelegate __OnSelect__Delegate;
    FScriptDelegate __OnContextHitTest__Delegate;
    BITFIELD delegateOnContextHitTest(FLOAT MouseX, FLOAT MouseY)
    {
        UGUIContextMenu_eventOnContextHitTest_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MouseX=MouseX;
        Parms.MouseY=MouseY;
        ProcessDelegate(XINTERFACE_OnContextHitTest,&__OnContextHitTest__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnSelect(class UGUIContextMenu* Sender, INT ClickIndex)
    {
        UGUIContextMenu_eventOnSelect_Parms Parms;
        Parms.Sender=Sender;
        Parms.ClickIndex=ClickIndex;
        ProcessDelegate(XINTERFACE_OnSelect,&__OnSelect__Delegate,&Parms);
    }
    BITFIELD delegateOnClose(class UGUIContextMenu* Sender)
    {
        UGUIContextMenu_eventOnClose_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnClose,&__OnClose__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnOpen(class UGUIContextMenu* Sender)
    {
        UGUIContextMenu_eventOnOpen_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnOpen,&__OnOpen__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIContextMenu,UGUIComponent,0,XInterface)
    virtual void  PreDraw(UCanvas *Canvas);
    virtual void  Draw(UCanvas* Canvas);
    virtual void  UpdateIndex(INT MouseX, INT MouseY);    // Check to see if a mouse press affects the control

    virtual UBOOL Close();
    virtual UBOOL KeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta);   // Handle key events
};


class XINTERFACE_API UGUIProgressBar : public UGUIComponent
{
public:
    class UMaterial* BarBack GCC_PACK(4);
    class UMaterial* BarTop;
    FColor BarColor;
    FLOAT Low;
    FLOAT High;
    FLOAT Value;
    FLOAT CaptionWidth;
    BYTE CaptionAlign;
    BYTE ValueRightAlign;
    FStringNoInit Caption GCC_PACK(4);
    FStringNoInit FontName;
    FStringNoInit ValueFontName;
    FLOAT GraphicMargin;
    FLOAT ValueRightWidth;
    BITFIELD bShowLow:1 GCC_PACK(4);
    BITFIELD bShowHigh:1;
    BITFIELD bShowValue:1;
    INT NumDecimals GCC_PACK(4);
    BYTE BarDirection;
    DECLARE_CLASS(UGUIProgressBar,UGUIComponent,0,XInterface)
	void Draw(UCanvas* Canvas);
};

struct XINTERFACE_API FAnimInfo
{
    FLOAT cX GCC_PACK(4);
    FLOAT cY;
    FLOAT Scale;
    FLOAT FadeTime;
    FLOAT Alpha;
    FLOAT TargetAlpha;
    FLOAT ResetDelay;
    FLOAT TravelTime;
};


struct UCoolImage_eventResetItem_Parms
{
    INT i;
};
class XINTERFACE_API UCoolImage : public UGUIComponent
{
public:
    class UMaterial* Image GCC_PACK(4);
    TArrayNoInit<FAnimInfo> Anims;
    INT NoAnims;
    FLOAT MaxScale;
    FLOAT MinScale;
    FLOAT MinFadeTime;
    FLOAT MaxFadeTime;
    FLOAT MinResetDelay;
    FLOAT MaxResetDelay;
    INT FullAlpha;
    void eventResetItem(INT i)
    {
        UCoolImage_eventResetItem_Parms Parms;
        Parms.i=i;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ResetItem),&Parms);
    }
    DECLARE_CLASS(UCoolImage,UGUIComponent,0,XInterface)
		void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIImage : public UGUIComponent
{
public:
    class UMaterial* Image GCC_PACK(4);
    class UMaterial* DropShadow;
    FColor ImageColor;
    BYTE ImageStyle;
    BYTE ImageRenderStyle;
    BYTE ImageAlign;
    INT X1 GCC_PACK(4);
    INT Y1;
    INT X2;
    INT Y2;
    INT DropShadowX;
    INT DropShadowY;
    FLOAT BorderOffsets[4];
    FLOAT X3;
    FLOAT Y3;
    DECLARE_CLASS(UGUIImage,UGUIComponent,0,XInterface)
		void UpdateBounds();
		void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUISectionBackground : public UGUIImage
{
public:
    class UGUIStyles* CaptionStyle GCC_PACK(4);
    FStringNoInit CaptionStyleName;
    INT AltCaptionOffset[4];
    BYTE AltCaptionAlign;
    BITFIELD bAltCaption:1 GCC_PACK(4);
    BITFIELD bRemapStack:1;
    BITFIELD bFillClient:1;
    TArrayNoInit<class UGUIComponent*> AlignStack GCC_PACK(4);
    class UMaterial* HeaderTop;
    class UMaterial* HeaderBar;
    class UMaterial* HeaderBase;
    FStringNoInit Caption;
    FLOAT ColPadding;
    FLOAT LeftPadding;
    FLOAT RightPadding;
    FLOAT TopPadding;
    FLOAT BottomPadding;
    FLOAT ImageOffset[4];
    INT NumColumns;
    INT MaxPerColumn;
    DECLARE_CLASS(UGUISectionBackground,UGUIImage,0,XInterface)
        void AutoPosition( TArray<UGUIComponent*>& Components, float PosL, float PosT, float PosR, float PosB, INT Col = 1, float ColSpace = 0.f );
        void PreDraw(UCanvas* Canvas);
        void Draw(UCanvas* Canvas);     // Should be overridden in a subclass
};


struct UGUISlider_eventGetMarkerPosition_Parms
{
    FLOAT ReturnValue;
};
struct UGUISlider_eventOnDrawCaption_Parms
{
    FString ReturnValue;
};
struct UGUISlider_eventOnPreDrawCaption_Parms
{
    FLOAT X;
    FLOAT Y;
    FLOAT XL;
    FLOAT YL;
    BYTE Justification;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUISlider : public UGUIComponent
{
public:
    FLOAT MinValue GCC_PACK(4);
    FLOAT MaxValue;
    FLOAT Value;
    FLOAT MarkerWidth;
    BITFIELD bIntSlider:1 GCC_PACK(4);
    BITFIELD bShowMarker:1;
    BITFIELD bShowCaption:1;
    BITFIELD bDrawPercentSign:1;
    BITFIELD bReadOnly:1;
    BITFIELD bShowValueTooltip:1;
    class UMaterial* FillImage GCC_PACK(4);
    FStringNoInit CaptionStyleName;
    FStringNoInit BarStyleName;
    class UGUIStyles* CaptionStyle;
    class UGUIStyles* BarStyle;
    FScriptDelegate __OnPreDrawCaption__Delegate;
    FScriptDelegate __OnDrawCaption__Delegate;
    FLOAT eventGetMarkerPosition()
    {
        UGUISlider_eventGetMarkerPosition_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_GetMarkerPosition),&Parms);
        return Parms.ReturnValue;
    }
    FString delegateOnDrawCaption()
    {
        UGUISlider_eventOnDrawCaption_Parms Parms;
        ProcessDelegate(XINTERFACE_OnDrawCaption,&__OnDrawCaption__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnPreDrawCaption(FLOAT& X, FLOAT& Y, FLOAT& XL, FLOAT& YL, BYTE& Justification)
    {
        UGUISlider_eventOnPreDrawCaption_Parms Parms;
        Parms.ReturnValue=0;
        Parms.X=X;
        Parms.Y=Y;
        Parms.XL=XL;
        Parms.YL=YL;
        Parms.Justification=Justification;
        ProcessDelegate(XINTERFACE_OnPreDrawCaption,&__OnPreDrawCaption__Delegate,&Parms);
        X=Parms.X;
        Y=Parms.Y;
        XL=Parms.XL;
        YL=Parms.YL;
        Justification=Parms.Justification;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUISlider,UGUIComponent,0,XInterface)
        void Draw(UCanvas* Canvas);
};


struct UGUIScrollZoneBase_eventOnScrollZoneClick_Parms
{
    FLOAT Delta;
};
class XINTERFACE_API UGUIScrollZoneBase : public UGUIComponent
{
public:
    FScriptDelegate __OnScrollZoneClick__Delegate GCC_PACK(4);
    void delegateOnScrollZoneClick(FLOAT Delta)
    {
        UGUIScrollZoneBase_eventOnScrollZoneClick_Parms Parms;
        Parms.Delta=Delta;
        ProcessDelegate(XINTERFACE_OnScrollZoneClick,&__OnScrollZoneClick__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIScrollZoneBase,UGUIComponent,0,XInterface)
		void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUILabel : public UGUIComponent
{
public:
    FStringNoInit Caption GCC_PACK(4);
    BYTE TextAlign;
    FColor TextColor GCC_PACK(4);
    FColor FocusedTextColor;
    BYTE TextStyle;
    FStringNoInit TextFont GCC_PACK(4);
    BITFIELD bTransparent:1 GCC_PACK(4);
    BITFIELD bMultiline:1;
    BYTE VertAlign GCC_PACK(4);
    FColor BackColor GCC_PACK(4);
    FColor ShadowColor;
    FLOAT ShadowOffsetX;
    FLOAT ShadowOffsetY;
    FColor HilightColor;
    FLOAT HilightOffsetX;
    FLOAT HilightOffsetY;
    DECLARE_CLASS(UGUILabel,UGUIComponent,0,XInterface)
        void Draw(UCanvas* Canvas);
};


struct UGUIListBase_eventCalculateIndex_Parms
{
    BITFIELD bRequireValidIndex;
    INT ReturnValue;
};
struct UGUIListBase_eventCheckLinkedObjects_Parms
{
    class UGUIListBase* List;
};
struct UGUIListBase_eventOnTrack_Parms
{
    class UGUIComponent* Sender;
    INT LastIndex;
};
struct UGUIListBase_eventOnAdjustTop_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIListBase_eventOnDrawItem_Parms
{
    class UCanvas* Canvas;
    INT Item;
    FLOAT X;
    FLOAT Y;
    FLOAT W;
    FLOAT HT;
    BITFIELD bSelected;
    BITFIELD bPending;
};
struct UGUIListBase_eventOnScrollBy_Parms
{
    class UGUIComponent* Sender;
};
class XINTERFACE_API UGUIListBase : public UGUIComponent
{
public:
    BITFIELD bSorted:1 GCC_PACK(4);
    BITFIELD bHotTrack:1;
    BITFIELD bHotTrackSound:1;
    BITFIELD bDrawSelectionBorder:1;
    BITFIELD bVisibleWhenEmpty:1;
    BITFIELD bNotify:1;
    BITFIELD bInitializeList:1;
    BITFIELD bMultiSelect:1;
    BITFIELD bAllowEmptyItems:1;
    class UGUIScrollBarBase* MyScrollBar GCC_PACK(4);
    FStringNoInit SelectedStyleName;
    FStringNoInit SectionStyleName;
    FStringNoInit OutlineStyleName;
    class UGUIStyles* SelectedStyle;
    class UGUIStyles* SectionStyle;
    class UGUIStyles* OutlineStyle;
    BYTE SectionJustification;
    class UMaterial* SelectedImage GCC_PACK(4);
    FColor SelectedBKColor;
    INT Top;
    INT Index;
    INT ItemsPerPage;
    FLOAT ItemHeight;
    FLOAT ItemWidth;
    INT ItemCount;
    TArrayNoInit<INT> SelectedItems;
    INT LastSelected;
    INT LastPressX;
    INT LastPressY;
    INT DropIndex;
    INT MightRemove;
    TArrayNoInit<class UGUIComponent*> LinkedObjects;
    FScriptDelegate __OnScrollBy__Delegate;
    FScriptDelegate __OnDrawItem__Delegate;
    FScriptDelegate __OnAdjustTop__Delegate;
    FScriptDelegate __OnTrack__Delegate;
    FScriptDelegate __CheckLinkedObjects__Delegate;
    INT eventCalculateIndex(BITFIELD bRequireValidIndex)
    {
        UGUIListBase_eventCalculateIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bRequireValidIndex=((bRequireValidIndex) ? FIRST_BITFIELD : 0);
        ProcessEvent(FindFunctionChecked(XINTERFACE_CalculateIndex),&Parms);
        return Parms.ReturnValue;
    }
    void delegateCheckLinkedObjects(class UGUIListBase* List)
    {
        UGUIListBase_eventCheckLinkedObjects_Parms Parms;
        Parms.List=List;
        ProcessDelegate(XINTERFACE_CheckLinkedObjects,&__CheckLinkedObjects__Delegate,&Parms);
    }
    void delegateOnTrack(class UGUIComponent* Sender, INT LastIndex)
    {
        UGUIListBase_eventOnTrack_Parms Parms;
        Parms.Sender=Sender;
        Parms.LastIndex=LastIndex;
        ProcessDelegate(XINTERFACE_OnTrack,&__OnTrack__Delegate,&Parms);
    }
    void delegateOnAdjustTop(class UGUIComponent* Sender)
    {
        UGUIListBase_eventOnAdjustTop_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnAdjustTop,&__OnAdjustTop__Delegate,&Parms);
    }
    void delegateOnDrawItem(class UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, BITFIELD bSelected, BITFIELD bPending)
    {
        UGUIListBase_eventOnDrawItem_Parms Parms;
        Parms.Canvas=Canvas;
        Parms.Item=Item;
        Parms.X=X;
        Parms.Y=Y;
        Parms.W=W;
        Parms.HT=HT;
        Parms.bSelected=((bSelected) ? FIRST_BITFIELD : 0);
        Parms.bPending=((bPending) ? FIRST_BITFIELD : 0);
        ProcessDelegate(XINTERFACE_OnDrawItem,&__OnDrawItem__Delegate,&Parms);
    }
    void delegateOnScrollBy(class UGUIComponent* Sender)
    {
        UGUIListBase_eventOnScrollBy_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnScrollBy,&__OnScrollBy__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIListBase,UGUIComponent,0,XInterface)
protected:
    virtual void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending) {}
public:
};


struct UGUIVertList_eventGetItemHeight_Parms
{
    class UCanvas* C;
    FLOAT ReturnValue;
};
class XINTERFACE_API UGUIVertList : public UGUIListBase
{
public:
    FScriptDelegate __GetItemHeight__Delegate GCC_PACK(4);
    FLOAT delegateGetItemHeight(class UCanvas* C)
    {
        UGUIVertList_eventGetItemHeight_Parms Parms;
        Parms.ReturnValue=0;
        Parms.C=C;
        ProcessDelegate(XINTERFACE_GetItemHeight,&__GetItemHeight__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIVertList,UGUIListBase,0,XInterface)
	void PreDraw(UCanvas* Canvas);
	void Draw(UCanvas* Canvas);
};


struct UGUIVertImageList_eventSwap_Parms
{
    INT IndexA;
    INT IndexB;
};
class XINTERFACE_API UGUIVertImageList : public UGUIVertList
{
public:
    BYTE CellStyle GCC_PACK(4);
    FLOAT ImageScale GCC_PACK(4);
    INT NoVisibleRows;
    INT NoVisibleCols;
    INT HorzBorder;
    INT VertBorder;
    TArrayNoInit<FImageListElem> Elements;
    TArrayNoInit<FImageListElem> SelectedElements;
    class UMaterial* LockedMat;
    void eventSwap(INT IndexA, INT IndexB)
    {
        UGUIVertImageList_eventSwap_Parms Parms;
        Parms.IndexA=IndexA;
        Parms.IndexB=IndexB;
        ProcessEvent(FindFunctionChecked(XINTERFACE_Swap),&Parms);
    }
    DECLARE_CLASS(UGUIVertImageList,UGUIVertList,0,XInterface)
	void PreDraw(UCanvas* Canvas);
	void Draw(UCanvas* Canvas);
	void DrawItem( UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT XL, FLOAT YL, UBOOL bSelected, UBOOL bPending );
};


struct UGUIList_eventSwap_Parms
{
    INT IndexA;
    INT IndexB;
};
struct UGUIList_eventCompareItem_Parms
{
    FGUIListElem ElemA;
    FGUIListElem ElemB;
    INT ReturnValue;
};
class XINTERFACE_API UGUIList : public UGUIVertList
{
public:
    BYTE TextAlign GCC_PACK(4);
    TArrayNoInit<FGUIListElem> Elements GCC_PACK(4);
    TArrayNoInit<FGUIListElem> SelectedElements;
    FColor OfficialColor;
    FColor Official2004Color;
    FColor BonusPackColor;
    FScriptDelegate __CompareItem__Delegate;
    DECLARE_FUNCTION(execSortList);
    void eventSwap(INT IndexA, INT IndexB)
    {
        UGUIList_eventSwap_Parms Parms;
        Parms.IndexA=IndexA;
        Parms.IndexB=IndexB;
        ProcessEvent(FindFunctionChecked(XINTERFACE_Swap),&Parms);
    }
    INT delegateCompareItem(FGUIListElem ElemA, FGUIListElem ElemB)
    {
        UGUIList_eventCompareItem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ElemA=ElemA;
        Parms.ElemB=ElemB;
        ProcessDelegate(XINTERFACE_CompareItem,&__CompareItem__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIList,UGUIVertList,0,XInterface)
protected:
	virtual void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
};


class XINTERFACE_API UMultiSelectList : public UGUIList
{
public:
    TArrayNoInit<FMultiSelectListElem> MElements GCC_PACK(4);
    DECLARE_CLASS(UMultiSelectList,UGUIList,0,XInterface)
	virtual void Draw(UCanvas* Canvas);
protected:
	virtual void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
};

enum eScrollState
{
    STS_None                =0,
    STS_Initial             =1,
    STS_Char                =2,
    STS_EOL                 =3,
    STS_Repeat              =4,
    STS_MAX                 =5,
};

struct UGUIScrollText_eventOnEndOfLine_Parms
{
};
class XINTERFACE_API UGUIScrollText : public UGUIList
{
public:
    INT MaxHistory GCC_PACK(4);
    FStringNoInit NewText;
    FStringNoInit ClickedString;
    FStringNoInit Content;
    FStringNoInit Separator;
    INT VisibleLines;
    INT VisibleChars;
    FLOAT oldWidth;
    BYTE ScrollState;
    BITFIELD bNewContent:1 GCC_PACK(4);
    BITFIELD bStopped:1;
    BITFIELD bReceivedNewContent:1;
    BITFIELD bRepeat:1;
    BITFIELD bNoTeletype:1;
    BITFIELD bClickText:1;
    FLOAT InitialDelay GCC_PACK(4);
    FLOAT CharDelay;
    FLOAT EOLDelay;
    FLOAT RepeatDelay;
    TArrayNoInit<FString> StringElements;
    FScriptDelegate __OnEndOfLine__Delegate;
    DECLARE_FUNCTION(execGetWordUnderCursor);
    void delegateOnEndOfLine()
    {
        ProcessDelegate(XINTERFACE_OnEndOfLine,&__OnEndOfLine__Delegate,NULL);
    }
    DECLARE_CLASS(UGUIScrollText,UGUIList,0,XInterface)
	UBOOL WrapURL( FString& Text ) const;
	void PreDraw(UCanvas *Canvas);
	void Draw(UCanvas* Canvas);
protected:
	void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
};

struct XINTERFACE_API FMultiColumnSortData
{
    FString SortString GCC_PACK(4);
    INT SortItem;

	FMultiColumnSortData( INT InSortItem = INDEX_NONE, const TCHAR* InString = TEXT("") );

};


struct UGUIMultiColumnList_eventInitializeColumns_Parms
{
    class UCanvas* C;
};
struct UGUIMultiColumnList_eventOnSortChanged_Parms
{
};
struct UGUIMultiColumnList_eventGetSortString_Parms
{
    INT YourArrayIndex;
    FString ReturnValue;
};
struct UGUIMultiColumnList_eventOnColumnSized_Parms
{
    INT Column;
};
class XINTERFACE_API UGUIMultiColumnList : public UGUIVertList
{
public:
    TArrayNoInit<FString> ColumnHeadings GCC_PACK(4);
    TArrayNoInit<FLOAT> InitColumnPerc;
    TArrayNoInit<FString> ColumnHeadingHints;
    TArrayNoInit<FMultiColumnSortData> SortData;
    TArrayNoInit<INT> InvSortData;
    TArrayNoInit<FLOAT> ColumnWidths;
    FLOAT CellSpacing;
    INT SortColumn;
    BITFIELD NeedsSorting:1 GCC_PACK(4);
    BITFIELD SortDescending:1;
    BITFIELD ExpandLastColumn:1;
    FScriptDelegate __OnColumnSized__Delegate GCC_PACK(4);
    FScriptDelegate __GetSortString__Delegate;
    DECLARE_FUNCTION(execAddedItem);
    DECLARE_FUNCTION(execRemovedItem);
    DECLARE_FUNCTION(execUpdatedItem);
    DECLARE_FUNCTION(execSortList);
    DECLARE_FUNCTION(execChangeSortOrder);
    DECLARE_FUNCTION(execGetListIndex);
    void eventInitializeColumns(class UCanvas* C)
    {
        UGUIMultiColumnList_eventInitializeColumns_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(XINTERFACE_InitializeColumns),&Parms);
    }
    void eventOnSortChanged()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_OnSortChanged),NULL);
    }
    FString delegateGetSortString(INT YourArrayIndex)
    {
        UGUIMultiColumnList_eventGetSortString_Parms Parms;
        Parms.YourArrayIndex=YourArrayIndex;
        ProcessDelegate(XINTERFACE_GetSortString,&__GetSortString__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnColumnSized(INT Column)
    {
        UGUIMultiColumnList_eventOnColumnSized_Parms Parms;
        Parms.Column=Column;
        ProcessDelegate(XINTERFACE_OnColumnSized,&__OnColumnSized__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIMultiColumnList,UGUIVertList,0,XInterface)
	INT FindSortIndex( INT YourArrayIndex ) const;
};


struct UGUITreeList_eventIsExpanded_Parms
{
    INT ParentIndex;
    BITFIELD ReturnValue;
};
struct UGUITreeList_eventHasChildren_Parms
{
    INT ParentIndex;
    BITFIELD ReturnValue;
};
struct UGUITreeList_eventValidSelectionAt_Parms
{
    INT idx;
    BITFIELD ReturnValue;
};
struct UGUITreeList_eventValidSelection_Parms
{
    BITFIELD ReturnValue;
};
struct UGUITreeList_eventSwap_Parms
{
    INT IndexA;
    INT IndexB;
    BITFIELD ReturnValue;
};
struct UGUITreeList_eventCompareItem_Parms
{
    FGUITreeNode ElemA;
    FGUITreeNode ElemB;
    INT ReturnValue;
};
class XINTERFACE_API UGUITreeList : public UGUIVertList
{
public:
    BYTE TextAlign GCC_PACK(4);
    TArrayNoInit<FGUITreeNode> Elements GCC_PACK(4);
    TArrayNoInit<FGUITreeNode> SelectedElements;
    INT VisibleCount;
    FLOAT PrefixWidth;
    FLOAT SelectedPrefixWidth;
    BITFIELD bAllowParentSelection:1 GCC_PACK(4);
    BITFIELD bAllowDuplicateCaption:1;
    BITFIELD bGroupItems:1;
    FScriptDelegate __CompareItem__Delegate GCC_PACK(4);
    DECLARE_FUNCTION(execSortList);
    DECLARE_FUNCTION(execUpdateVisibleCount);
    BITFIELD eventIsExpanded(INT ParentIndex)
    {
        UGUITreeList_eventIsExpanded_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ParentIndex=ParentIndex;
        ProcessEvent(FindFunctionChecked(XINTERFACE_IsExpanded),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventHasChildren(INT ParentIndex)
    {
        UGUITreeList_eventHasChildren_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ParentIndex=ParentIndex;
        ProcessEvent(FindFunctionChecked(XINTERFACE_HasChildren),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventValidSelectionAt(INT idx)
    {
        UGUITreeList_eventValidSelectionAt_Parms Parms;
        Parms.ReturnValue=0;
        Parms.idx=idx;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ValidSelectionAt),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventValidSelection()
    {
        UGUITreeList_eventValidSelection_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ValidSelection),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventSwap(INT IndexA, INT IndexB)
    {
        UGUITreeList_eventSwap_Parms Parms;
        Parms.ReturnValue=0;
        Parms.IndexA=IndexA;
        Parms.IndexB=IndexB;
        ProcessEvent(FindFunctionChecked(XINTERFACE_Swap),&Parms);
        return Parms.ReturnValue;
    }
    INT delegateCompareItem(FGUITreeNode ElemA, FGUITreeNode ElemB)
    {
        UGUITreeList_eventCompareItem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ElemA=ElemA;
        Parms.ElemB=ElemB;
        ProcessDelegate(XINTERFACE_CompareItem,&__CompareItem__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUITreeList,UGUIVertList,0,XInterface)
	INT FindParentIndex( INT ChildIndex ) const;
	void UpdateVisibleCount();
	void Draw(UCanvas* Canvas);

protected:
	virtual void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
};


struct UGUIMultiOptionList_eventCanFocusElement_Parms
{
    class UGUIMenuOption* elem;
    BITFIELD ReturnValue;
};
struct UGUIMultiOptionList_eventValidIndex_Parms
{
    INT idx;
    BITFIELD ReturnValue;
};
struct UGUIMultiOptionList_eventElementVisible_Parms
{
    INT idx;
    BITFIELD ReturnValue;
};
struct UGUIMultiOptionList_eventOnCreateComponent_Parms
{
    class UGUIMenuOption* NewComp;
    class UGUIMultiOptionList* Sender;
};
class XINTERFACE_API UGUIMultiOptionList : public UGUIVertList
{
public:
    TArrayNoInit<class UGUIMenuOption*> Elements GCC_PACK(4);
    FLOAT ItemScaling;
    FLOAT ItemPadding;
    FLOAT ColumnWidth;
    INT NumColumns;
    INT ItemsPerColumn;
    BITFIELD bVerticalLayout:1 GCC_PACK(4);
    FScriptDelegate __OnCreateComponent__Delegate GCC_PACK(4);
    BITFIELD eventCanFocusElement(class UGUIMenuOption* elem)
    {
        UGUIMultiOptionList_eventCanFocusElement_Parms Parms;
        Parms.ReturnValue=0;
        Parms.elem=elem;
        ProcessEvent(FindFunctionChecked(XINTERFACE_CanFocusElement),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventValidIndex(INT idx)
    {
        UGUIMultiOptionList_eventValidIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.idx=idx;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ValidIndex),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventElementVisible(INT idx)
    {
        UGUIMultiOptionList_eventElementVisible_Parms Parms;
        Parms.ReturnValue=0;
        Parms.idx=idx;
        ProcessEvent(FindFunctionChecked(XINTERFACE_ElementVisible),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnCreateComponent(class UGUIMenuOption* NewComp, class UGUIMultiOptionList* Sender)
    {
        UGUIMultiOptionList_eventOnCreateComponent_Parms Parms;
        Parms.NewComp=NewComp;
        Parms.Sender=Sender;
        ProcessDelegate(XINTERFACE_OnCreateComponent,&__OnCreateComponent__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIMultiOptionList,UGUIVertList,0,XInterface)
protected:
	void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
	UBOOL MousePressed(UBOOL IsRepeat);
	UBOOL MouseReleased();
	void PreDraw(UCanvas* Canvas);
	void Draw(UCanvas* Canvas);

	UBOOL NativeKeyType(BYTE& iKey, TCHAR Unicode );
	UBOOL NativeKeyEvent(BYTE& iKey, BYTE& State, FLOAT Delta );

	void NativeInvalidate(UGUIComponent* Who);
	UBOOL SpecialHit( UBOOL bForce );

	UGUIComponent* GetFocused()              const;
	UGUIComponent* UnderCursor( FLOAT MouseX, FLOAT MouseY );

	INT CalculateIndex( UBOOL bRequireValidIndex = 0 );

		#ifdef UCONST_Counter
	    virtual void ResetCounter();
	    #endif
};


class XINTERFACE_API UGUICircularList : public UGUIListBase
{
public:
    BITFIELD bCenterInBounds:1 GCC_PACK(4);
    BITFIELD bFillBounds:1;
    BITFIELD bIgnoreBackClick:1;
    BITFIELD bAllowSelectEmpty:1;
    INT FixedItemsPerPage GCC_PACK(4);
    BITFIELD bWrapItems:1 GCC_PACK(4);
    DECLARE_CLASS(UGUICircularList,UGUIListBase,0,XInterface)
	void Draw(UCanvas* Canvas);
};


struct UGUICircularImageList_eventSwap_Parms
{
    INT IndexA;
    INT IndexB;
};
class XINTERFACE_API UGUICircularImageList : public UGUICircularList
{
public:
    TArrayNoInit<FGUIListElem> Elements GCC_PACK(4);
    void eventSwap(INT IndexA, INT IndexB)
    {
        UGUICircularImageList_eventSwap_Parms Parms;
        Parms.IndexA=IndexA;
        Parms.IndexB=IndexB;
        ProcessEvent(FindFunctionChecked(XINTERFACE_Swap),&Parms);
    }
    DECLARE_CLASS(UGUICircularImageList,UGUICircularList,0,XInterface)
	void PreDraw(UCanvas* Canvas);
protected:
	void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT HT, UBOOL bSelected, UBOOL bPending);
public:
};


class XINTERFACE_API UGUICharacterList : public UGUICircularList
{
public:
    TArrayNoInit<FPlayerRecord> PlayerList GCC_PACK(4);
    BITFIELD bLocked:1 GCC_PACK(4);
    class UMaterial* DefaultPortrait GCC_PACK(4);
    TArrayNoInit<FPlayerRecord> SelectedElements;
    DECLARE_CLASS(UGUICharacterList,UGUICircularList,0,XInterface)
	void PreDraw(UCanvas* Canvas);
protected:
	void DrawItem(UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT XL, FLOAT YL, UBOOL bSelected, UBOOL bPending);
public:
};


class XINTERFACE_API UGUIHorzList : public UGUIListBase
{
public:
    DECLARE_CLASS(UGUIHorzList,UGUIListBase,0,XInterface)
	void Draw(UCanvas* Canvas);
};


class XINTERFACE_API UGUIMultiColumnListHeader : public UGUIComponent
{
public:
    class UGUIMultiColumnList* MyList GCC_PACK(4);
    INT SizingCol;
    INT ClickingCol;
    class UGUIStyles* BarStyle;
    FStringNoInit BarStyleName;
    DECLARE_CLASS(UGUIMultiColumnListHeader,UGUIComponent,0,XInterface)
	UBOOL MousePressed(UBOOL IsRepeat);
	UBOOL MouseReleased();
	UBOOL MouseMove(INT XDelta, INT YDelta);
	UBOOL MouseHover();
	void Draw(UCanvas* Canvas);
	void PreDraw(UCanvas* Canvas);
};


struct UGUIStyles_eventInitialize_Parms
{
};
struct UGUIStyles_eventOnDrawText_Parms
{
    class UCanvas* Canvas;
    BYTE MenuState;
    FLOAT Left;
    FLOAT Top;
    FLOAT Width;
    FLOAT Height;
    BYTE Align;
    FString Text;
    BYTE FontScale;
    BITFIELD ReturnValue;
};
struct UGUIStyles_eventOnDraw_Parms
{
    class UCanvas* Canvas;
    BYTE MenuState;
    FLOAT Left;
    FLOAT Top;
    FLOAT Width;
    FLOAT Height;
    BITFIELD ReturnValue;
};
class XINTERFACE_API UGUIStyles : public UGUI
{
public:
    FStringNoInit KeyName GCC_PACK(4);
    FStringNoInit AlternateKeyName[2];
    FStringNoInit FontNames[15];
    class UGUIFont* Fonts[15];
    FColor FontColors[5];
    FColor FontBKColors[5];
    FColor ImgColors[5];
    BYTE RStyles[5];
    class UMaterial* Images[5] GCC_PACK(4);
    BYTE ImgStyle[5];
    FLOAT ImgWidths[5] GCC_PACK(4);
    FLOAT ImgHeights[5];
    INT BorderOffsets[4];
    BITFIELD bTemporary:1 GCC_PACK(4);
    FScriptDelegate __OnDraw__Delegate GCC_PACK(4);
    FScriptDelegate __OnDrawText__Delegate;
    DECLARE_FUNCTION(execTextSize);
    DECLARE_FUNCTION(execDrawText);
    DECLARE_FUNCTION(execDraw);
    void eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(XINTERFACE_Initialize),NULL);
    }
    BITFIELD delegateOnDrawText(class UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT Width, FLOAT Height, BYTE Align, const FString& Text, BYTE FontScale)
    {
        UGUIStyles_eventOnDrawText_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        Parms.MenuState=MenuState;
        Parms.Left=Left;
        Parms.Top=Top;
        Parms.Width=Width;
        Parms.Height=Height;
        Parms.Align=Align;
        Parms.Text=Text;
        Parms.FontScale=FontScale;
        ProcessDelegate(XINTERFACE_OnDrawText,&__OnDrawText__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnDraw(class UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT Width, FLOAT Height)
    {
        UGUIStyles_eventOnDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        Parms.MenuState=MenuState;
        Parms.Left=Left;
        Parms.Top=Top;
        Parms.Width=Width;
        Parms.Height=Height;
        ProcessDelegate(XINTERFACE_OnDraw,&__OnDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIStyles,UGUI,0,XInterface)
        void Draw(UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT Width, FLOAT Height);
        void DrawText(UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT Width, FLOAT Height, BYTE Just, const TCHAR* Text, BYTE FontScale);
        void TextSize(UCanvas* Canvas, BYTE MenuState, const TCHAR* Test, FLOAT& XL, FLOAT& YL, BYTE FontScale);
};


struct UGUIFont_eventGetFont_Parms
{
    INT XRes;
    class UFont* ReturnValue;
};
class XINTERFACE_API UGUIFont : public UGUI
{
public:
    FStringNoInit KeyName GCC_PACK(4);
    BITFIELD bFixedSize:1 GCC_PACK(4);
    BITFIELD bScaled:1;
    INT NormalXRes GCC_PACK(4);
    INT FallBackRes;
    TArrayNoInit<FString> FontArrayNames;
    TArrayNoInit<class UFont*> FontArrayFonts;
    DECLARE_FUNCTION(execGetFont);
    class UFont* eventGetFont(INT XRes)
    {
        UGUIFont_eventGetFont_Parms Parms;
        Parms.ReturnValue=0;
        Parms.XRes=XRes;
        ProcessEvent(FindFunctionChecked(XINTERFACE_GetFont),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIFont,UGUI,0,XInterface)
    NO_DEFAULT_CONSTRUCTOR(UGUIFont)
};

#endif

AUTOGENERATE_FUNCTION(UGUIMultiComponent,-1,execFindComponentIndex);
AUTOGENERATE_FUNCTION(UGUIMultiComponent,-1,execRemapComponents);
AUTOGENERATE_FUNCTION(UGUIMultiComponent,-1,execInitializeControls);
AUTOGENERATE_FUNCTION(UGUIComponent,829,execSpecialHit);
AUTOGENERATE_FUNCTION(UGUIComponent,828,execGetMenuPath);
AUTOGENERATE_FUNCTION(UGUIComponent,827,execRelativeHeight);
AUTOGENERATE_FUNCTION(UGUIComponent,826,execRelativeWidth);
AUTOGENERATE_FUNCTION(UGUIComponent,825,execRelativeTop);
AUTOGENERATE_FUNCTION(UGUIComponent,824,execRelativeLeft);
AUTOGENERATE_FUNCTION(UGUIComponent,823,execActualTop);
AUTOGENERATE_FUNCTION(UGUIComponent,822,execActualLeft);
AUTOGENERATE_FUNCTION(UGUIComponent,821,execActualHeight);
AUTOGENERATE_FUNCTION(UGUIComponent,820,execActualWidth);
AUTOGENERATE_FUNCTION(UGUIComponent,817,execUpdateOffset);
AUTOGENERATE_FUNCTION(UGUIComponent,816,execAutoPositionOn);
AUTOGENERATE_FUNCTION(UGUIComponent,815,execAutoPosition);
AUTOGENERATE_FUNCTION(UGUIComponent,814,execKillTimer);
AUTOGENERATE_FUNCTION(UGUIComponent,813,execSetTimer);
AUTOGENERATE_FUNCTION(UGUIComponent,812,execPlayerOwner);
AUTOGENERATE_FUNCTION(UGUI,-1,execGetModLogo);
AUTOGENERATE_FUNCTION(UGUI,-1,execGetModValue);
AUTOGENERATE_FUNCTION(UGUI,-1,execGetModList);
AUTOGENERATE_FUNCTION(UGUI,-1,execProfile);
AUTOGENERATE_FUNCTION(UGUIStyles,-1,execTextSize);
AUTOGENERATE_FUNCTION(UGUIStyles,-1,execDrawText);
AUTOGENERATE_FUNCTION(UGUIStyles,-1,execDraw);
AUTOGENERATE_FUNCTION(UGUIFont,-1,execGetFont);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMainMenuClass);
AUTOGENERATE_FUNCTION(UGUIController,-1,execLaunchURL);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMapList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetWeaponList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execSaveOwnageList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetOwnageList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetDEMHeader);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetDEMList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execProfile);
AUTOGENERATE_FUNCTION(UGUIController,-1,execSetMoveControl);
AUTOGENERATE_FUNCTION(UGUIController,-1,execPlayInterfaceSound);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetOGGList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execResetKeyboard);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetProfileList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execResetInput);
AUTOGENERATE_FUNCTION(UGUIController,-1,execResetDesigner);
AUTOGENERATE_FUNCTION(UGUIController,-1,execSetRenderDevice);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetCurrentRes);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetStyle);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMenuFont);
AUTOGENERATE_FUNCTION(UGUIToolTip,-1,execSetTip);
AUTOGENERATE_FUNCTION(UGUISplitter,-1,execSplitterUpdatePositions);
AUTOGENERATE_FUNCTION(UGUIList,-1,execSortList);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execAddedItem);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execRemovedItem);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execUpdatedItem);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execSortList);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execChangeSortOrder);
AUTOGENERATE_FUNCTION(UGUIMultiColumnList,-1,execGetListIndex);
AUTOGENERATE_FUNCTION(UGUITreeList,-1,execSortList);
AUTOGENERATE_FUNCTION(UGUITreeList,-1,execUpdateVisibleCount);
AUTOGENERATE_FUNCTION(UGUIScrollText,-1,execGetWordUnderCursor);
AUTOGENERATE_FUNCTION(AHudBase,-1,execDrawNumericWidget);
AUTOGENERATE_FUNCTION(AHudBase,-1,execDrawSpriteWidget);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
DECLARE_NATIVE_TYPE(XInterface,UPropertyManagerBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIMultiComponent);
DECLARE_NATIVE_TYPE(XInterface,UGUIComponent);
DECLARE_NATIVE_TYPE(XInterface,UGUI);
DECLARE_NATIVE_TYPE(XInterface,UGUIStyles);
DECLARE_NATIVE_TYPE(XInterface,UGUIFont);
DECLARE_NATIVE_TYPE(XInterface,UGUIController);
DECLARE_NATIVE_TYPE(XInterface,UStateButton);
DECLARE_NATIVE_TYPE(XInterface,UGUIButton);
DECLARE_NATIVE_TYPE(XInterface,UGUIToolTip);
DECLARE_NATIVE_TYPE(XInterface,UGUIContextMenu);
DECLARE_NATIVE_TYPE(XInterface,UGUIProgressBar);
DECLARE_NATIVE_TYPE(XInterface,UCoolImage);
DECLARE_NATIVE_TYPE(XInterface,UGUISectionBackground);
DECLARE_NATIVE_TYPE(XInterface,UGUIImage);
DECLARE_NATIVE_TYPE(XInterface,UGUISlider);
DECLARE_NATIVE_TYPE(XInterface,UGUISplitter);
DECLARE_NATIVE_TYPE(XInterface,UGUIPanel);
DECLARE_NATIVE_TYPE(XInterface,UGUIMenuOption);
DECLARE_NATIVE_TYPE(XInterface,UGUIComboBox);
DECLARE_NATIVE_TYPE(XInterface,UGUIGripButtonBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIGFXButton);
DECLARE_NATIVE_TYPE(XInterface,UGUIScrollZoneBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIScrollButtonBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIScrollBarBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIFloatEdit);
DECLARE_NATIVE_TYPE(XInterface,UGUINumericEdit);
DECLARE_NATIVE_TYPE(XInterface,UGUIEditBox);
DECLARE_NATIVE_TYPE(XInterface,UGUISpinnerButton);
DECLARE_NATIVE_TYPE(XInterface,UGUICheckBoxButton);
DECLARE_NATIVE_TYPE(XInterface,UGUITabPanel);
DECLARE_NATIVE_TYPE(XInterface,UGUITabButton);
DECLARE_NATIVE_TYPE(XInterface,UGUITabControl);
DECLARE_NATIVE_TYPE(XInterface,UGUITitleBar);
DECLARE_NATIVE_TYPE(XInterface,UGUIBorder);
DECLARE_NATIVE_TYPE(XInterface,UGUILabel);
DECLARE_NATIVE_TYPE(XInterface,UGUIPage);
DECLARE_NATIVE_TYPE(XInterface,UGUIVertImageList);
DECLARE_NATIVE_TYPE(XInterface,UGUIVertList);
DECLARE_NATIVE_TYPE(XInterface,UGUIListBase);
DECLARE_NATIVE_TYPE(XInterface,UGUICircularImageList);
DECLARE_NATIVE_TYPE(XInterface,UGUICircularList);
DECLARE_NATIVE_TYPE(XInterface,UMultiSelectList);
DECLARE_NATIVE_TYPE(XInterface,UGUIList);
DECLARE_NATIVE_TYPE(XInterface,UGUIMultiColumnListHeader);
DECLARE_NATIVE_TYPE(XInterface,UGUICharacterList);
DECLARE_NATIVE_TYPE(XInterface,UGUIHorzList);
DECLARE_NATIVE_TYPE(XInterface,UGUIMultiColumnList);
DECLARE_NATIVE_TYPE(XInterface,UGUITreeList);
DECLARE_NATIVE_TYPE(XInterface,UGUIMultiOptionList);
DECLARE_NATIVE_TYPE(XInterface,UGUIScrollText);
DECLARE_NATIVE_TYPE(XInterface,UGUITreeListBox);
DECLARE_NATIVE_TYPE(XInterface,UGUIListBoxBase);
DECLARE_NATIVE_TYPE(XInterface,UGUIMultiColumnListBox);
DECLARE_NATIVE_TYPE(XInterface,UGUIScrollTextBox);
DECLARE_NATIVE_TYPE(XInterface,UGUIListBox);
DECLARE_NATIVE_TYPE(XInterface,AHudBase);

#define AUTO_INITIALIZE_REGISTRANTS_XINTERFACE \
	UPropertyManagerBase::StaticClass(); \
	UGUIMultiComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIMultiComponentNative; \
	UGUIComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIComponentNative; \
	UGUI::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUINative; \
	UGUIStyles::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIStylesNative; \
	UGUIFont::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIFontNative; \
	UGUIController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIControllerNative; \
	UStateButton::StaticClass(); \
	UGUIButton::StaticClass(); \
	UGUIToolTip::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIToolTipNative; \
	UGUIContextMenu::StaticClass(); \
	UGUIProgressBar::StaticClass(); \
	UCoolImage::StaticClass(); \
	UGUISectionBackground::StaticClass(); \
	UGUIImage::StaticClass(); \
	UGUISlider::StaticClass(); \
	UGUISplitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUISplitterNative; \
	UGUIPanel::StaticClass(); \
	UGUIMenuOption::StaticClass(); \
	UGUIComboBox::StaticClass(); \
	UGUIGripButtonBase::StaticClass(); \
	UGUIGFXButton::StaticClass(); \
	UGUIScrollZoneBase::StaticClass(); \
	UGUIScrollButtonBase::StaticClass(); \
	UGUIScrollBarBase::StaticClass(); \
	UGUIFloatEdit::StaticClass(); \
	UGUINumericEdit::StaticClass(); \
	UGUIEditBox::StaticClass(); \
	UGUISpinnerButton::StaticClass(); \
	UGUICheckBoxButton::StaticClass(); \
	UGUITabPanel::StaticClass(); \
	UGUITabButton::StaticClass(); \
	UGUITabControl::StaticClass(); \
	UGUITitleBar::StaticClass(); \
	UGUIBorder::StaticClass(); \
	UGUILabel::StaticClass(); \
	UGUIPage::StaticClass(); \
	UGUIVertImageList::StaticClass(); \
	UGUIVertList::StaticClass(); \
	UGUIListBase::StaticClass(); \
	UGUICircularImageList::StaticClass(); \
	UGUICircularList::StaticClass(); \
	UMultiSelectList::StaticClass(); \
	UGUIList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIListNative; \
	UGUIMultiColumnListHeader::StaticClass(); \
	UGUICharacterList::StaticClass(); \
	UGUIHorzList::StaticClass(); \
	UGUIMultiColumnList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIMultiColumnListNative; \
	UGUITreeList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUITreeListNative; \
	UGUIMultiOptionList::StaticClass(); \
	UGUIScrollText::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceUGUIScrollTextNative; \
	UGUITreeListBox::StaticClass(); \
	UGUIListBoxBase::StaticClass(); \
	UGUIMultiColumnListBox::StaticClass(); \
	UGUIScrollTextBox::StaticClass(); \
	UGUIListBox::StaticClass(); \
	AHudBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXInterfaceAHudBaseNative; \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
NATIVE_INFO(UGUIMultiComponent) GXInterfaceUGUIMultiComponentNatives[] = 
{ 
	MAP_NATIVE(UGUIMultiComponent,execFindComponentIndex)
	MAP_NATIVE(UGUIMultiComponent,execRemapComponents)
	MAP_NATIVE(UGUIMultiComponent,execInitializeControls)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIMultiComponent);

NATIVE_INFO(UGUIComponent) GXInterfaceUGUIComponentNatives[] = 
{ 
	MAP_NATIVE(UGUIComponent,execSpecialHit)
	MAP_NATIVE(UGUIComponent,execGetMenuPath)
	MAP_NATIVE(UGUIComponent,execRelativeHeight)
	MAP_NATIVE(UGUIComponent,execRelativeWidth)
	MAP_NATIVE(UGUIComponent,execRelativeTop)
	MAP_NATIVE(UGUIComponent,execRelativeLeft)
	MAP_NATIVE(UGUIComponent,execActualTop)
	MAP_NATIVE(UGUIComponent,execActualLeft)
	MAP_NATIVE(UGUIComponent,execActualHeight)
	MAP_NATIVE(UGUIComponent,execActualWidth)
	MAP_NATIVE(UGUIComponent,execUpdateOffset)
	MAP_NATIVE(UGUIComponent,execAutoPositionOn)
	MAP_NATIVE(UGUIComponent,execAutoPosition)
	MAP_NATIVE(UGUIComponent,execKillTimer)
	MAP_NATIVE(UGUIComponent,execSetTimer)
	MAP_NATIVE(UGUIComponent,execPlayerOwner)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIComponent);

NATIVE_INFO(UGUI) GXInterfaceUGUINatives[] = 
{ 
	MAP_NATIVE(UGUI,execGetModLogo)
	MAP_NATIVE(UGUI,execGetModValue)
	MAP_NATIVE(UGUI,execGetModList)
	MAP_NATIVE(UGUI,execProfile)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUI);

NATIVE_INFO(UGUIStyles) GXInterfaceUGUIStylesNatives[] = 
{ 
	MAP_NATIVE(UGUIStyles,execTextSize)
	MAP_NATIVE(UGUIStyles,execDrawText)
	MAP_NATIVE(UGUIStyles,execDraw)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIStyles);

NATIVE_INFO(UGUIFont) GXInterfaceUGUIFontNatives[] = 
{ 
	MAP_NATIVE(UGUIFont,execGetFont)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIFont);

NATIVE_INFO(UGUIController) GXInterfaceUGUIControllerNatives[] = 
{ 
	MAP_NATIVE(UGUIController,execGetMainMenuClass)
	MAP_NATIVE(UGUIController,execLaunchURL)
	MAP_NATIVE(UGUIController,execGetMapList)
	MAP_NATIVE(UGUIController,execGetWeaponList)
	MAP_NATIVE(UGUIController,execSaveOwnageList)
	MAP_NATIVE(UGUIController,execGetOwnageList)
	MAP_NATIVE(UGUIController,execGetDEMHeader)
	MAP_NATIVE(UGUIController,execGetDEMList)
	MAP_NATIVE(UGUIController,execProfile)
	MAP_NATIVE(UGUIController,execSetMoveControl)
	MAP_NATIVE(UGUIController,execPlayInterfaceSound)
	MAP_NATIVE(UGUIController,execGetOGGList)
	MAP_NATIVE(UGUIController,execResetKeyboard)
	MAP_NATIVE(UGUIController,execGetProfileList)
	MAP_NATIVE(UGUIController,execResetInput)
	MAP_NATIVE(UGUIController,execResetDesigner)
	MAP_NATIVE(UGUIController,execSetRenderDevice)
	MAP_NATIVE(UGUIController,execGetCurrentRes)
	MAP_NATIVE(UGUIController,execGetStyle)
	MAP_NATIVE(UGUIController,execGetMenuFont)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIController);

NATIVE_INFO(UGUIToolTip) GXInterfaceUGUIToolTipNatives[] = 
{ 
	MAP_NATIVE(UGUIToolTip,execSetTip)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIToolTip);

NATIVE_INFO(UGUISplitter) GXInterfaceUGUISplitterNatives[] = 
{ 
	MAP_NATIVE(UGUISplitter,execSplitterUpdatePositions)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUISplitter);

NATIVE_INFO(UGUIList) GXInterfaceUGUIListNatives[] = 
{ 
	MAP_NATIVE(UGUIList,execSortList)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIList);

NATIVE_INFO(UGUIMultiColumnList) GXInterfaceUGUIMultiColumnListNatives[] = 
{ 
	MAP_NATIVE(UGUIMultiColumnList,execAddedItem)
	MAP_NATIVE(UGUIMultiColumnList,execRemovedItem)
	MAP_NATIVE(UGUIMultiColumnList,execUpdatedItem)
	MAP_NATIVE(UGUIMultiColumnList,execSortList)
	MAP_NATIVE(UGUIMultiColumnList,execChangeSortOrder)
	MAP_NATIVE(UGUIMultiColumnList,execGetListIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIMultiColumnList);

NATIVE_INFO(UGUITreeList) GXInterfaceUGUITreeListNatives[] = 
{ 
	MAP_NATIVE(UGUITreeList,execSortList)
	MAP_NATIVE(UGUITreeList,execUpdateVisibleCount)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUITreeList);

NATIVE_INFO(UGUIScrollText) GXInterfaceUGUIScrollTextNatives[] = 
{ 
	MAP_NATIVE(UGUIScrollText,execGetWordUnderCursor)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,UGUIScrollText);

NATIVE_INFO(AHudBase) GXInterfaceAHudBaseNatives[] = 
{ 
	MAP_NATIVE(AHudBase,execDrawNumericWidget)
	MAP_NATIVE(AHudBase,execDrawSpriteWidget)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XInterface,AHudBase);

#endif // NATIVES_ONLY

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UPropertyManagerBase)
VERIFY_CLASS_SIZE_NODIE(UGUIMultiComponent)
VERIFY_CLASS_SIZE_NODIE(UGUIComponent)
VERIFY_CLASS_SIZE_NODIE(UGUI)
VERIFY_CLASS_SIZE_NODIE(UGUIStyles)
VERIFY_CLASS_SIZE_NODIE(UGUIFont)
VERIFY_CLASS_SIZE_NODIE(UGUIController)
VERIFY_CLASS_SIZE_NODIE(UStateButton)
VERIFY_CLASS_SIZE_NODIE(UGUIButton)
VERIFY_CLASS_SIZE_NODIE(UGUIToolTip)
VERIFY_CLASS_SIZE_NODIE(UGUIContextMenu)
VERIFY_CLASS_SIZE_NODIE(UGUIProgressBar)
VERIFY_CLASS_SIZE_NODIE(UCoolImage)
VERIFY_CLASS_SIZE_NODIE(UGUISectionBackground)
VERIFY_CLASS_SIZE_NODIE(UGUIImage)
VERIFY_CLASS_SIZE_NODIE(UGUISlider)
VERIFY_CLASS_SIZE_NODIE(UGUISplitter)
VERIFY_CLASS_SIZE_NODIE(UGUIPanel)
VERIFY_CLASS_SIZE_NODIE(UGUIMenuOption)
VERIFY_CLASS_SIZE_NODIE(UGUIComboBox)
VERIFY_CLASS_SIZE_NODIE(UGUIGripButtonBase)
VERIFY_CLASS_SIZE_NODIE(UGUIGFXButton)
VERIFY_CLASS_SIZE_NODIE(UGUIScrollZoneBase)
VERIFY_CLASS_SIZE_NODIE(UGUIScrollButtonBase)
VERIFY_CLASS_SIZE_NODIE(UGUIScrollBarBase)
VERIFY_CLASS_SIZE_NODIE(UGUIFloatEdit)
VERIFY_CLASS_SIZE_NODIE(UGUINumericEdit)
VERIFY_CLASS_SIZE_NODIE(UGUIEditBox)
VERIFY_CLASS_SIZE_NODIE(UGUISpinnerButton)
VERIFY_CLASS_SIZE_NODIE(UGUICheckBoxButton)
VERIFY_CLASS_SIZE_NODIE(UGUITabPanel)
VERIFY_CLASS_SIZE_NODIE(UGUITabButton)
VERIFY_CLASS_SIZE_NODIE(UGUITabControl)
VERIFY_CLASS_SIZE_NODIE(UGUITitleBar)
VERIFY_CLASS_SIZE_NODIE(UGUIBorder)
VERIFY_CLASS_SIZE_NODIE(UGUILabel)
VERIFY_CLASS_SIZE_NODIE(UGUIPage)
VERIFY_CLASS_SIZE_NODIE(UGUIVertImageList)
VERIFY_CLASS_SIZE_NODIE(UGUIVertList)
VERIFY_CLASS_SIZE_NODIE(UGUIListBase)
VERIFY_CLASS_SIZE_NODIE(UGUICircularImageList)
VERIFY_CLASS_SIZE_NODIE(UGUICircularList)
VERIFY_CLASS_SIZE_NODIE(UMultiSelectList)
VERIFY_CLASS_SIZE_NODIE(UGUIList)
VERIFY_CLASS_SIZE_NODIE(UGUIMultiColumnListHeader)
VERIFY_CLASS_SIZE_NODIE(UGUICharacterList)
VERIFY_CLASS_SIZE_NODIE(UGUIHorzList)
VERIFY_CLASS_SIZE_NODIE(UGUIMultiColumnList)
VERIFY_CLASS_SIZE_NODIE(UGUITreeList)
VERIFY_CLASS_SIZE_NODIE(UGUIMultiOptionList)
VERIFY_CLASS_SIZE_NODIE(UGUIScrollText)
VERIFY_CLASS_SIZE_NODIE(UGUITreeListBox)
VERIFY_CLASS_SIZE_NODIE(UGUIListBoxBase)
VERIFY_CLASS_SIZE_NODIE(UGUIMultiColumnListBox)
VERIFY_CLASS_SIZE_NODIE(UGUIScrollTextBox)
VERIFY_CLASS_SIZE_NODIE(UGUIListBox)
VERIFY_CLASS_SIZE_NODIE(AHudBase)
#endif // VERIFY_CLASS_SIZES
