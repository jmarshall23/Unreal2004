# Assuming GNU make (>v3.79)
# $Id: Make.defs,v 1.44 2002/02/18 14:00:03 iestyn Exp $
# $Name: t-stevet-RWSpre-030110 $

# vim:syntax=make:

#######################################################################
#
# Initial macro defs and sanity checks for cowpat make
#
# This file _may_ be included early on (before Make.rules) by any client
# makefile that requires it. Make.rules will include it if it hasn't been
# seen.
#
#######################################################################

&Make.defs.seen:=yes# Standard Cowpat include notifier

# Name our default target early on

.PHONY: all
all:

#######################################################################
# Very early (and minimal) sanity

# makerulesdir needs to be set
$(if ${makerulesdir},,$(error cowpat: You must set $${makerulesdir}))
$(if $(filter $(dir ${makerulesdir}),${makerulesdir}),,$(error cowpat: $${makerulesdir} (${makerulesdir}) must end in /))

errpfix:=cowpat: # Trailing space

ifndef &Make.standalone.platform.seen
include ${makerulesdir}Make.standalone.platform
&cpincfiles+=Make.standalone.platform
endif

#######################################################################
# Some early fixed definitions

&sep:=||# Something that won't appear in a file name

&null:=
&sp:=${&null} # Trailing space
&tab:=${&null}	# A single tab. Dontya lurve make?
&sptab:=${&sp}${&tab}
&comma:=,
define &nl


endef # A newline -- neat huh?

&1to9:=1 2 3 4 5 6 7 8 9
&0to9:=0 ${&1to9}
&00to50:=$(foreach i,0 1 2 3 4,$(addprefix $i,${&0to9})) 50
&00to50-with-sep:=$(addsuffix ${&sep},${&00to50})

ifeq (,$(filter ${MAKELEVEL},${&0to9}))
$(error cowpat: $${MAKELEVEL} (${MAKELEVEL}) greater than 9 (I never thought this would happen))
endif

&0toMAKELEVEL:=0 $(wordlist 1,${MAKELEVEL},${&1to9})

#######################################################################
# Canned Configurations (comma separated)
#
# Process these before other sanity checks
#
# Note that these only contain command-line options and are therefore
# independant of _all_ cowpat makefiles (apparently)

ifdef config
  _configfiles:=$(addprefix configs/Make.canned.,$(subst ${&comma}, ,${config}))
  _actualconfigfiles:=$(addprefix ${makerulesdir},${_configfiles})
  # Fail if files not immediately available
  $(foreach f,${_actualconfigfiles},$(if $(wildcard $f),,$(error $f: not found)))
  # Next line should work (barring syntax errors in the files)
  include ${_actualconfigfiles}
  # Record included files.
  # Make.rules has a rule to limit make's attempt to re-make thes files
  &cpincfiles+=${_configfiles}
endif # config

#######################################################################
# Define variables so that we can use --warn-undefined-variables
#
# These may(will) of course be overridden on the command-line, (or
# unusually in the including Cowpat makefile).

MAKECMDGOALS?=

gendeps?=# no
genmaks?=# no
genmak?=# no
autodiscoverx11?=#no
incpath?=
libpath?=
config?=
tgtpfx?=
tgtsfx?=
EXTRALDFLAGS?=
SOURCES_${PLATFORM}?=
SOURCES_ifnot_elate?=
SOURCES_ifnot_irix?=
SOURCES_ifnot_linux?=
SOURCES_ifnot_linux-ipaq?=
SOURCES_ifnot_ps2?=
SOURCES_ifnot_win32?=
SOURCES_ifnot_trimedia?=
&extrasources?=
extraobjects?=
extralibs?=
&parallel?=# Set to .PARALELL to force serial compiles


# Variables with names blah[0-9] are meant to be used in recursive makes
# as "blah${MAKELEVEL}:=foo" -- these are then all interpreted by Cowpat.
# Here we define the first five levels. If ever we go deeper than that
# then there may be warnings.
#
# [Surely there's a better way than this blanket approach?]

cdefs?=
cdefs0?=
cdefs1?=
cdefs2?=
cdefs3?=
cdefs4?=

hackincpath?=# Never, ever use this
incpath0?=
incpath1?=
incpath2?=
incpath3?=
incpath4?=

hacklibpath?=# Never, ever use this
libpath0?=
libpath1?=
libpath2?=
libpath3?=
libpath4?=

libs?=
libs0?=
libs1?=
libs2?=
libs3?=
libs4?=

sonylibdir?=/usr/local/sce/ee/lib
trimedialibdir?=//e/Trimedia/stb/lib_el

browse?=none# win32

#######################################################################
#
# Convenience
#

&warn=$(warning $1 = [${$1}])

#######################################################################
#
# Standard macro definitions for cowpat
# Read-only stuff
#

&platformsrequiringx11:=linux-i686 linux-sa1100
&crts:=shared static
&dsuff:=# Empty on non-win32

ifeq (win32,${PLATFORM})
_release-crts:=static mthread dll
_debug-crts:=$(addsuffix d,${_release-crts})
&crts:=${_release-crts} ${_debug-crts}
# There's a problem if CRT is not yet set properly (it might not be if
# this file is included at the top of a makefile, with Make.rules
# appearing at the bottom). We'll fix it with "=" for now.
&dsuff=$(if $(filter ${CRT},${_debug-crts}),d)# 'd' for debug CRTs
endif

&osses:=macosx win32 elate linux# An 'erd of 'osses?
&browses:=none nonlocal complete
&inlines:=none specified any
&targettypes:=library shared executable $(if $(filter elate,${&os}),none)
&precisions:=single double fixed
&noises:=silent quiet loud earsplitting# order important here
&defaultnoise:=quiet

# A "token" left behind in every directory we make
&recordcreationtime:=.cowpat

#######################################################################
# Make things verbose if you want
#
# TODO: more work

noise?=${&defaultnoise}

# First 3 noises simply imply "@" prefix to many commands
q:=$(if $(filter ${noise},($(wordlist 1,3,${&noises}))),@)

#----------------------------------------------------------------------
# Default codegoing for shared & executable targets.
# Note that there is no default for library targets.
# Todo: Move this to appropriate file
&codegoing_executable:=intoexe
&codegoing_shared:=intodll
&codegoing_library:=

ifndef codegoing
  codegoing=${&codegoing_${targettype}}# Yes, "=" not ":="
endif

#----------------------------------------------------------------------
#
# Compiler control
#

# Allow a user to do
#	make -f MeMakefile doit=maks:deps

&phases:=maks themak deps compile link install run# order important here

do?=${&phases}
dont?=

override dont:=$(subst ${&comma}, ,$(subst ;, ,$(subst :, ,${dont})))
override do:=$(filter-out ${dont},$(subst ${&comma}, ,$(subst ;, ,$(subst :, ,${do}))))

&do-maks:=$(filter maks,${do})
&do-themak:=$(filter themak,${do})
&do-deps:=$(filter deps,${do})
&do-compile:=$(filter compile,${do})
&do-link:=$(filter link,${do})
&do-run:=$(filter run,${do})
&do-install:=$(filter install,${do})
&do-runmak:=$(filter deps compile link run,${do})

ifeq (,1)
$(warning ,   [do] [${do}])
$(warning ,   [dont] [${dont}])
$(warning ,   [&do-maks] [${&do-maks}])
$(warning , [&do-themak] [${&do-themak}])
$(warning ,   [&do-deps] [${&do-deps}])
$(warning ,[&do-compile] [${&do-compile}])
$(warning ,   [&do-link] [${&do-link}])
$(warning ,    [&do-run] [${&do-run}])
$(warning , [&do-runmak] [${&do-runmak}])
$(warning , [&do-install] [${&do-install}])
endif

#######################################################################
# builddir
#
# This  is where all the compiler temporaries and output files go.
# In order we choose:
#	* As specified on the command line
#	* _b_${PLATFORM}_${BUILD}[_${CRT} on win32] (e.g., _b_win32_free_dlld)
#
# All auto-generated builddirs have the relatively long prefix "_b_". This
# is to enable easy clean-up of the disk with
#
#   find . -type d -name '_b_*' | xargs rm -rf
#
# say.

buildrootprefix:=_r_
builddirprefix:=_b_# Used to be "_build"
builddirsuffix:=# "_static", "_dlld" etc., on win32 ... should happen on e.g. Linux for mt/shared lib builds too.

ifeq (win32,${PLATFORM})
builddirsuffix:=_${CRT}
endif

ifndef builddir
builddir:=${builddirprefix}${PLATFORM}${&ipaq}_b${BUILD}_s${SYMBOLS}_o${OPTS}_p${PRECISION}${builddirsuffix}/
endif

#######################################################################
#
# Functions
#

# platform-is-one-of
#	$1: List of platforms
&platform-is-one-of=$(filter $1,${PLATFORM})

# formatalternatives
# "a b c" --> "[a|b|c]"
&formatalternatives=[$(subst ${&sp},|,$(strip $1))]

# ensureoneof
# 	Sanity check command line parameters
#	$1: parameter name (NB: the simple name, so that it can appear in the error message)
#	$2: list of allowable values
#	[$3: optional extra text]
#		e.g., $(call &ensureoneof,dog,boxer labrador siamese)
&ensureoneof=$(if $(filter-out 1,$(words $(filter ${$1},$2))),$(error cowpat: $1 must be one of $(call &formatalternatives,$2)$3))

# ensure-one-or-more-of
# 	Sanity check command line parameters
#	$1: parameter name (NB: the simple name, so that it can appear in the error message)
#	$2: list of allowable values
#	[$3: optional extra text]
#		e.g., $(call &ensure-one-or-more-of,dog,boxer labrador siamese)
&ensure-one-or-more-of=$(if $(filter-out $2,$(if ${$1},${$1},blah)),$(error cowpat: $1 must be zero or more from $(call &formatalternatives,$2)$3))

# ensure-zero-or-more-of
# 	Sanity check command line parameters
#	$1: parameter name (NB: the simple name, so that it can appear in the error message)
#	$2: list of allowable values
#	[$3: optional extra text]
#		e.g., $(call &ensure-zero-or-more-of,dog,boxer labrador siamese)
&ensure-zero-or-more-of=$(if $(filter-out $2,${$1}),$(error cowpat: $1 must be zero or more from $(call &formatalternatives,$2)$3))

# ensureset
#	$1: parameter name (NB: the simple name, so that it can appear in the error message)
#	[$2: optional text]
#	e.g., $(call ensureset,dodgyvar)
&ensureset=$(if ${$1},,$(error $(if $2,$2,cowpat: You must set $1)))

# ensurefinalslash
#	$1: parameter name (NB: the simple name, so that it can appear in the error message)
#	e.g., $(call ensurefinalslash,dodgyvar)
&ensurefinalslash=$(if $(filter $(dir ${$1}),${$1}),,$(error cowpat: $${$1} (${$1}) must end in /))

# formatpath
# 	Changes space separated path to ";" (or ":") separated
#	$1: list if names
#	e.g., $(call formatpath,. ../common c:/classes.zip)
&formatpath=$(subst ${&sp},;,$(strip $1))

# recursiveglob
#	$1:	cwd (the find is rooted here)		(defaults to .)
#	$2:	find search paths relative to $1	(defaults to .) 
#	$3:	space separated list of file globs
#	e.g., $(call recursiveglob,.,./common,*.java *.class)
#recursiveglob=$(shell cd '$1' && find $(if $2,$2,.) -type f -a \( $(wordlist 2,1024,$(patsubst %,-o -name '%',$3)) \))
&recursiveglob=$(if $3,,$(error &recursiveglob: Need 3 args))$(shell $(if $1,cd '$1' &&) find $(if $2,$2,.) -type f -a \( $(wordlist 2,1024,$(patsubst %,-o -name '%',$3)) \))

# pathkilldot
#	Remove single "."'s from a path
#
# Note that trailing/leading/consecutive space is killed by the filter-out
#pathkilldot=$(subst ${space},/,$(filter-out .,$(subst /,${space},$1)))
&pathkilldot=$(subst /./,/,$(subst /./,/,$1))

# canonpath
#	Canonicalizes a path by removing "." and "blah/.." terms
#   ("../.." and "//.." should naturally remain unmolested)
#
# Notes
#  Slashes are surrounded by spaces, then spaces are removed inside "/ ..",
#  and the resulting "a/.." are filtered out (EXCEPT "../..").
#
# Limitations
#  Fails to recognise traling ".." unless path ends in "/"
#
# Careful! Spaces are _very_ significant here
#canonpath=$(shell cd $1 && pwd)
&pairup=$(subst ${&sp}/ .. / ,/../ , $(strip $(subst /, / ,$1)) )
&candidates=$(filter-out //../ ../../,$(filter %/../,$1))
&killpairs=$(filter-out $(call &candidates,$(call &pairup,$1)),$(call &pairup,$1))
&canonpath=$(subst ${&sp},,$(call &killpairs,$(call &killpairs,$(call &pathkilldot,$1))))

# fmttarget
#	Generates a list of targets from ${&source}
#	$1: Source bit before extension
#	$2: Source extension
#	$3: Target extension
#
# e.g, [1.cpp 2_ps2.cpp] --> $(call &fmtarget,_ps2,.cpp,.mak) --> [${builddir}2_ps2.mak]
&fmtarget=$(patsubst %$2,${builddir}%$3,$(filter %$1$2,${&sources}))

# add-sorted-prefix    a b c --> 00||a 01||b 02||c
# remove-sorted-prefix 00||a 01||b 02||c -->  a b c
&add-sorted-prefix=$(join $(wordlist 1,$(words $1),${&00to50-with-sep}),$1)
&remove-sorted-prefix=$(filter-out %${&sep},$(subst ${&sep},${&sep}${&sp},$1))

# remove-duplicates
#	Remove duplicaties on a space sepearted list, preserving order
#	$1: space seperated filenames
#
# Note: The input pattern shouldn't contain ${&sep}
#
# Method:
# Consider this input:
#	"f3 f2 f1 f2"
# Use a seperator which won't appear in a filename:
#	"||"
# Add sorted prefix to each input file:
#	"a||f3 b||f2 c||f1 d||f2"
# $(sort...) input to give a unique list of files (but in the wrong order):
#	"f1 f2 f3"
#
# do a $(foreach...) on this list:
#    FOR i IN f1 f2 f3 DO
#      filter out anything that matches %||$i (e.g., b||f2 d||f2)
#      return the first match
#    DONE
#
# This gives us "c||f1 b||f2 a||f3".
# Sort this to give correct (original order): "a||f3 b||f2 c||f1"
# Add a space after the non-filename seperators: "a|| f3 b|| f2 c|| f1"
# $(filter-out...) anything with the sepeartor in it - voila!:"f3 f2 f1"
#
# Note: The prefixes used to be a-z, but we have platforms with more than
# 26 paths. 50 should do for now
#
# Note: Judicious use of $(call...) avoids repeated evaluation of
# add-sorted-prefix in the for loop
&first-matches=$(foreach i,$1,$(firstword $(filter %${&sep}${i},$2)))
&remove-duplicates=$(call &remove-sorted-prefix\
    ,$(sort $(call &first-matches,$(sort $1),$(call &add-sorted-prefix,$1))))

ifdef asserts
&remove-duplicates-1=$(call &remove-sorted-prefix\
    ,$(sort $(call &first-matches,$(sort $1),$(call &add-sorted-prefix,$1))))
&escape=$(subst %,|||,$(subst ${&sp},_,$1))something-incase-empty
&are-equal=$(filter $(call &escape,$1),$(call &escape,$2))
&remove-duplicates=$(if $(call &are-equal,$(sort $1),$(sort $(call &remove-duplicates-1,$1))),$(call &remove-duplicates-1,$1),\
  $(warning cowpat: Error in $${&remove-duplicates})\
  $(warning [$(sort $1)]!=[$(sort $(call &remove-duplicates-1,$1))])\
  $(error Can't continue))
endif
